{"version":3,"file":"static/js/7678.01eacae9.chunk.js","mappings":"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","sources":["components/FormattedCurrencyAmount/index.tsx","components/Toggle/MultiToggle.tsx","components/RateToggle/index.tsx","hooks/usePools.ts","hooks/useERC20Permit.ts","hooks/useV2LiquidityTokenPermit.ts","pages/MigrateV2/MigrateV2Pair.tsx","lib/utils/formatLocaleNumber.ts","utils/formatCurrencyAmount.ts"],"sourcesContent":["import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nconst CURRENCY_AMOUNT_MIN = new Fraction(JSBI.BigInt(1), JSBI.BigInt(1000000))\n\nexport default function FormattedCurrencyAmount({\n  currencyAmount,\n  significantDigits = 4,\n}: {\n  currencyAmount: CurrencyAmount<Currency>\n  significantDigits?: number\n}) {\n  return (\n    <>\n      {currencyAmount.equalTo(JSBI.BigInt(0))\n        ? '0'\n        : currencyAmount.greaterThan(CURRENCY_AMOUNT_MIN)\n        ? currencyAmount.toSignificant(significantDigits)\n        : `<${CURRENCY_AMOUNT_MIN.toSignificant(1)}`}\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport const ToggleWrapper = styled.button<{ width?: string }>`\n  display: flex;\n  align-items: center;\n  width: ${({ width }) => width ?? '100%'};\n  padding: 1px;\n  background: ${({ theme }) => theme.surface2};\n  border-radius: 8px;\n  border: ${({ theme }) => '1px solid ' + theme.surface3};\n  cursor: pointer;\n  outline: none;\n`\n\nexport const ToggleElement = styled.span<{ isActive?: boolean; fontSize?: string }>`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 4px 0.5rem;\n  border-radius: 6px;\n  justify-content: center;\n  height: 100%;\n  background: ${({ theme, isActive }) => (isActive ? theme.surface1 : 'none')};\n  color: ${({ theme, isActive }) => (isActive ? theme.neutral1 : theme.neutral3)};\n  font-size: ${({ fontSize }) => fontSize ?? '1rem'};\n  font-weight: 535;\n  white-space: nowrap;\n  :hover {\n    user-select: initial;\n    color: ${({ theme, isActive }) => (isActive ? theme.neutral2 : theme.neutral3)};\n  }\n`\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { ToggleElement, ToggleWrapper } from 'components/Toggle/MultiToggle'\n\n// the order of displayed base currencies from left to right is always in sort order\n// currencyA is treated as the preferred base currency\nexport default function RateToggle({\n  currencyA,\n  currencyB,\n  handleRateToggle,\n}: {\n  currencyA: Currency\n  currencyB: Currency\n  handleRateToggle: () => void\n}) {\n  const tokenA = currencyA?.wrapped\n  const tokenB = currencyB?.wrapped\n\n  const isSorted = tokenA && tokenB && tokenA.sortsBefore(tokenB)\n\n  return tokenA && tokenB ? (\n    <div style={{ width: 'fit-content', display: 'flex', alignItems: 'center' }} onClick={handleRateToggle}>\n      <ToggleWrapper width=\"fit-content\">\n        <ToggleElement isActive={isSorted} fontSize=\"12px\">\n          <Trans>{isSorted ? currencyA.symbol : currencyB.symbol}</Trans>\n        </ToggleElement>\n        <ToggleElement isActive={!isSorted} fontSize=\"12px\">\n          <Trans>{isSorted ? currencyB.symbol : currencyA.symbol}</Trans>\n        </ToggleElement>\n      </ToggleWrapper>\n    </div>\n  ) : null\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh, Currency, Token, V3_CORE_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport IUniswapV3PoolStateJSON from '@uniswap/v3-core/artifacts/contracts/interfaces/pool/IUniswapV3PoolState.sol/IUniswapV3PoolState.json'\nimport { computePoolAddress } from '@uniswap/v3-sdk'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useMultipleContractSingleData } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\nimport { IUniswapV3PoolStateInterface } from 'wallet/src/abis/types/v3/IUniswapV3PoolState'\n\nconst POOL_STATE_INTERFACE = new Interface(IUniswapV3PoolStateJSON.abi) as IUniswapV3PoolStateInterface\n\n// Classes are expensive to instantiate, so this caches the recently instantiated pools.\n// This avoids re-instantiating pools as the other pools in the same request are loaded.\nclass PoolCache {\n  // Evict after 128 entries. Empirically, a swap uses 64 entries.\n  private static MAX_ENTRIES = 128\n\n  // These are FIFOs, using unshift/pop. This makes recent entries faster to find.\n  private static pools: Pool[] = []\n  private static addresses: { key: string; address: string }[] = []\n\n  static getPoolAddress(factoryAddress: string, tokenA: Token, tokenB: Token, fee: FeeAmount): string {\n    if (this.addresses.length > this.MAX_ENTRIES) {\n      this.addresses = this.addresses.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const { address: addressA } = tokenA\n    const { address: addressB } = tokenB\n    const key = `${factoryAddress}:${addressA}:${addressB}:${fee.toString()}`\n    const found = this.addresses.find((address) => address.key === key)\n    if (found) return found.address\n\n    const address = {\n      key,\n      address: computePoolAddress({\n        factoryAddress,\n        tokenA,\n        tokenB,\n        fee,\n      }),\n    }\n    this.addresses.unshift(address)\n    return address.address\n  }\n\n  static getPool(\n    tokenA: Token,\n    tokenB: Token,\n    fee: FeeAmount,\n    sqrtPriceX96: BigintIsh,\n    liquidity: BigintIsh,\n    tick: number\n  ): Pool {\n    if (this.pools.length > this.MAX_ENTRIES) {\n      this.pools = this.pools.slice(0, this.MAX_ENTRIES / 2)\n    }\n\n    const found = this.pools.find(\n      (pool) =>\n        pool.token0 === tokenA &&\n        pool.token1 === tokenB &&\n        pool.fee === fee &&\n        JSBI.EQ(pool.sqrtRatioX96, sqrtPriceX96) &&\n        JSBI.EQ(pool.liquidity, liquidity) &&\n        pool.tickCurrent === tick\n    )\n    if (found) return found\n\n    const pool = new Pool(tokenA, tokenB, fee, sqrtPriceX96, liquidity, tick)\n    this.pools.unshift(pool)\n    return pool\n  }\n}\n\nexport enum PoolState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID,\n}\n\nexport function usePools(\n  poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][]\n): [PoolState, Pool | null][] {\n  const { chainId } = useWeb3React()\n\n  const poolTokens: ([Token, Token, FeeAmount] | undefined)[] = useMemo(() => {\n    if (!chainId) return new Array(poolKeys.length)\n\n    return poolKeys.map(([currencyA, currencyB, feeAmount]) => {\n      if (currencyA && currencyB && feeAmount) {\n        const tokenA = currencyA.wrapped\n        const tokenB = currencyB.wrapped\n        if (tokenA.equals(tokenB)) return undefined\n\n        return tokenA.sortsBefore(tokenB) ? [tokenA, tokenB, feeAmount] : [tokenB, tokenA, feeAmount]\n      }\n      return undefined\n    })\n  }, [chainId, poolKeys])\n\n  const poolAddresses: (string | undefined)[] = useMemo(() => {\n    const v3CoreFactoryAddress = chainId && V3_CORE_FACTORY_ADDRESSES[chainId]\n    if (!v3CoreFactoryAddress) return new Array(poolTokens.length)\n\n    return poolTokens.map((value) => value && PoolCache.getPoolAddress(v3CoreFactoryAddress, ...value))\n  }, [chainId, poolTokens])\n\n  const slot0s = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'slot0')\n  const liquidities = useMultipleContractSingleData(poolAddresses, POOL_STATE_INTERFACE, 'liquidity')\n\n  return useMemo(() => {\n    return poolKeys.map((_key, index) => {\n      const tokens = poolTokens[index]\n      if (!tokens) return [PoolState.INVALID, null]\n      const [token0, token1, fee] = tokens\n\n      if (!slot0s[index]) return [PoolState.INVALID, null]\n      const { result: slot0, loading: slot0Loading, valid: slot0Valid } = slot0s[index]\n\n      if (!liquidities[index]) return [PoolState.INVALID, null]\n      const { result: liquidity, loading: liquidityLoading, valid: liquidityValid } = liquidities[index]\n\n      if (!tokens || !slot0Valid || !liquidityValid) return [PoolState.INVALID, null]\n      if (slot0Loading || liquidityLoading) return [PoolState.LOADING, null]\n      if (!slot0 || !liquidity) return [PoolState.NOT_EXISTS, null]\n      if (!slot0.sqrtPriceX96 || slot0.sqrtPriceX96.eq(0)) return [PoolState.NOT_EXISTS, null]\n\n      try {\n        const pool = PoolCache.getPool(token0, token1, fee, slot0.sqrtPriceX96, liquidity[0], slot0.tick)\n        return [PoolState.EXISTS, pool]\n      } catch (error) {\n        console.error('Error when constructing the pool', error)\n        return [PoolState.NOT_EXISTS, null]\n      }\n    })\n  }, [liquidities, poolKeys, slot0s, poolTokens])\n}\n\nexport function usePool(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n  feeAmount: FeeAmount | undefined\n): [PoolState, Pool | null] {\n  const poolKeys: [Currency | undefined, Currency | undefined, FeeAmount | undefined][] = useMemo(\n    () => [[currencyA, currencyB, feeAmount]],\n    [currencyA, currencyB, feeAmount]\n  )\n\n  return usePools(poolKeys)[0]\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { splitSignature } from '@ethersproject/bytes'\nimport { ChainId, Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport JSBI from 'jsbi'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo, useState } from 'react'\n\nimport { DAI, UNI, USDC_MAINNET } from '../constants/tokens'\nimport { useEIP2612Contract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\n\nexport enum PermitType {\n  AMOUNT = 1,\n  ALLOWED = 2,\n}\n\n// 20 minutes to submit after signing\nconst PERMIT_VALIDITY_BUFFER = 20 * 60\n\nexport interface PermitInfo {\n  type: PermitType\n  name: string\n  // version is optional, and if omitted, will not be included in the domain\n  version?: string\n}\n\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS: {\n  [chainId: number]: {\n    [checksummedTokenAddress: string]: PermitInfo\n  }\n} = {\n  [ChainId.MAINNET]: {\n    [USDC_MAINNET.address]: { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n    [DAI.address]: { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[ChainId.MAINNET].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  [ChainId.GOERLI]: {\n    [UNI[ChainId.GOERLI].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  [ChainId.SEPOLIA]: {\n    [UNI[ChainId.SEPOLIA].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n}\n\nenum UseERC20PermitState {\n  // returned for any reason, e.g. it is an argent wallet, or the currency does not support it\n  NOT_APPLICABLE,\n  LOADING,\n  NOT_SIGNED,\n  SIGNED,\n}\n\ninterface BaseSignatureData {\n  v: number\n  r: string\n  s: string\n  deadline: number\n  nonce: number\n  owner: string\n  spender: string\n  chainId: number\n  tokenAddress: string\n  permitType: PermitType\n}\n\ninterface StandardSignatureData extends BaseSignatureData {\n  amount: string\n}\n\ninterface AllowedSignatureData extends BaseSignatureData {\n  allowed: true\n}\n\ntype SignatureData = StandardSignatureData | AllowedSignatureData\n\nconst EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [\n  { name: 'name', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP2612_TYPE = [\n  { name: 'owner', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'value', type: 'uint256' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'deadline', type: 'uint256' },\n]\n\nconst PERMIT_ALLOWED_TYPE = [\n  { name: 'holder', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'expiry', type: 'uint256' },\n  { name: 'allowed', type: 'bool' },\n]\n\nexport function useERC20Permit(\n  currencyAmount: CurrencyAmount<Currency> | null | undefined,\n  spender: string | null | undefined,\n  transactionDeadline: BigNumber | undefined,\n  overridePermitInfo: PermitInfo | undefined | null\n): {\n  signatureData: SignatureData | null\n  state: UseERC20PermitState\n  gatherPermitSignature: null | (() => Promise<void>)\n} {\n  const { account, chainId, provider } = useWeb3React()\n  const tokenAddress = currencyAmount?.currency?.isToken ? currencyAmount.currency.address : undefined\n  const eip2612Contract = useEIP2612Contract(tokenAddress)\n  const isArgentWallet = useIsArgentWallet()\n  const nonceInputs = useMemo(() => [account ?? undefined], [account])\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs)\n  const permitInfo =\n    overridePermitInfo ?? (chainId && tokenAddress ? PERMITTABLE_TOKENS[chainId]?.[tokenAddress] : undefined)\n\n  const [signatureData, setSignatureData] = useState<SignatureData | null>(null)\n\n  return useMemo(() => {\n    if (\n      isArgentWallet ||\n      !currencyAmount ||\n      !eip2612Contract ||\n      !account ||\n      !chainId ||\n      !transactionDeadline ||\n      !provider ||\n      !tokenNonceState.valid ||\n      !tokenAddress ||\n      !spender ||\n      !permitInfo\n    ) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const nonceNumber = tokenNonceState.result?.[0]?.toNumber()\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const isSignatureDataValid =\n      signatureData &&\n      signatureData.owner === account &&\n      signatureData.deadline >= transactionDeadline.toNumber() &&\n      signatureData.tokenAddress === tokenAddress &&\n      signatureData.nonce === nonceNumber &&\n      signatureData.spender === spender &&\n      ('allowed' in signatureData ||\n        JSBI.greaterThanOrEqual(JSBI.BigInt(signatureData.amount), currencyAmount.quotient))\n\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER\n        const value = currencyAmount.quotient.toString()\n\n        const message = allowed\n          ? {\n              holder: account,\n              spender,\n              allowed,\n              nonce: nonceNumber,\n              expiry: signatureDeadline,\n            }\n          : {\n              owner: account,\n              spender,\n              value,\n              nonce: nonceNumber,\n              deadline: signatureDeadline,\n            }\n        const domain = permitInfo.version\n          ? {\n              name: permitInfo.name,\n              version: permitInfo.version,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n          : {\n              name: permitInfo.name,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE,\n          },\n          domain,\n          primaryType: 'Permit',\n          message,\n        })\n\n        return provider\n          .send('eth_signTypedData_v4', [account, data])\n          .then(splitSignature)\n          .then((signature) => {\n            setSignatureData({\n              v: signature.v,\n              r: signature.r,\n              s: signature.s,\n              deadline: signatureDeadline,\n              ...(allowed ? { allowed } : { amount: value }),\n              nonce: nonceNumber,\n              chainId,\n              owner: account,\n              spender,\n              tokenAddress,\n              permitType: permitInfo.type,\n            })\n          })\n      },\n    }\n  }, [\n    currencyAmount,\n    eip2612Contract,\n    account,\n    chainId,\n    isArgentWallet,\n    transactionDeadline,\n    provider,\n    tokenNonceState.loading,\n    tokenNonceState.valid,\n    tokenNonceState.result,\n    tokenAddress,\n    spender,\n    permitInfo,\n    signatureData,\n  ])\n}\n","import { CurrencyAmount, Token } from '@uniswap/sdk-core'\n\nimport { PermitInfo, PermitType, useERC20Permit } from './useERC20Permit'\nimport useTransactionDeadline from './useTransactionDeadline'\n\nconst REMOVE_V2_LIQUIDITY_PERMIT_INFO: PermitInfo = {\n  version: '1',\n  name: 'Uniswap V2',\n  type: PermitType.AMOUNT,\n}\n\nexport function useV2LiquidityTokenPermit(\n  liquidityAmount: CurrencyAmount<Token> | null | undefined,\n  spender: string | null | undefined\n) {\n  const transactionDeadline = useTransactionDeadline()\n  return useERC20Permit(liquidityAmount, spender, transactionDeadline, REMOVE_V2_LIQUIDITY_PERMIT_INFO)\n}\n","import { Contract } from '@ethersproject/contracts'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { LiquidityEventName, LiquiditySource } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Fraction, Percent, Price, Token, V2_FACTORY_ADDRESSES } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool, Position, priceToClosestTick, TickMath } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendAnalyticsEvent, useTrace } from 'analytics'\nimport Badge, { BadgeVariant } from 'components/Badge'\nimport { ButtonConfirmed } from 'components/Button'\nimport { BlueCard, DarkGrayCard, LightCard, YellowCard } from 'components/Card'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport FeeSelector from 'components/FeeSelector'\nimport RangeSelector from 'components/RangeSelector'\nimport RateToggle from 'components/RateToggle'\nimport SettingsTab from 'components/Settings'\nimport { Dots } from 'components/swap/styled'\nimport { V2Unsupported } from 'components/V2Unsupported'\nimport { ApprovalState, useApproveCallback } from 'hooks/useApproveCallback'\nimport useCurrentBlockTimestamp from 'hooks/useCurrentBlockTimestamp'\nimport { useNetworkSupportsV2 } from 'hooks/useNetworkSupportsV2'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport useTransactionDeadline from 'hooks/useTransactionDeadline'\nimport { useV2LiquidityTokenPermit } from 'hooks/useV2LiquidityTokenPermit'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { ReactNode, useCallback, useEffect, useMemo, useState } from 'react'\nimport { AlertCircle, AlertTriangle, ArrowDown } from 'react-feather'\nimport { Navigate, useParams } from 'react-router-dom'\nimport { Text } from 'rebass'\nimport { useAppDispatch } from 'state/hooks'\nimport { Bound, resetMintState } from 'state/mint/v3/actions'\nimport { useRangeHopCallbacks, useV3DerivedMintInfo, useV3MintActionHandlers } from 'state/mint/v3/hooks'\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport { useUserSlippageToleranceWithDefault } from 'state/user/hooks'\nimport { useTheme } from 'styled-components'\nimport { formatCurrencyAmount } from 'utils/formatCurrencyAmount'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { AutoColumn } from '../../components/Column'\nimport FormattedCurrencyAmount from '../../components/FormattedCurrencyAmount'\nimport CurrencyLogo from '../../components/Logo/CurrencyLogo'\nimport { AutoRow, RowBetween, RowFixed } from '../../components/Row'\nimport { WRAPPED_NATIVE_CURRENCY } from '../../constants/tokens'\nimport { useToken } from '../../hooks/Tokens'\nimport { usePairContract, useV2MigratorContract } from '../../hooks/useContract'\nimport useIsArgentWallet from '../../hooks/useIsArgentWallet'\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useTokenBalance } from '../../state/connection/hooks'\nimport { TransactionType } from '../../state/transactions/types'\nimport { BackArrowLink, ExternalLink, ThemedText } from '../../theme/components'\nimport { isAddress } from '../../utils'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { currencyId } from '../../utils/currencyId'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { BodyWrapper } from '../AppBody'\nimport { MigrateHeader } from '.'\n\nconst ZERO = JSBI.BigInt(0)\n\nconst DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE = new Percent(75, 10_000)\n\nfunction EmptyState({ message }: { message: ReactNode }) {\n  return (\n    <AutoColumn style={{ minHeight: 200, justifyContent: 'center', alignItems: 'center' }}>\n      <ThemedText.DeprecatedBody>{message}</ThemedText.DeprecatedBody>\n    </AutoColumn>\n  )\n}\n\nfunction LiquidityInfo({\n  token0Amount,\n  token1Amount,\n}: {\n  token0Amount: CurrencyAmount<Token>\n  token1Amount: CurrencyAmount<Token>\n}) {\n  const currency0 = unwrappedToken(token0Amount.currency)\n  const currency1 = unwrappedToken(token1Amount.currency)\n\n  return (\n    <AutoColumn gap=\"sm\">\n      <RowBetween>\n        <RowFixed>\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency0} />\n          <Text fontSize={16} fontWeight={535}>\n            {currency0.symbol}\n          </Text>\n        </RowFixed>\n        <Text fontSize={16} fontWeight={535}>\n          <FormattedCurrencyAmount currencyAmount={token0Amount} />\n        </Text>\n      </RowBetween>\n      <RowBetween>\n        <RowFixed>\n          <CurrencyLogo size=\"20px\" style={{ marginRight: '8px' }} currency={currency1} />\n          <Text fontSize={16} fontWeight={535}>\n            {currency1.symbol}\n          </Text>\n        </RowFixed>\n\n        <Text fontSize={16} fontWeight={535}>\n          <FormattedCurrencyAmount currencyAmount={token1Amount} />\n        </Text>\n      </RowBetween>\n    </AutoColumn>\n  )\n}\n\n// hard-code this for now\nconst percentageToMigrate = 100\n\nfunction V2PairMigration({\n  pair,\n  pairBalance,\n  totalSupply,\n  reserve0,\n  reserve1,\n  token0,\n  token1,\n}: {\n  pair: Contract\n  pairBalance: CurrencyAmount<Token>\n  totalSupply: CurrencyAmount<Token>\n  reserve0: CurrencyAmount<Token>\n  reserve1: CurrencyAmount<Token>\n  token0: Token\n  token1: Token\n}) {\n  const { chainId, account } = useWeb3React()\n  const theme = useTheme()\n  const v2FactoryAddress = chainId ? V2_FACTORY_ADDRESSES[chainId] : undefined\n  const trace = useTrace()\n\n  const pairFactory = useSingleCallResult(pair, 'factory')\n  const isNotUniswap = pairFactory.result?.[0] && pairFactory.result[0] !== v2FactoryAddress\n\n  const deadline = useTransactionDeadline() // custom from users settings\n  const blockTimestamp = useCurrentBlockTimestamp()\n  const allowedSlippage = useUserSlippageToleranceWithDefault(DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE) // custom from users\n\n  const currency0 = unwrappedToken(token0)\n  const currency1 = unwrappedToken(token1)\n\n  // this is just getLiquidityValue with the fee off, but for the passed pair\n  const token0Value = useMemo(\n    () =>\n      CurrencyAmount.fromRawAmount(\n        token0,\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve0.quotient), totalSupply.quotient)\n      ),\n    [token0, pairBalance, reserve0, totalSupply]\n  )\n  const token1Value = useMemo(\n    () =>\n      CurrencyAmount.fromRawAmount(\n        token1,\n        JSBI.divide(JSBI.multiply(pairBalance.quotient, reserve1.quotient), totalSupply.quotient)\n      ),\n    [token1, pairBalance, reserve1, totalSupply]\n  )\n\n  // set up v3 pool\n  const [feeAmount, setFeeAmount] = useState(FeeAmount.MEDIUM)\n  const [poolState, pool] = usePool(token0, token1, feeAmount)\n  const noLiquidity = poolState === PoolState.NOT_EXISTS\n\n  // get spot prices + price difference\n  const v2SpotPrice = useMemo(\n    () => new Price(token0, token1, reserve0.quotient, reserve1.quotient),\n    [token0, token1, reserve0, reserve1]\n  )\n  const v3SpotPrice = poolState === PoolState.EXISTS ? pool?.token0Price : undefined\n\n  let priceDifferenceFraction: Fraction | undefined =\n    v2SpotPrice && v3SpotPrice ? v3SpotPrice.divide(v2SpotPrice).subtract(1).multiply(100) : undefined\n  if (priceDifferenceFraction?.lessThan(ZERO)) {\n    priceDifferenceFraction = priceDifferenceFraction.multiply(-1)\n  }\n\n  const largePriceDifference = priceDifferenceFraction && !priceDifferenceFraction?.lessThan(JSBI.BigInt(2))\n\n  // the following is a small hack to get access to price range data/input handlers\n  const [baseToken, setBaseToken] = useState(token0)\n  const { ticks, pricesAtTicks, invertPrice, invalidRange, outOfRange, ticksAtLimit } = useV3DerivedMintInfo(\n    token0,\n    token1,\n    feeAmount,\n    baseToken\n  )\n\n  // get value and prices at ticks\n  const { [Bound.LOWER]: tickLower, [Bound.UPPER]: tickUpper } = ticks\n  const { [Bound.LOWER]: priceLower, [Bound.UPPER]: priceUpper } = pricesAtTicks\n\n  const { getDecrementLower, getIncrementLower, getDecrementUpper, getIncrementUpper } = useRangeHopCallbacks(\n    baseToken,\n    baseToken.equals(token0) ? token1 : token0,\n    feeAmount,\n    tickLower,\n    tickUpper\n  )\n\n  const { onLeftRangeInput, onRightRangeInput } = useV3MintActionHandlers(noLiquidity)\n\n  // the v3 tick is either the pool's tickCurrent, or the tick closest to the v2 spot price\n  const tick = pool?.tickCurrent ?? priceToClosestTick(v2SpotPrice)\n  // the price is either the current v3 price, or the price at the tick\n  const sqrtPrice = pool?.sqrtRatioX96 ?? TickMath.getSqrtRatioAtTick(tick)\n  const position =\n    typeof tickLower === 'number' && typeof tickUpper === 'number' && !invalidRange\n      ? Position.fromAmounts({\n          pool: pool ?? new Pool(token0, token1, feeAmount, sqrtPrice, 0, tick, []),\n          tickLower,\n          tickUpper,\n          amount0: token0Value.quotient,\n          amount1: token1Value.quotient,\n          useFullPrecision: true, // we want full precision for the theoretical position\n        })\n      : undefined\n\n  const { amount0: v3Amount0Min, amount1: v3Amount1Min } = useMemo(\n    () => (position ? position.mintAmountsWithSlippage(allowedSlippage) : { amount0: undefined, amount1: undefined }),\n    [position, allowedSlippage]\n  )\n\n  const refund0 = useMemo(\n    () =>\n      position && CurrencyAmount.fromRawAmount(token0, JSBI.subtract(token0Value.quotient, position.amount0.quotient)),\n    [token0Value, position, token0]\n  )\n  const refund1 = useMemo(\n    () =>\n      position && CurrencyAmount.fromRawAmount(token1, JSBI.subtract(token1Value.quotient, position.amount1.quotient)),\n    [token1Value, position, token1]\n  )\n\n  const [confirmingMigration, setConfirmingMigration] = useState<boolean>(false)\n  const [pendingMigrationHash, setPendingMigrationHash] = useState<string | null>(null)\n\n  const migrator = useV2MigratorContract()\n\n  // approvals\n  const [approval, approveManually] = useApproveCallback(pairBalance, migrator?.address)\n  const { signatureData, gatherPermitSignature } = useV2LiquidityTokenPermit(pairBalance, migrator?.address)\n\n  const isArgentWallet = useIsArgentWallet()\n\n  const approve = useCallback(async () => {\n    if (isNotUniswap || isArgentWallet) {\n      // sushi has to be manually approved\n      await approveManually()\n    } else if (gatherPermitSignature) {\n      try {\n        await gatherPermitSignature()\n      } catch (error) {\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n        if (error?.code !== 4001) {\n          await approveManually()\n        }\n      }\n    } else {\n      await approveManually()\n    }\n  }, [isNotUniswap, isArgentWallet, gatherPermitSignature, approveManually])\n\n  const addTransaction = useTransactionAdder()\n  const isMigrationPending = useIsTransactionPending(pendingMigrationHash ?? undefined)\n\n  const networkSupportsV2 = useNetworkSupportsV2()\n\n  const migrate = useCallback(() => {\n    if (\n      !migrator ||\n      !account ||\n      !deadline ||\n      !blockTimestamp ||\n      typeof tickLower !== 'number' ||\n      typeof tickUpper !== 'number' ||\n      !v3Amount0Min ||\n      !v3Amount1Min ||\n      !chainId ||\n      !networkSupportsV2\n    )\n      return\n\n    const deadlineToUse = signatureData?.deadline ?? deadline\n\n    const data: string[] = []\n\n    // permit if necessary\n    if (signatureData) {\n      data.push(\n        migrator.interface.encodeFunctionData('selfPermit', [\n          pair.address,\n          `0x${pairBalance.quotient.toString(16)}`,\n          deadlineToUse,\n          signatureData.v,\n          signatureData.r,\n          signatureData.s,\n        ])\n      )\n    }\n\n    // create/initialize pool if necessary\n    if (noLiquidity) {\n      data.push(\n        migrator.interface.encodeFunctionData('createAndInitializePoolIfNecessary', [\n          token0.address,\n          token1.address,\n          feeAmount,\n          `0x${sqrtPrice.toString(16)}`,\n        ])\n      )\n    }\n\n    // TODO could save gas by not doing this in multicall\n    data.push(\n      migrator.interface.encodeFunctionData('migrate', [\n        {\n          pair: pair.address,\n          liquidityToMigrate: `0x${pairBalance.quotient.toString(16)}`,\n          percentageToMigrate,\n          token0: token0.address,\n          token1: token1.address,\n          fee: feeAmount,\n          tickLower,\n          tickUpper,\n          amount0Min: `0x${v3Amount0Min.toString(16)}`,\n          amount1Min: `0x${v3Amount1Min.toString(16)}`,\n          recipient: account,\n          deadline: deadlineToUse,\n          refundAsETH: true, // hard-code this for now\n        },\n      ])\n    )\n\n    setConfirmingMigration(true)\n\n    migrator.estimateGas\n      .multicall(data)\n      .then((gasEstimate) => {\n        return migrator\n          .multicall(data, { gasLimit: calculateGasMargin(gasEstimate) })\n          .then((response: TransactionResponse) => {\n            sendAnalyticsEvent(LiquidityEventName.MIGRATE_LIQUIDITY_SUBMITTED, {\n              action: `${isNotUniswap ? LiquiditySource.SUSHISWAP : LiquiditySource.V2}->${LiquiditySource.V3}`,\n              label: `${currency0.symbol}/${currency1.symbol}`,\n              ...trace,\n            })\n\n            addTransaction(response, {\n              type: TransactionType.MIGRATE_LIQUIDITY_V3,\n              baseCurrencyId: currencyId(currency0),\n              quoteCurrencyId: currencyId(currency1),\n              isFork: isNotUniswap,\n            })\n            setPendingMigrationHash(response.hash)\n          })\n      })\n      .catch(() => {\n        setConfirmingMigration(false)\n      })\n  }, [\n    migrator,\n    account,\n    deadline,\n    blockTimestamp,\n    tickLower,\n    tickUpper,\n    v3Amount0Min,\n    v3Amount1Min,\n    chainId,\n    networkSupportsV2,\n    signatureData,\n    noLiquidity,\n    pair.address,\n    pairBalance.quotient,\n    token0.address,\n    token1.address,\n    feeAmount,\n    sqrtPrice,\n    isNotUniswap,\n    currency0,\n    currency1,\n    trace,\n    addTransaction,\n  ])\n\n  const isSuccessfullyMigrated = !!pendingMigrationHash && JSBI.equal(pairBalance.quotient, ZERO)\n\n  if (!networkSupportsV2) return <V2Unsupported />\n\n  return (\n    <AutoColumn gap=\"20px\">\n      <ThemedText.DeprecatedBody my={9} style={{ fontWeight: 485 }}>\n        <Trans>\n          This tool will safely migrate your {isNotUniswap ? 'SushiSwap' : 'V2'} liquidity to V3. The process is\n          completely trustless thanks to the{' '}\n        </Trans>\n        {chainId && migrator && (\n          <ExternalLink href={getExplorerLink(chainId, migrator.address, ExplorerDataType.ADDRESS)}>\n            <ThemedText.DeprecatedBlue display=\"inline\">\n              <Trans>Goblins migration contract</Trans> ↗\n            </ThemedText.DeprecatedBlue>\n          </ExternalLink>\n        )}\n        .\n      </ThemedText.DeprecatedBody>\n\n      <LightCard>\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed style={{ marginLeft: '8px' }}>\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\n                <Trans>\n                  {currency0.symbol}/{currency1.symbol} LP Tokens\n                </Trans>\n              </ThemedText.DeprecatedMediumHeader>\n            </RowFixed>\n            <Badge variant={BadgeVariant.WARNING}>{isNotUniswap ? 'Sushi' : 'V2'}</Badge>\n          </RowBetween>\n          <LiquidityInfo token0Amount={token0Value} token1Amount={token1Value} />\n        </AutoColumn>\n      </LightCard>\n\n      <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <ArrowDown size={24} />\n      </div>\n\n      <LightCard>\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed style={{ marginLeft: '8px' }}>\n              <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin={false} size={20} />\n              <ThemedText.DeprecatedMediumHeader style={{ marginLeft: '8px' }}>\n                <Trans>\n                  {currency0.symbol}/{currency1.symbol} LP NFT\n                </Trans>\n              </ThemedText.DeprecatedMediumHeader>\n            </RowFixed>\n            <Badge variant={BadgeVariant.PRIMARY}>V3</Badge>\n          </RowBetween>\n\n          <FeeSelector feeAmount={feeAmount} handleFeePoolSelect={setFeeAmount} />\n          {noLiquidity && (\n            <BlueCard style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <AlertCircle color={theme.neutral1} style={{ marginBottom: '12px', opacity: 0.8 }} />\n              <ThemedText.DeprecatedBody\n                fontSize={14}\n                style={{ marginBottom: 8, fontWeight: 535, opacity: 0.8 }}\n                textAlign=\"center\"\n              >\n                <Trans>\n                  You are the first liquidity provider for this Goblins V3 pool. Your liquidity will migrate at the\n                  current {isNotUniswap ? 'SushiSwap' : 'V2'} price.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n\n              <ThemedText.DeprecatedBody\n                fontWeight={535}\n                textAlign=\"center\"\n                fontSize={14}\n                style={{ marginTop: '8px', opacity: 0.8 }}\n              >\n                <Trans>Your transaction cost will be much higher as it includes the gas to create the pool.</Trans>\n              </ThemedText.DeprecatedBody>\n\n              {v2SpotPrice && (\n                <AutoColumn gap=\"sm\" style={{ marginTop: '12px' }}>\n                  <RowBetween>\n                    <ThemedText.DeprecatedBody fontWeight={535} fontSize={14}>\n                      <Trans>\n                        {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\n                      </Trans>{' '}\n                      {invertPrice\n                        ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                        : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                    </ThemedText.DeprecatedBody>\n                  </RowBetween>\n                </AutoColumn>\n              )}\n            </BlueCard>\n          )}\n\n          {largePriceDifference ? (\n            <YellowCard>\n              <AutoColumn gap=\"sm\">\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14}>\n                    <Trans>\n                      {isNotUniswap ? 'SushiSwap' : 'V2'} {invertPrice ? currency1.symbol : currency0.symbol} Price:\n                    </Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14}>\n                    {invertPrice\n                      ? `${v2SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                      : `${v2SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14}>\n                    <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14}>\n                    {invertPrice\n                      ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                      : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n\n                <RowBetween>\n                  <ThemedText.DeprecatedBody fontSize={14} color=\"inherit\">\n                    <Trans>Price difference:</Trans>\n                  </ThemedText.DeprecatedBody>\n                  <ThemedText.DeprecatedBlack fontSize={14} color=\"inherit\">\n                    <Trans>{priceDifferenceFraction?.toSignificant(4)}%</Trans>\n                  </ThemedText.DeprecatedBlack>\n                </RowBetween>\n              </AutoColumn>\n              <ThemedText.DeprecatedBody fontSize={14} style={{ marginTop: 8, fontWeight: 485 }}>\n                <Trans>\n                  You should only deposit liquidity into Goblins V3 at a price you believe is correct. <br />\n                  If the price seems incorrect, you can either make a swap to move the price or wait for someone else to\n                  do so.\n                </Trans>\n              </ThemedText.DeprecatedBody>\n            </YellowCard>\n          ) : !noLiquidity && v3SpotPrice ? (\n            <RowBetween>\n              <ThemedText.DeprecatedBody fontSize={14}>\n                <Trans>V3 {invertPrice ? currency1.symbol : currency0.symbol} Price:</Trans>\n              </ThemedText.DeprecatedBody>\n              <ThemedText.DeprecatedBlack fontSize={14}>\n                {invertPrice\n                  ? `${v3SpotPrice?.invert()?.toSignificant(6)} ${currency0.symbol}`\n                  : `${v3SpotPrice?.toSignificant(6)} ${currency1.symbol}`}\n              </ThemedText.DeprecatedBlack>\n            </RowBetween>\n          ) : null}\n\n          <RowBetween>\n            <ThemedText.DeprecatedLabel>\n              <Trans>Set price range</Trans>\n            </ThemedText.DeprecatedLabel>\n            <RateToggle\n              currencyA={invertPrice ? currency1 : currency0}\n              currencyB={invertPrice ? currency0 : currency1}\n              handleRateToggle={() => {\n                onLeftRangeInput('')\n                onRightRangeInput('')\n                setBaseToken((base) => (base.equals(token0) ? token1 : token0))\n              }}\n            />\n          </RowBetween>\n\n          <RangeSelector\n            priceLower={priceLower}\n            priceUpper={priceUpper}\n            getDecrementLower={getDecrementLower}\n            getIncrementLower={getIncrementLower}\n            getDecrementUpper={getDecrementUpper}\n            getIncrementUpper={getIncrementUpper}\n            onLeftRangeInput={onLeftRangeInput}\n            onRightRangeInput={onRightRangeInput}\n            currencyA={invertPrice ? currency1 : currency0}\n            currencyB={invertPrice ? currency0 : currency1}\n            feeAmount={feeAmount}\n            ticksAtLimit={ticksAtLimit}\n          />\n\n          {outOfRange ? (\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n              <RowBetween>\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                  <Trans>\n                    Your position will not earn fees or be used in trades until the market price moves into your range.\n                  </Trans>\n                </ThemedText.DeprecatedYellow>\n              </RowBetween>\n            </YellowCard>\n          ) : null}\n\n          {invalidRange ? (\n            <YellowCard padding=\"8px 12px\" $borderRadius=\"12px\">\n              <RowBetween>\n                <AlertTriangle stroke={theme.deprecated_yellow3} size=\"16px\" />\n                <ThemedText.DeprecatedYellow ml=\"12px\" fontSize=\"12px\">\n                  <Trans>Invalid range selected. The min price must be lower than the max price.</Trans>\n                </ThemedText.DeprecatedYellow>\n              </RowBetween>\n            </YellowCard>\n          ) : null}\n\n          {position ? (\n            <DarkGrayCard>\n              <AutoColumn gap=\"md\">\n                <LiquidityInfo token0Amount={position.amount0} token1Amount={position.amount1} />\n                {chainId && refund0 && refund1 ? (\n                  <ThemedText.DeprecatedBlack fontSize={12}>\n                    <Trans>\n                      At least {formatCurrencyAmount(refund0, 4)}{' '}\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token0) ? 'ETH' : token0.symbol} and{' '}\n                      {formatCurrencyAmount(refund1, 4)}{' '}\n                      {chainId && WRAPPED_NATIVE_CURRENCY[chainId]?.equals(token1) ? 'ETH' : token1.symbol} will be\n                      refunded to your wallet due to selected price range.\n                    </Trans>\n                  </ThemedText.DeprecatedBlack>\n                ) : null}\n              </AutoColumn>\n            </DarkGrayCard>\n          ) : null}\n\n          <AutoColumn gap=\"md\">\n            {!isSuccessfullyMigrated && !isMigrationPending ? (\n              <AutoColumn gap=\"md\" style={{ flex: '1' }}>\n                <ButtonConfirmed\n                  confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n                  disabled={\n                    approval !== ApprovalState.NOT_APPROVED ||\n                    signatureData !== null ||\n                    !v3Amount0Min ||\n                    !v3Amount1Min ||\n                    invalidRange ||\n                    confirmingMigration\n                  }\n                  onClick={approve}\n                >\n                  {approval === ApprovalState.PENDING ? (\n                    <Dots>\n                      <Trans>Approving</Trans>\n                    </Dots>\n                  ) : approval === ApprovalState.APPROVED || signatureData !== null ? (\n                    <Trans>Allowed</Trans>\n                  ) : (\n                    <Trans>Allow LP token migration</Trans>\n                  )}\n                </ButtonConfirmed>\n              </AutoColumn>\n            ) : null}\n            <AutoColumn gap=\"md\" style={{ flex: '1' }}>\n              <ButtonConfirmed\n                confirmed={isSuccessfullyMigrated}\n                disabled={\n                  !v3Amount0Min ||\n                  !v3Amount1Min ||\n                  invalidRange ||\n                  (approval !== ApprovalState.APPROVED && signatureData === null) ||\n                  confirmingMigration ||\n                  isMigrationPending ||\n                  isSuccessfullyMigrated\n                }\n                onClick={migrate}\n              >\n                {isSuccessfullyMigrated ? (\n                  'Success!'\n                ) : isMigrationPending ? (\n                  <Dots>\n                    <Trans>Migrating</Trans>\n                  </Dots>\n                ) : (\n                  <Trans>Migrate</Trans>\n                )}\n              </ButtonConfirmed>\n            </AutoColumn>\n          </AutoColumn>\n        </AutoColumn>\n      </LightCard>\n    </AutoColumn>\n  )\n}\n\nexport default function MigrateV2Pair() {\n  const { address } = useParams<{ address: string }>()\n  // reset mint state on component mount, and as a cleanup (on unmount)\n  const dispatch = useAppDispatch()\n  useEffect(() => {\n    dispatch(resetMintState())\n    return () => {\n      dispatch(resetMintState())\n    }\n  }, [dispatch])\n\n  const { chainId, account } = useWeb3React()\n\n  // get pair contract\n  const validatedAddress = isAddress(address)\n  const pair = usePairContract(validatedAddress ? validatedAddress : undefined)\n\n  // get token addresses from pair contract\n  const token0AddressCallState = useSingleCallResult(pair, 'token0', undefined, NEVER_RELOAD)\n  const token0Address = token0AddressCallState?.result?.[0]\n  const token1Address = useSingleCallResult(pair, 'token1', undefined, NEVER_RELOAD)?.result?.[0]\n\n  // get tokens\n  const token0 = useToken(token0Address)\n  const token1 = useToken(token1Address)\n\n  // get liquidity token balance\n  const liquidityToken: Token | undefined = useMemo(\n    () => (chainId && validatedAddress ? new Token(chainId, validatedAddress, 18) : undefined),\n    [chainId, validatedAddress]\n  )\n\n  // get data required for V2 pair migration\n  const pairBalance = useTokenBalance(account ?? undefined, liquidityToken)\n  const totalSupply = useTotalSupply(liquidityToken)\n  const [reserve0Raw, reserve1Raw] = useSingleCallResult(pair, 'getReserves')?.result ?? []\n  const reserve0 = useMemo(\n    () => (token0 && reserve0Raw ? CurrencyAmount.fromRawAmount(token0, reserve0Raw) : undefined),\n    [token0, reserve0Raw]\n  )\n  const reserve1 = useMemo(\n    () => (token1 && reserve1Raw ? CurrencyAmount.fromRawAmount(token1, reserve1Raw) : undefined),\n    [token1, reserve1Raw]\n  )\n\n  // redirect for invalid url params\n  if (\n    !validatedAddress ||\n    !pair ||\n    (pair &&\n      token0AddressCallState?.valid &&\n      !token0AddressCallState?.loading &&\n      !token0AddressCallState?.error &&\n      !token0Address)\n  ) {\n    console.error('Invalid pair address')\n    return <Navigate to=\"/migrate/v2\" replace />\n  }\n\n  return (\n    <BodyWrapper style={{ padding: 24 }}>\n      <AutoColumn gap=\"16px\">\n        <AutoRow style={{ alignItems: 'center', justifyContent: 'space-between' }} gap=\"8px\">\n          <BackArrowLink to=\"/migrate/v2\" />\n          <MigrateHeader>\n            <Trans>Migrate V2 liquidity</Trans>\n          </MigrateHeader>\n          <SettingsTab autoSlippage={DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE} chainId={chainId} hideRoutingSettings />\n        </AutoRow>\n\n        {!account ? (\n          <ThemedText.DeprecatedLargeHeader>\n            <Trans>You must connect an account.</Trans>\n          </ThemedText.DeprecatedLargeHeader>\n        ) : pairBalance && totalSupply && reserve0 && reserve1 && token0 && token1 ? (\n          <V2PairMigration\n            pair={pair}\n            pairBalance={pairBalance}\n            totalSupply={totalSupply}\n            reserve0={reserve0}\n            reserve1={reserve1}\n            token0={token0}\n            token1={token1}\n          />\n        ) : (\n          <EmptyState message={<Trans>Loading</Trans>} />\n        )}\n      </AutoColumn>\n    </BodyWrapper>\n  )\n}\n","import { Currency, CurrencyAmount, Price } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales'\n\ninterface FormatLocaleNumberArgs {\n  number: CurrencyAmount<Currency> | Price<Currency, Currency> | number\n  locale?: string | null\n  options?: Intl.NumberFormatOptions\n  sigFigs?: number\n  fixedDecimals?: number\n}\n\nexport default function formatLocaleNumber({\n  number,\n  locale,\n  sigFigs,\n  fixedDecimals,\n  options = {},\n}: FormatLocaleNumberArgs): string {\n  let localeArg: string | string[]\n  if (!locale || (locale && !SUPPORTED_LOCALES.includes(locale))) {\n    localeArg = DEFAULT_LOCALE\n  } else {\n    localeArg = [locale, DEFAULT_LOCALE]\n  }\n  options.minimumFractionDigits = options.minimumFractionDigits || fixedDecimals\n  options.maximumFractionDigits = options.maximumFractionDigits || fixedDecimals\n\n  // Fixed decimals should override significant figures.\n  options.maximumSignificantDigits = options.maximumSignificantDigits || fixedDecimals ? undefined : sigFigs\n\n  let numberString: number\n  if (typeof number === 'number') {\n    numberString = fixedDecimals ? parseFloat(number.toFixed(fixedDecimals)) : number\n  } else {\n    const baseString = parseFloat(number.toSignificant(sigFigs))\n    numberString = fixedDecimals ? parseFloat(baseString.toFixed(fixedDecimals)) : baseString\n  }\n\n  return numberString.toLocaleString(localeArg, options)\n}\n","import { Currency, CurrencyAmount, Fraction } from '@uniswap/sdk-core'\nimport { DEFAULT_LOCALE, SupportedLocale } from 'constants/locales'\nimport JSBI from 'jsbi'\nimport formatLocaleNumber from 'lib/utils/formatLocaleNumber'\n\nexport function formatCurrencyAmount(\n  amount: CurrencyAmount<Currency> | undefined,\n  sigFigs: number,\n  locale: SupportedLocale = DEFAULT_LOCALE,\n  fixedDecimals?: number\n): string {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return `<${formatLocaleNumber({ number: 0.00001, locale })}`\n  }\n\n  return formatLocaleNumber({ number: amount, locale, sigFigs, fixedDecimals })\n}\n"],"names":["CURRENCY_AMOUNT_MIN","Fraction","JSBI","FormattedCurrencyAmount","currencyAmount","significantDigits","equalTo","greaterThan","toSignificant","ToggleWrapper","styled","button","width","theme","surface2","surface3","ToggleElement","span","isActive","surface1","neutral1","neutral3","fontSize","neutral2","RateToggle","currencyA","currencyB","handleRateToggle","tokenA","wrapped","tokenB","isSorted","sortsBefore","div","style","display","alignItems","onClick","symbol","POOL_STATE_INTERFACE","Interface","IUniswapV3PoolStateJSON","getPoolAddress","factoryAddress","fee","this","addresses","length","MAX_ENTRIES","slice","address","addressA","addressB","key","toString","found","find","computePoolAddress","unshift","getPool","sqrtPriceX96","liquidity","tick","pools","pool","token0","token1","sqrtRatioX96","tickCurrent","Pool","usePools","poolKeys","chainId","useWeb3React","poolTokens","useMemo","map","feeAmount","equals","Array","poolAddresses","v3CoreFactoryAddress","V3_CORE_FACTORY_ADDRESSES","value","PoolCache","slot0s","useMultipleContractSingleData","liquidities","_key","index","tokens","PoolState","INVALID","result","slot0","loading","slot0Loading","valid","slot0Valid","liquidityLoading","liquidityValid","LOADING","NOT_EXISTS","eq","EXISTS","error","console","usePool","PermitType","AMOUNT","ALLOWED","PERMIT_VALIDITY_BUFFER","PERMITTABLE_TOKENS","ChainId","MAINNET","USDC_MAINNET","type","name","version","DAI","UNI","GOERLI","SEPOLIA","UseERC20PermitState","NOT_APPLICABLE","NOT_SIGNED","SIGNED","EIP712_DOMAIN_TYPE","EIP712_DOMAIN_TYPE_NO_VERSION","EIP2612_TYPE","PERMIT_ALLOWED_TYPE","REMOVE_V2_LIQUIDITY_PERMIT_INFO","useV2LiquidityTokenPermit","liquidityAmount","spender","transactionDeadline","overridePermitInfo","account","provider","tokenAddress","currency","isToken","undefined","eip2612Contract","useEIP2612Contract","isArgentWallet","useIsArgentWallet","nonceInputs","tokenNonceState","useSingleCallResult","permitInfo","signatureData","setSignatureData","useState","state","gatherPermitSignature","nonceNumber","toNumber","isSignatureDataValid","owner","deadline","nonce","amount","quotient","async","allowed","signatureDeadline","message","holder","expiry","domain","verifyingContract","data","JSON","stringify","types","EIP712Domain","Permit","primaryType","send","then","splitSignature","signature","v","r","s","permitType","useERC20Permit","useTransactionDeadline","ZERO","DEFAULT_MIGRATE_SLIPPAGE_TOLERANCE","Percent","EmptyState","AutoColumn","minHeight","justifyContent","ThemedText","DeprecatedBody","LiquidityInfo","token0Amount","token1Amount","currency0","unwrappedToken","currency1","gap","RowBetween","RowFixed","CurrencyLogo","size","marginRight","Text","fontWeight","percentageToMigrate","V2PairMigration","pair","pairBalance","totalSupply","reserve0","reserve1","useTheme","v2FactoryAddress","V2_FACTORY_ADDRESSES","trace","useTrace","pairFactory","isNotUniswap","blockTimestamp","useCurrentBlockTimestamp","allowedSlippage","useUserSlippageToleranceWithDefault","token0Value","CurrencyAmount","fromRawAmount","token1Value","setFeeAmount","FeeAmount","MEDIUM","poolState","noLiquidity","v2SpotPrice","Price","v3SpotPrice","token0Price","priceDifferenceFraction","divide","subtract","multiply","lessThan","largePriceDifference","baseToken","setBaseToken","ticks","pricesAtTicks","invertPrice","invalidRange","outOfRange","ticksAtLimit","useV3DerivedMintInfo","Bound","LOWER","tickLower","UPPER","tickUpper","priceLower","priceUpper","getDecrementLower","getIncrementLower","getDecrementUpper","getIncrementUpper","useRangeHopCallbacks","onLeftRangeInput","onRightRangeInput","useV3MintActionHandlers","priceToClosestTick","sqrtPrice","TickMath","getSqrtRatioAtTick","position","Position","fromAmounts","amount0","amount1","useFullPrecision","v3Amount0Min","v3Amount1Min","mintAmountsWithSlippage","refund0","refund1","confirmingMigration","setConfirmingMigration","pendingMigrationHash","setPendingMigrationHash","migrator","useV2MigratorContract","approval","approveManually","useApproveCallback","approve","useCallback","code","addTransaction","useTransactionAdder","isMigrationPending","useIsTransactionPending","networkSupportsV2","useNetworkSupportsV2","migrate","deadlineToUse","push","interface","encodeFunctionData","liquidityToMigrate","amount0Min","amount1Min","recipient","refundAsETH","estimateGas","multicall","gasEstimate","gasLimit","calculateGasMargin","response","sendAnalyticsEvent","LiquidityEventName","MIGRATE_LIQUIDITY_SUBMITTED","action","LiquiditySource","SUSHISWAP","V2","V3","label","TransactionType","MIGRATE_LIQUIDITY_V3","baseCurrencyId","currencyId","quoteCurrencyId","isFork","hash","catch","isSuccessfullyMigrated","my","ExternalLink","href","getExplorerLink","ExplorerDataType","ADDRESS","DeprecatedBlue","LightCard","marginLeft","DoubleCurrencyLogo","margin","DeprecatedMediumHeader","Badge","variant","BadgeVariant","WARNING","ArrowDown","PRIMARY","FeeSelector","handleFeePoolSelect","BlueCard","flexDirection","AlertCircle","color","marginBottom","opacity","textAlign","marginTop","invert","YellowCard","DeprecatedBlack","br","DeprecatedLabel","base","RangeSelector","padding","$borderRadius","AlertTriangle","stroke","deprecated_yellow3","DeprecatedYellow","ml","DarkGrayCard","formatCurrencyAmount","WRAPPED_NATIVE_CURRENCY","flex","ButtonConfirmed","confirmed","ApprovalState","APPROVED","disabled","NOT_APPROVED","PENDING","Dots","V2Unsupported","MigrateV2Pair","useParams","dispatch","useAppDispatch","useEffect","resetMintState","validatedAddress","isAddress","usePairContract","token0AddressCallState","NEVER_RELOAD","token0Address","token1Address","useToken","liquidityToken","Token","useTokenBalance","useTotalSupply","reserve0Raw","reserve1Raw","BodyWrapper","AutoRow","BackArrowLink","to","MigrateHeader","SettingsTab","autoSlippage","hideRoutingSettings","DeprecatedLargeHeader","Navigate","replace","formatLocaleNumber","number","locale","sigFigs","fixedDecimals","options","localeArg","numberString","SUPPORTED_LOCALES","includes","DEFAULT_LOCALE","minimumFractionDigits","maximumFractionDigits","maximumSignificantDigits","parseFloat","toFixed","baseString","toLocaleString","decimalScale"],"sourceRoot":""}