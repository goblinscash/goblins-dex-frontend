{"version":3,"file":"static/js/1632.489be9e7.chunk.js","mappings":"qSAYA,MAAMA,EAAU,IAAIC,IACb,SAASC,EAAUC,GACxB,MAAMC,EAASJ,EAAQK,IAAIF,GAC3B,GAAIC,EAAQ,OAAOA,EAEnB,MAAME,GAAmBC,EAAAA,EAAAA,IAAiBJ,GAC1C,GAAIG,EAAkB,CACpB,MAAME,EAAWC,EAAAA,EAAyBH,GACpCF,EAAS,IAAIM,EAAAA,IAAY,CAAEP,UAASK,aAE1C,OADAR,EAAQW,IAAIR,EAASC,GACdA,CACT,CAEA,MAAM,IAAIQ,MAAM,gDAAgDT,MAClE,CAEAU,eAAeC,GACb,UACEC,EAAS,QACTC,EAAO,SACPC,EACAC,OAAQC,GAOVf,EACAgB,GAEA,MAAMC,EAAkBC,OAAOC,OAAOC,EAAAA,IAAwBC,SAAST,EAAQU,SACzEC,EAAmBL,OAAOC,OAAOC,EAAAA,IAAwBC,SAASR,EAASS,SAE3EE,EAAaP,GACfQ,EAAAA,EAAAA,IAAcb,EAAQb,SACtB,IAAI2B,EAAAA,MAAMd,EAAQb,QAASa,EAAQU,QAASV,EAAQe,SAAUf,EAAQgB,QACpEC,EAAcN,GAChBE,EAAAA,EAAAA,IAAcZ,EAASd,SACvB,IAAI2B,EAAAA,MAAMb,EAASd,QAASc,EAASS,QAAST,EAASc,SAAUd,EAASe,QAExEE,EAAenB,IAAcoB,EAAAA,UAAUC,YAAcR,EAAaK,EAClEI,EAAgBtB,IAAcoB,EAAAA,UAAUC,YAAcH,EAAcL,EAE5EU,QAAQC,IAAIC,EAAAA,IAASC,iBAAkB,kCAErC,MAAMvB,EAASwB,EAAAA,eAAeC,cAAcT,EAAcU,IAAAA,OAAYzB,IAEhE0B,QAAkBzC,EAAO0C,MAAM5B,EAAQmB,EAAetB,EAAW,CAAEgC,IAAK,CAAEA,IAAK,IAAIC,EAAAA,QAAQ,GAAI,KAASC,UAAWC,EAAAA,EAAoBlC,EAAQb,UAAYgD,kBAAmB,IAAIH,EAAAA,QAAQ,GAAI,KAAMI,KAAMZ,EAAAA,IAASC,kBAAoBrB,GAI7O,OAFAkB,QAAQC,IAAIM,EAAW,sBAElBA,ECrDA,SACL9B,EACAG,GACA,MACEmC,EAAK,iBACLC,EAAgB,MAChBR,EAAK,iBACLS,EAAgB,2BAChBC,EAA0B,oBAC1BC,EAAmB,YACnBC,EAAW,iBACXC,EAAgB,YAChBC,GAEFzD,GAEA,MAAM0D,EAA0D,GAChE,IAAIC,EAAkB,KAEtB,IAAK,MAAMC,KAAYjB,EAAO,CAC5B,MAAM,OAAE5B,EAAM,MAAEmC,EAAK,UAAEW,GAAcD,EAE/BE,EAAQF,EAASG,WAAaC,EAAAA,SAASC,GAAKL,EAASjB,MAAMuB,MAAQN,EAASjB,MAAMmB,MAGlFK,EAA8C,GACpD,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAMO,OAAQD,IAAK,CACrC,MAAME,EAAWR,EAAMM,GACjBvD,EAAUgD,EAAUO,GACpBtD,EAAW+C,EAAUO,EAAI,GAE/B,IAAIG,EAKAC,EAKJ,GATU,IAANJ,IACFG,EAAe3D,IAAcoB,EAAAA,UAAUC,YAAclB,EAAO0D,SAASC,WAAaxB,EAAMuB,SAASC,YAI/FN,IAAMN,EAAMO,OAAS,IACvBG,EAAgB5D,IAAcoB,EAAAA,UAAUC,YAAciB,EAAMuB,SAASC,WAAa3D,EAAO0D,SAASC,YAGhGJ,aAAoBK,EAAAA,KACtBR,EAASS,KAAK,CACZ3B,KAAM,UACNpC,QAAS,CACPb,QAASa,EAAQb,QACjB4B,SAAUf,EAAQe,SAClBL,QAASV,EAAQU,QACjBM,OAAQhB,EAAQgB,QAElBf,SAAU,CACRd,QAASc,EAASd,QAClB4B,SAAUd,EAASc,SACnBL,QAAST,EAASS,QAClBM,OAAQf,EAASe,QAEnBe,IAAK0B,EAAS1B,IAAI8B,WAClBG,UAAWP,EAASO,UAAUH,WAC9BI,aAAcR,EAASQ,aAAaJ,WACpCK,YAAaT,EAASS,YAAYL,WAClCM,SAAUT,EACVU,UAAWT,IAGbb,EAAaW,EAAS1B,IAAI8B,eAIrB,CACL,MAAMQ,EAAWZ,EAASY,SACpBC,EAAWb,EAASa,SAE1BhB,EAASS,KAAK,CACZ3B,KAAM,UACNpC,QAAS,CACPb,QAASa,EAAQb,QACjB4B,SAAUf,EAAQe,SAClBL,QAASV,EAAQU,QACjBM,OAAQhB,EAAQgB,QAElBf,SAAU,CACRd,QAASc,EAASd,QAClB4B,SAAUd,EAASc,SACnBL,QAAST,EAASS,QAClBM,OAAQf,EAASe,QAEnBqD,SAAU,CACRE,MAAO,CACLpF,QAASkF,EAASG,SAASC,QAAQtF,QACnC4B,SAAUsD,EAASG,SAASC,QAAQ1D,SACpCL,QAAS2D,EAASG,SAASC,QAAQ/D,QACnCM,OAAQqD,EAASG,SAASC,QAAQzD,QAEpC4C,SAAUS,EAAST,SAASC,YAE9BS,SAAU,CACRC,MAAO,CACLpF,QAASmF,EAASE,SAASC,QAAQtF,QACnC4B,SAAUuD,EAASE,SAASC,QAAQ1D,SACpCL,QAAS4D,EAASE,SAASC,QAAQ/D,QACnCM,OAAQsD,EAASE,SAASC,QAAQzD,QAEpC4C,SAAUU,EAASV,SAASC,YAE9BM,SAAUT,EACVU,UAAWT,GAEf,CACF,CAIAd,EAAckB,KAAKT,EACrB,CAOA,MAAMoB,EAA2B,CAC/B/B,mBACAC,YAAaA,EAAYiB,WACzB3D,OAAQA,EAAO0D,SAASC,WACxBc,eAAgBzE,EAAO0E,UACvBvC,MAAOA,EAAMuB,SAASC,WACtBgB,cAAexC,EAAMuC,UACrBtC,iBAAkBA,EAAiBsB,SAASC,WAC5CiB,yBAA0BxC,EAAiBsC,UAC3CG,oBAAqBvC,EAA2BoB,SAASC,WACzDmB,4BAA6BxC,EAA2BoC,UACxDK,eAAgB1C,EAAiBsB,WACjCqB,kBAAmBzC,EAAoBmC,UACvClC,YAAaA,EAAYmB,WACzB/B,MAAOe,EACPsC,aAAaC,EAAAA,EAAAA,KAAqBtD,GAClCuD,YAAa,GACbC,iBAAkBpD,EAAAA,EAAoB/C,GACtCoG,cAAelD,EAAMmD,SAAS,IAAIxD,EAAAA,QAAQ,GAAI,MAAS4B,SAASC,YAIlE,MAAO,CAAE4B,MAAOC,EAAAA,GAAWC,QAASC,KAAM,CAAEC,QAASC,EAAAA,GAAaC,QAAS1D,MAAOqC,EAAQsB,UAAW,IACvG,CDtFSC,CAAmClG,EAAWG,EAAQ2B,EAAW7B,EAAQb,SAHvE,CAAEsG,MAAOC,EAAAA,GAAWQ,UAI/B,CAEOrG,eAAesG,GACpB,eACEC,EAAc,eACdC,EAAc,gBACdC,EAAe,cACfC,EAAa,gBACbC,EAAe,gBACfC,EAAe,iBACfC,EAAgB,eAChBC,EAAc,OACdzG,EAAM,UACNH,GAEFX,EACAwH,GAEA,OAAO9G,EACL,CACEC,YACAC,QAAS,CACPU,QAAS0F,EACTjH,QAASkH,EACTtF,SAAUuF,EACVtF,OAAQuF,GAEVtG,SAAU,CACRS,QAAS8F,EACTrH,QAASsH,EACT1F,SAAU2F,EACV1F,OAAQ2F,GAEVzG,UAEFd,EACAwH,EAEJ,C","sources":["lib/hooks/routing/clientSideSmartOrderRouter.ts","utils/transformSwapRouteToGetQuoteResult.ts"],"sourcesContent":["import { BigintIsh, ChainId, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { AlphaRouter, AlphaRouterConfig, SwapType } from '@uniswap/smart-order-router'\nimport { asSupportedChain } from 'constants/chains'\nimport { interFaceFeeAddress } from 'constants/common'\nimport { DEPRECATED_RPC_PROVIDERS } from 'constants/providers'\nimport { nativeOnChain } from 'constants/tokens'\nimport JSBI from 'jsbi'\nimport { GetQuoteArgs, QuoteResult, QuoteState, SwapRouterNativeAssets } from 'state/routing/types'\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\n\nconst routers = new Map<ChainId, AlphaRouter>()\nexport function getRouter(chainId: ChainId): AlphaRouter {\n  const router = routers.get(chainId)\n  if (router) return router\n\n  const supportedChainId = asSupportedChain(chainId)\n  if (supportedChainId) {\n    const provider = DEPRECATED_RPC_PROVIDERS[supportedChainId]\n    const router = new AlphaRouter({ chainId, provider })\n    routers.set(chainId, router)\n    return router\n  }\n\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`)\n}\n\nasync function getQuote(\n  {\n    tradeType,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    tradeType: TradeType\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh\n  },\n  router: AlphaRouter,\n  routerConfig: Partial<AlphaRouterConfig>\n): Promise<QuoteResult> {\n  const tokenInIsNative = Object.values(SwapRouterNativeAssets).includes(tokenIn.address as SwapRouterNativeAssets)\n  const tokenOutIsNative = Object.values(SwapRouterNativeAssets).includes(tokenOut.address as SwapRouterNativeAssets)\n\n  const currencyIn = tokenInIsNative\n    ? nativeOnChain(tokenIn.chainId)\n    : new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = tokenOutIsNative\n    ? nativeOnChain(tokenOut.chainId)\n    : new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = tradeType === TradeType.EXACT_INPUT ? currencyIn : currencyOut;\n  const quoteCurrency = tradeType === TradeType.EXACT_INPUT ? currencyOut : currencyIn;\n// console.log(tokenIn.chainId,interFaceFeeAddress[tokenIn.chainId], \"<====tokenIn.chainId\")\nconsole.log(SwapType.UNIVERSAL_ROUTER, \"<====SwapType.UNIVERSAL_ROUTER\")\n\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\n  // TODO (WEB-2055): explore initializing client side routing on first load (when amountRaw is null) if there are enough users using client-side router preference.\n  const swapRoute = await router.route(amount, quoteCurrency, tradeType, { fee: { fee: new Percent(25, 10_000), recipient: interFaceFeeAddress[tokenIn.chainId] }, slippageTolerance: new Percent(15, 100), type: SwapType.UNIVERSAL_ROUTER }, routerConfig)\n\n  console.log(swapRoute, \"<========swapRoute\")\n\n  if (!swapRoute) {\n    return { state: QuoteState.NOT_FOUND }\n  }\n\n  return transformSwapRouteToGetQuoteResult(tradeType, amount, swapRoute, tokenIn.chainId)\n}\n\nexport async function getClientSideQuote(\n  {\n    tokenInAddress,\n    tokenInChainId,\n    tokenInDecimals,\n    tokenInSymbol,\n    tokenOutAddress,\n    tokenOutChainId,\n    tokenOutDecimals,\n    tokenOutSymbol,\n    amount,\n    tradeType,\n  }: GetQuoteArgs,\n  router: AlphaRouter,\n  config: Partial<AlphaRouterConfig>\n) {\n  return getQuote(\n    {\n      tradeType,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol,\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol,\n      },\n      amount,\n    },\n    router,\n    config\n  )\n}\n","import { Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\n// This file is lazy-loaded, so the import of smart-order-router is intentional.\n// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { routeAmountsToString, SwapRoute } from '@uniswap/smart-order-router'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { interFaceFeeAddress } from 'constants/common'\nimport { QuoteResult, QuoteState, URAQuoteType } from 'state/routing/types'\nimport { ClassicQuoteData, V2PoolInRoute, V3PoolInRoute } from 'state/routing/types'\n\n// from routing-api (https://github.com/Uniswap/routing-api/blob/main/lib/handlers/quote/quote.ts#L243-L311)\nexport function transformSwapRouteToGetQuoteResult(\n  tradeType: TradeType,\n  amount: CurrencyAmount<Currency>,\n  {\n    quote,\n    quoteGasAdjusted,\n    route,\n    estimatedGasUsed,\n    estimatedGasUsedQuoteToken,\n    estimatedGasUsedUSD,\n    gasPriceWei,\n    methodParameters,\n    blockNumber,\n  }: SwapRoute,\n  chainId: number\n): QuoteResult {\n  const routeResponse: Array<(V3PoolInRoute | V2PoolInRoute)[]> = []\n  let getPoolFee: any = null;\n\n  for (const subRoute of route) {\n    const { amount, quote, tokenPath } = subRoute\n\n    const pools = subRoute.protocol === Protocol.V2 ? subRoute.route.pairs : subRoute.route.pools;\n\n\n    const curRoute: (V3PoolInRoute | V2PoolInRoute)[] = []\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i]\n      const tokenIn = tokenPath[i]\n      const tokenOut = tokenPath[i + 1]\n\n      let edgeAmountIn = undefined\n      if (i === 0) {\n        edgeAmountIn = tradeType === TradeType.EXACT_INPUT ? amount.quotient.toString() : quote.quotient.toString()\n      }\n\n      let edgeAmountOut = undefined\n      if (i === pools.length - 1) {\n        edgeAmountOut = tradeType === TradeType.EXACT_INPUT ? quote.quotient.toString() : amount.quotient.toString()\n      }\n\n      if (nextPool instanceof Pool) {\n        curRoute.push({\n          type: 'v3-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          fee: nextPool.fee.toString(),\n          liquidity: nextPool.liquidity.toString(),\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\n          tickCurrent: nextPool.tickCurrent.toString(),\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n\n        getPoolFee = nextPool.fee.toString();\n\n\n\n      } else {\n        const reserve0 = nextPool.reserve0\n        const reserve1 = nextPool.reserve1\n\n        curRoute.push({\n          type: 'v2-pool',\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol,\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol,\n          },\n          reserve0: {\n            token: {\n              chainId: reserve0.currency.wrapped.chainId,\n              decimals: reserve0.currency.wrapped.decimals,\n              address: reserve0.currency.wrapped.address,\n              symbol: reserve0.currency.wrapped.symbol,\n            },\n            quotient: reserve0.quotient.toString(),\n          },\n          reserve1: {\n            token: {\n              chainId: reserve1.currency.wrapped.chainId,\n              decimals: reserve1.currency.wrapped.decimals,\n              address: reserve1.currency.wrapped.address,\n              symbol: reserve1.currency.wrapped.symbol,\n            },\n            quotient: reserve1.quotient.toString(),\n          },\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut,\n        })\n      }\n    }\n\n\n\n    routeResponse.push(curRoute)\n  }\n\n  // console.log(chainId,interFaceFeeAddress, interFaceFeeAddress[chainId], \" interFaceFeeAddress[chainId],\")\n\n\n  // let custm = routeResponse[0] && routeResponse[0][0] && routeResponse[0][0]?.fee ? \n\n  const result: ClassicQuoteData = {\n    methodParameters,\n    blockNumber: blockNumber.toString(),\n    amount: amount.quotient.toString(),\n    amountDecimals: amount.toExact(),\n    quote: quote.quotient.toString(),\n    quoteDecimals: quote.toExact(),\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\n    gasUseEstimate: estimatedGasUsed.toString(),\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\n    gasPriceWei: gasPriceWei.toString(),\n    route: routeResponse,\n    routeString: routeAmountsToString(route),\n    portionBips: 25,\n    portionRecipient: interFaceFeeAddress[chainId],\n    portionAmount: quote.multiply(new Percent(25, 10_000)).quotient.toString(),\n\n  }\n\n  return { state: QuoteState.SUCCESS, data: { routing: URAQuoteType.CLASSIC, quote: result, allQuotes: [] } }\n}\n"],"names":["routers","Map","getRouter","chainId","router","get","supportedChainId","asSupportedChain","provider","DEPRECATED_RPC_PROVIDERS","AlphaRouter","set","Error","async","getQuote","tradeType","tokenIn","tokenOut","amount","amountRaw","routerConfig","tokenInIsNative","Object","values","SwapRouterNativeAssets","includes","address","tokenOutIsNative","currencyIn","nativeOnChain","Token","decimals","symbol","currencyOut","baseCurrency","TradeType","EXACT_INPUT","quoteCurrency","console","log","SwapType","UNIVERSAL_ROUTER","CurrencyAmount","fromRawAmount","JSBI","swapRoute","route","fee","Percent","recipient","interFaceFeeAddress","slippageTolerance","type","quote","quoteGasAdjusted","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","routeResponse","getPoolFee","subRoute","tokenPath","pools","protocol","Protocol","V2","pairs","curRoute","i","length","nextPool","edgeAmountIn","edgeAmountOut","quotient","toString","Pool","push","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","reserve0","reserve1","token","currency","wrapped","result","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","routeString","routeAmountsToString","portionBips","portionRecipient","portionAmount","multiply","state","QuoteState","SUCCESS","data","routing","URAQuoteType","CLASSIC","allQuotes","transformSwapRouteToGetQuoteResult","NOT_FOUND","getClientSideQuote","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","config"],"sourceRoot":""}