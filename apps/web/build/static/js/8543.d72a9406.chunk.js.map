{"version":3,"file":"static/js/8543.d72a9406.chunk.js","mappings":"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","sources":["nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/CollectionTable.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"sourcesContent":["import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollection } from 'graphql/data/nft/Collection'\nimport { UniswapMagentaIcon, VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components/text'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 21px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 1px solid ${({ theme }) => theme.surface3};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 21px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deprecated_deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.surface3} 25%,\n    ${({ theme }) => theme.surface3} 50%,\n    ${({ theme }) => theme.surface3} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline-flex;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n  transform: translateY(-2px) translateX(2px);\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  bottom: 0px;\n  left: 0px;\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 0;\n\n  // overlay workaround for firefox only\n  @supports (-moz-appearance: none) {\n    bottom: -1px;\n  }\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.surface3} 25%,\n    ${({ theme }) => theme.surface3} 50%,\n    ${({ theme }) => theme.surface3} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  const { formatNumberOrString } = useFormatter()\n\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"neutral2\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"neutral2\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString({ input: floorInEth, type: NumberType.NFTTokenFloorPriceTrailingZeros })} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"neutral2\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const { data: gqlCollection, loading } = useCollection(collection.address ?? '')\n  const { formatNumber } = useFormatter()\n\n  if (loading) return <LoadingCarouselCard />\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <UniswapMagentaIcon width=\"20\" height=\"20\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              {collection.floor && (\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                  {formatNumber({ input: collection.floor, type: NumberType.NFTToken })} ETH Floor\n                </ThemedText.SubHeaderSmall>\n              )}\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nconst LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl ?? ''}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color=\"deprecated_accentTextLightPrimary\" fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport { calculateCardIndex } from 'nft/utils'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 22px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px;\n  }\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: ${({ theme }) => theme.maxWidth};\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 535;\n  font-size: 72px;\n  line-height: 88px;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.neutral1};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    line-height: 43px;\n    text-align: center;\n    padding-bottom: 16px;\n\n    br {\n      display: none;\n    }\n  }\n\n  /* Custom breakpoint to split into two lines on smaller screens */\n  @media only screen and (max-width: 550px) {\n    font-size: 28px;\n    line-height: 34px;\n    padding-bottom: 0;\n\n    br {\n      display: unset;\n    }\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n\n  const { data: trendingCollections } = useTrendingCollections(\n    TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n    HistoryDuration.Day\n  )\n\n  const collections = useMemo(() => {\n    return trendingCollections\n      ?.filter((collection) => collection.address && !EXCLUDED_COLLECTIONS.includes(collection.address))\n      .slice(0, TRENDING_COLLECTION_SIZE)\n  }, [trendingCollections])\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  return (\n    <BannerContainer>\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. <br />\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <CarouselCard\n                key={collection.address}\n                collection={collection}\n                onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n              />\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { DeltaArrow } from 'components/Tokens/TokenDetails/Delta'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.neutral1}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.surface2)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.success : theme.critical)};\n  justify-content: flex-end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => {\n  const { formatNumberOrString } = useFormatter()\n  return (\n    <span>{value.value ? formatNumberOrString({ input: value.value, type: NumberType.NFTCollectionStats }) : '-'}</span>\n  )\n}\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const { formatNumberOrString } = useFormatter()\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n  const ethDenomination = denomination === Denomination.ETH\n  const formattedValue =\n    formatNumberOrString({\n      input: denominatedValue,\n      type: ethDenomination ? NumberType.NFTToken : NumberType.FiatTokenStats,\n    }) + (ethDenomination ? ' ETH' : '')\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const { formatNumberOrString } = useFormatter()\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n  const ethDenomination = denomination === Denomination.ETH\n\n  const formattedValue =\n    formatNumberOrString({\n      input: denominatedValue,\n      type: ethDenomination ? NumberType.WholeNumber : NumberType.FiatTokenStats,\n    }) + (ethDenomination ? ' ETH' : '')\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{formattedValue}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      <DeltaArrow delta={change} />\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var address = 'rgw6ezd3 rgw6ezbf rgw6eze9 rgw6ez4b9 rgw6ez45x rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez2dr rgw6ez2if rgw6ezlf rgw6ez3x rgw6ez1m3 rgw6ez173';\nexport var logo = 'rgw6ez80x';\nexport var title = 'rgw6ezd3 rgw6ezbf rgw6eze9 rgw6ez4b9 rgw6ez45x rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez2dr rgw6ez2if';\nexport var verifiedBadge = 'rgw6ezl3 rgw6ez453 rgw6ez2o3 rgw6ez19r rgw6ez12r rgw6ez45x';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYTo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCAjRkM3MkZGODAgMCUsICNGQzcyRkY4MCAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRiOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGI6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQ==\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var activeRow = 'rgw6ez713';\nexport var activityRow = '_1mor7ve3 rgw6ez48l rgw6ez3r rgw6ez3z';\nexport var loadingTd = '_1mor7veh rgw6ezd3 rgw6ezbf rgw6eze9 rgw6ez2of rgw6ez27x rgw6ez1jl rgw6ez463 rgw6ez48x';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez11x rgw6ez18x rgw6ez80l rgw6ez3xr rgw6ezlf';\nexport var section = '_1mor7ve1 rgw6ez2e3 rgw6ez2co rgw6ez2jl rgw6ez2i6';\nexport var table = '_1mor7vea rgw6ez4qf rgw6ez16r rgw6ez80x rgw6ez7zl';\nexport var td = '_1mor7vef rgw6ezd3 rgw6ezbf rgw6eze9 rgw6ez2o3 rgw6ez27l rgw6ez1jl rgw6ez463 rgw6ez48x';\nexport var th = '_1mor7ved rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez4bf rgw6ez2or rgw6ez289';\nexport var thead = 'rgw6ezr9 rgw6ez55f rgw6ez895 rgw6ez805';\nexport var timestamp = 'rgw6ez48l rgw6ezb3 rgw6ez4jf rgw6ez3ex rgw6ez3at rgw6ez37r rgw6ez39h rgw6ez3h9 rgw6ez3kh';","import { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { TraceEvent } from 'analytics'\nimport { ArrowChangeDown } from 'components/Icons/ArrowChangeDown'\nimport { ArrowChangeUp } from 'components/Icons/ArrowChangeUp'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.surface3};\n  }\n  :active {\n    background: ${({ theme }) => theme.deprecated_stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { chainId } = useWeb3React()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <table {...getTableProps()} className={styles.table}>\n      <thead className={styles.thead}>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n            {headerGroup.headers.map((column, index) => {\n              return (\n                <StyledHeader\n                  className={styles.th}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  style={{\n                    textAlign: index === 0 ? 'left' : 'right',\n                    paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                  }}\n                  disabled={column.disableSortBy}\n                  key={index}\n                >\n                  <Box as=\"span\" color=\"neutral2\" position=\"relative\">\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <ArrowChangeUp width=\"16px\" height=\"16px\" style={{ position: 'absolute', top: 3 }} />\n                      ) : (\n                        <ArrowChangeDown width=\"16px\" height=\"16px\" style={{ position: 'absolute', top: 3 }} />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </Box>\n                  <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                    {column.render('Header')}\n                  </Box>\n                </StyledHeader>\n              )\n            })}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n\n          return (\n            <TraceEvent\n              events={[BrowserEvent.onClick]}\n              name={NFTEventName.NFT_TRENDING_ROW_SELECTED}\n              properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\n              element={InterfaceElementName.NFT_TRENDING_ROW}\n              key={i}\n            >\n              <StyledRow\n                {...row.getRowProps()}\n                key={row.id}\n                onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n                data-testid=\"nft-trending-collection\"\n              >\n                {row.cells.map((cell, cellIndex) => {\n                  return (\n                    <td\n                      className={styles.td}\n                      {...cell.getCellProps()}\n                      key={cellIndex}\n                      style={{\n                        maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                      }}\n                    >\n                      {cellIndex === 0 ? (\n                        <RankCellContainer>\n                          {!isMobile && (\n                            <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                              {i + 1}\n                            </ThemedText.BodySecondary>\n                          )}\n                          {cell.render('Cell')}\n                        </RankCellContainer>\n                      ) : (\n                        cell.render('Cell')\n                      )}\n                    </td>\n                  )\n                })}\n              </StyledRow>\n            </TraceEvent>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <table {...props} className={styles.table}>\n      <thead className={styles.thead}>\n        {headerGroups.map((headerGroup) => (\n          <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n            {headerGroup.headers.map((column, index) => {\n              return (\n                <StyledHeader\n                  className={styles.th}\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  style={{\n                    textAlign: index === 0 ? 'left' : 'right',\n                    paddingLeft: index === 0 ? '52px' : 0,\n                  }}\n                  disabled={index === 0}\n                  key={index}\n                >\n                  <Box as=\"span\" color=\"accent1\" position=\"relative\">\n                    {column.isSorted ? (\n                      column.isSortedDesc ? (\n                        <ArrowChangeUp width=\"16px\" height=\"16px\" style={{ position: 'absolute', marginTop: '2px' }} />\n                      ) : (\n                        <ArrowChangeDown\n                          width=\"16px\"\n                          height=\"16px\"\n                          style={{ position: 'absolute', marginTop: '2px' }}\n                        />\n                      )\n                    ) : (\n                      ''\n                    )}\n                  </Box>\n                  <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                    {column.render('Header')}\n                  </Box>\n                </StyledHeader>\n              )\n            })}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...props}>\n        {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n          <StyledLoadingRow key={index}>\n            {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n              return (\n                <td className={styles.loadingTd} key={cellIndex}>\n                  {cellIndex === 0 ? (\n                    <StyledCollectionNameHolder>\n                      <StyledRankHolder />\n                      <StyledImageHolder />\n                      <LoadingBubble />\n                    </StyledCollectionNameHolder>\n                  ) : (\n                    <StyledLoadingHolder>\n                      <LoadingBubble />\n                    </StyledLoadingHolder>\n                  )}\n                </td>\n              )\n            })}\n          </StyledLoadingRow>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a?: number, b?: number): 1 | -1 => {\n  if (!a) return -1\n  if (!b) return 1\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.value, rowB.original.floor.value)\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change && change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { OpacityHoverState } from 'components/Common'\nimport { HistoryDuration } from 'graphql/data/__generated__/types-and-hooks'\nimport { useTrendingCollections } from 'graphql/data/nft/TrendingCollections'\nimport { useNativeUsdPrice } from 'nft/hooks'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { useFormatterLocales } from 'utils/formatNumbers'\n\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: ${({ theme }) => theme.maxWidth};\n  padding: 0 16px;\n`\n\nconst StyledHeader = styled.h1`\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 36px;\n  line-height: 44px;\n  font-weight: 535;\n  margin: 0;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.surface3 : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.neutral1 : theme.neutral2)};\n`\n\nfunction convertTimePeriodToHistoryDuration(timePeriod: TimePeriod): HistoryDuration {\n  switch (timePeriod) {\n    case TimePeriod.OneDay:\n      return HistoryDuration.Day\n    case TimePeriod.SevenDays:\n      return HistoryDuration.Week\n    case TimePeriod.ThirtyDays:\n      return HistoryDuration.Month\n    case TimePeriod.AllTime:\n      return HistoryDuration.Max\n    default:\n      return HistoryDuration.Day\n  }\n}\n\nconst TrendingCollections = () => {\n  const { formatterLocalCurrency } = useFormatterLocales()\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { data: trendingCollections, loading: trendingCollectionsAreLoading } = useTrendingCollections(\n    100,\n    convertTimePeriodToHistoryDuration(timePeriod)\n  )\n\n  const ethUsdPrice = useNativeUsdPrice()\n\n  const trendingCollectionColumns = useMemo(() => {\n    if (!trendingCollectionsAreLoading && trendingCollections) {\n      return trendingCollections.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice: ethUsdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [trendingCollections, trendingCollectionsAreLoading, isEthToggled, ethUsdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              {formatterLocalCurrency}\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollectionColumns} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","import { InterfacePageName } from '@uniswap/analytics-events'\nimport { Trace } from 'analytics'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={InterfacePageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"names":["CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","neutral1","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","springs","set","useSprings","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","async","clearInterval","onClick","ChevronLeftIcon","width","height","map","style","ChevronRightIcon","LoadingCarousel","CarouselCardBorder","transition","duration","fast","timing","inOut","surface3","deprecated_deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","deprecated_accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","surface1","xs","MarketplaceRow","marketplace","floorInEth","listings","formatNumberOrString","useFormatter","toLowerCase","alt","ThemedText","BodySmall","color","Number","input","type","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","data","gqlCollection","loading","useCollection","address","formatNumber","LoadingCarouselCard","CarouselCardHeader","UniswapMagentaIcon","SubHeaderSmall","NFTToken","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CollectionName","MediumHeader","bannerImageUrl","imageUrl","fontWeight","name","isVerified","VerifiedIcon","BannerContainer","BannerMainArea","maxWidth","HeaderContainer","lg","EXCLUDED_COLLECTIONS","navigate","useNavigate","trendingCollections","useTrendingCollections","HistoryDuration","Day","collections","useMemo","filter","includes","slice","activeCollectionIdx","setActiveCollectionIdx","useState","onToggleNextSlide","br","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","surface2","ChangeCellContainer","change","success","critical","EthContainer","CollectionTitleCell","value","isMobile","useIsMobile","logo","span","className","DiscreteNumberCell","NFTCollectionStats","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","ethDenomination","formattedValue","FiatTokenStats","TextComponent","BodyPrimary","TextCell","VolumeCell","WholeNumber","ChangeCell","DeltaArrow","delta","abs","round","loadingTd","table","th","thead","RankCellContainer","StyledRow","tr","deprecated_stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","DEFAULT_TRENDING_TABLE_QUERY_AMOUNT","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","props","useTheme","chainId","useWeb3React","useWindowSize","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","useTable","initialState","sortBy","desc","id","ColumnHeaders","Volume","useSortBy","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","ArrowChangeUp","top","ArrowChangeDown","render","tbody","row","TraceEvent","events","BrowserEvent","NFTEventName","NFT_TRENDING_ROW_SELECTED","properties","collection_address","original","chain_id","element","InterfaceElementName","NFT_TRENDING_ROW","getRowProps","data-testid","cells","cell","cellIndex","td","getCellProps","BodySecondary","fontSize","lineHeight","marginTop","_","VolumeChange","Floor","FloorChange","Sales","Items","Owners","compareFloats","b","timePeriod","floorSort","rowA","rowB","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","sortType","TimePeriod","AllTime","MediumOnly","sortDescFirst","totalSupply","owners","timeOptions","label","OneDay","SevenDays","ThirtyDays","ExploreContainer","h1","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","neutral2","formatterLocalCurrency","useFormatterLocales","setTimePeriod","isEthToggled","setEthToggled","trendingCollectionsAreLoading","Week","Month","Max","convertTimePeriodToHistoryDuration","ethUsdPrice","useNativeUsdPrice","trendingCollectionColumns","d","volumeChange","floorChange","sales","USD","timeOption","CollectionTable","setBagExpanded","useBag","state","bagExpanded","manualClose","Trace","page","InterfacePageName","NFT_EXPLORE_PAGE","shouldLogImpression","Banner","TrendingCollections"],"sourceRoot":""}