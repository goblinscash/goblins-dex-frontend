{"version":3,"file":"static/js/5422.d1048273.chunk.js","mappings":"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","sources":["components/Tokens/TokenDetails/AddressSection.tsx","components/TokenSafety/TokenSafetyMessage.tsx","graphql/thegraph/PoolsFromTokenAddress.ts","components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable.tsx","graphql/thegraph/TokenTransactions.ts","components/Tokens/TokenDetails/tables/TransactionsTable.tsx","components/Tokens/TokenDetails/ActivitySection.tsx","assets/svg/eye.svg","components/Tokens/TokenDetails/InvalidTokenDetails.tsx","components/Icons/Globe.tsx","components/Icons/TwitterX.tsx","components/Tokens/TokenDetails/TokenDescription.tsx","components/Tokens/TokenDetails/index.tsx","pages/TokenDetails/utils.ts","pages/TokenDetails/index.tsx","utils/addressesAreEquivalent.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport styled from 'styled-components'\nimport { CopyContractAddress, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utils/addresses'\n\nconst ContractAddressSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 0.9em;\n  gap: 4px;\n  padding: 4px 0px;\n`\n\nconst ContractAddress = styled.button`\n  display: flex;\n  color: ${({ theme }) => theme.neutral1};\n  gap: 10px;\n  align-items: center;\n  background: transparent;\n  border: none;\n  min-height: 38px;\n  padding: 0px;\n`\n\nexport default function AddressSection({ address }: { address: string }) {\n  return (\n    <ContractAddressSection>\n      <ThemedText.SubHeaderSmall>\n        <Trans>Contract address</Trans>\n      </ThemedText.SubHeaderSmall>\n      <ContractAddress>\n        <CopyContractAddress address={address} truncatedAddress={shortenAddress(address, 2, 3)} />\n      </ContractAddress>\n    </ContractAddressSection>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { displayWarningLabel, getWarningCopy, TOKEN_SAFETY_ARTICLE, Warning } from 'constants/tokenSafety'\nimport { useTokenWarningColor, useTokenWarningTextColor } from 'hooks/useTokenWarningColor'\nimport { AlertTriangle, Slash } from 'react-feather'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\nimport { ExternalLink } from 'theme/components'\n\nconst Label = styled.div<{ color: string; backgroundColor: string }>`\n  width: 100%;\n  padding: 12px 20px 16px;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ color }) => color};\n`\n\nconst TitleRow = styled.div`\n  align-items: center;\n  font-weight: 535;\n  display: inline-flex;\n`\n\nconst Title = styled(Text)`\n  font-weight: 535;\n  font-size: 16px;\n  line-height: 24px;\n  margin-left: 7px;\n`\n\nconst DetailsRow = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.neutral2};\n`\n\nconst StyledLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.accent1};\n\n  font-weight: 535;\n`\n\ntype TokenSafetyMessageProps = {\n  warning: Warning\n  tokenAddress: string\n}\n\nexport default function TokenSafetyMessage({ warning, tokenAddress }: TokenSafetyMessageProps) {\n  const backgroundColor = useTokenWarningColor(warning.level)\n  const textColor = useTokenWarningTextColor(warning.level)\n  const { heading, description } = getWarningCopy(warning)\n\n  return (\n    <Label data-cy=\"token-safety-message\" color={textColor} backgroundColor={backgroundColor}>\n      {displayWarningLabel(warning) && (\n        <TitleRow>\n          {warning.canProceed ? <AlertTriangle size=\"16px\" /> : <Slash size=\"16px\" />}\n          <Title marginLeft=\"7px\">{warning.message}</Title>\n        </TitleRow>\n      )}\n\n      <DetailsRow>\n        {heading}\n        {Boolean(heading) && ' '}\n        {description}\n        {Boolean(description) && ' '}\n        {tokenAddress && (\n          <StyledLink href={TOKEN_SAFETY_ARTICLE}>\n            <Trans>Learn more</Trans>\n          </StyledLink>\n        )}\n      </DetailsRow>\n    </Label>\n  )\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport {\n  OrderDirection,\n  Pool_OrderBy,\n  usePoolsFromTokenAddressQuery,\n} from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { chainToApolloClient } from 'graphql/thegraph/apollo'\nimport { TablePool } from 'graphql/thegraph/TopPools'\nimport gql from 'graphql-tag'\nimport { useCallback, useMemo, useRef } from 'react'\n\ngql`\n  query PoolsFromTokenAddress(\n    $tokenAddress: String!\n    $skip: Int\n    $orderBy: Pool_orderBy\n    $orderDirection: OrderDirection\n  ) {\n    pools(\n      where: { or: [{ token0: $tokenAddress }, { token1: $tokenAddress }] }\n      first: 20\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      subgraphError: allow\n    ) {\n      id\n      txCount\n      totalValueLockedUSD\n      feeTier\n      token0 {\n        id\n        symbol\n      }\n      token1 {\n        id\n        symbol\n      }\n    }\n  }\n`\n\nexport function usePoolsFromTokenAddress(\n  tokenAddress: string,\n  chainId?: ChainId,\n  orderBy: Pool_OrderBy = Pool_OrderBy.TotalValueLockedUsd,\n  orderDirection: OrderDirection = OrderDirection.Desc\n) {\n  const apolloClient = chainToApolloClient[chainId || ChainId.MAINNET]\n  const { loading, error, data, fetchMore } = usePoolsFromTokenAddressQuery({\n    variables: {\n      tokenAddress: tokenAddress.toLowerCase(),\n      orderBy,\n      orderDirection,\n    },\n    client: apolloClient,\n    fetchPolicy: 'cache-first',\n  })\n\n  const loadingMore = useRef(false)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMore.current) {\n        return\n      }\n      loadingMore.current = true\n      fetchMore({\n        variables: {\n          skip: data?.pools?.length ?? 0,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n          onComplete?.()\n          const mergedData = {\n            pools: [...prev.pools, ...fetchMoreResult.pools],\n          }\n          loadingMore.current = false\n          return mergedData\n        },\n      })\n    },\n    [data?.pools?.length, fetchMore]\n  )\n\n  return useMemo(() => {\n    const pools: TablePool[] = (data?.pools ?? [])\n      .map((topPool) => {\n        const rand = Math.random()\n        const tvl = parseFloat(topPool.totalValueLockedUSD ?? '0')\n        return {\n          hash: topPool.id,\n          token0: topPool.token0,\n          token1: topPool.token1,\n          txCount: parseFloat(topPool.txCount ?? '0'),\n          tvl,\n          feeTier: parseFloat(topPool.feeTier ?? '0'),\n          // TODO(WEB-3236): once GQL BE TopToken query is supported use real value for volume24h, volumeWeek, and turnover\n          volume24h: rand * tvl,\n          volumeWeek: rand * tvl * 7,\n          turnover: rand,\n        } as TablePool\n      })\n      .sort((a, b) => b.tvl - a.tvl)\n    return { loading, error, pools, loadMore }\n  }, [data?.pools, error, loadMore, loading])\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport { PoolsTable, PoolTableColumns, PoolTableSortState } from 'components/Pools/PoolTable/PoolTable'\nimport { OrderDirection, Pool_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { usePoolsFromTokenAddress } from 'graphql/thegraph/PoolsFromTokenAddress'\nimport { useCallback, useState } from 'react'\nimport { ThemedText } from 'theme/components'\n\nconst HIDDEN_COLUMNS = [PoolTableColumns.Transactions]\n\nexport function TokenDetailsPoolsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const [sortState, setSortMethod] = useState<PoolTableSortState>({\n    sortBy: Pool_OrderBy.TotalValueLockedUsd,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { pools, loading, error, loadMore } = usePoolsFromTokenAddress(\n    referenceToken.address,\n    chainId,\n    sortState.sortBy,\n    sortState.sortDirection\n  )\n\n  const handleHeaderClick = useCallback(\n    (newSortMethod: Pool_OrderBy) => {\n      if (sortState.sortBy === newSortMethod) {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: sortState.sortDirection === OrderDirection.Asc ? OrderDirection.Desc : OrderDirection.Asc,\n        })\n      } else {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: OrderDirection.Desc,\n        })\n      }\n    },\n    [sortState.sortBy, sortState.sortDirection]\n  )\n\n  if (error) {\n    return (\n      <ThemedText.BodyPrimary>\n        <Trans>Error loading Top Pools</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <div data-testid={`tdp-pools-table-${referenceToken.address.toLowerCase()}`}>\n      <PoolsTable\n        pools={pools}\n        loading={loading}\n        chainId={chainId}\n        maxHeight={600}\n        hiddenColumns={HIDDEN_COLUMNS}\n        loadMore={loadMore}\n        sortState={sortState}\n        handleHeaderClick={handleHeaderClick}\n      />\n    </div>\n  )\n}\n","import { gql } from '@apollo/client'\nimport { ChainId } from '@uniswap/sdk-core'\nimport { OrderDirection, Swap_OrderBy, useTokenTransactionsQuery } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { useCallback, useMemo, useRef } from 'react'\n\nimport { chainToApolloClient } from './apollo'\n\ngql`\n  query TokenTransactions(\n    $address: String!\n    $first: Int\n    $skip: Int\n    $orderBy: Swap_orderBy\n    $orderDirection: OrderDirection\n  ) {\n    swapsAs0: swaps(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      where: { token0: $address }\n      subgraphError: allow\n    ) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs1: swaps(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      where: { token1: $address }\n      subgraphError: allow\n    ) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\nexport enum TokenTransactionType {\n  BUY = 'Buy',\n  SELL = 'Sell',\n}\n\nexport function useTokenTransactions(\n  address: string,\n  chainId?: ChainId,\n  orderBy: Swap_OrderBy = Swap_OrderBy.Timestamp,\n  orderDirection: OrderDirection = OrderDirection.Desc,\n  filter: TokenTransactionType[] = [TokenTransactionType.BUY, TokenTransactionType.SELL],\n  first = 25,\n  skip?: number\n) {\n  const apolloClient = chainToApolloClient[chainId || ChainId.MAINNET]\n  const { data, loading, fetchMore } = useTokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      first,\n      skip,\n      orderBy,\n      orderDirection,\n    },\n    client: apolloClient,\n  })\n  const loadingMore = useRef(false)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMore.current) {\n        return\n      }\n      loadingMore.current = true\n      fetchMore({\n        variables: {\n          skip: Math.max(data?.swapsAs0?.length ?? 0, data?.swapsAs1?.length ?? 0),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev\n          onComplete?.()\n          const mergedData = {\n            swapsAs0: [...prev.swapsAs0, ...fetchMoreResult.swapsAs0],\n            swapsAs1: [...prev.swapsAs1, ...fetchMoreResult.swapsAs1],\n          }\n          loadingMore.current = false\n          return mergedData\n        },\n      })\n    },\n    [data, fetchMore]\n  )\n\n  const transactions = useMemo(\n    () =>\n      [\n        ...(data?.swapsAs0.filter((swap) => {\n          const isSell = swap.amount0 > 0\n          return isSell ? filter.includes(TokenTransactionType.SELL) : filter.includes(TokenTransactionType.BUY)\n        }) ?? []),\n        ...(data?.swapsAs1.filter((swap) => {\n          const isSell = swap.amount1 > 0\n          return isSell ? filter.includes(TokenTransactionType.SELL) : filter.includes(TokenTransactionType.BUY)\n        }) ?? []),\n      ].sort((a, b) => b.timestamp - a.timestamp),\n    [data?.swapsAs0, data?.swapsAs1, filter]\n  )\n\n  return useMemo(() => {\n    return {\n      transactions,\n      loading,\n      loadMore,\n    }\n  }, [transactions, loading, loadMore])\n}\n","import { Trans } from '@lingui/macro'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport { Table } from 'components/Table'\nimport { Cell } from 'components/Table/Cell'\nimport { Filter } from 'components/Table/Filter'\nimport {\n  ClickableHeaderRow,\n  FilterHeaderRow,\n  HeaderArrow,\n  StyledExternalLink,\n  StyledInternalLink,\n} from 'components/Table/styled'\nimport { getLocaleTimeString } from 'components/Table/utils'\nimport { DEFAULT_LOCALE } from 'constants/locales'\nimport { validateUrlChainParam } from 'graphql/data/util'\nimport { OrderDirection, Swap_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { TokenTransactionType, useTokenTransactions } from 'graphql/thegraph/TokenTransactions'\nimport { useActiveLocalCurrency } from 'hooks/useActiveLocalCurrency'\nimport { useActiveLocale } from 'hooks/useActiveLocale'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { useCallback, useMemo, useReducer, useRef, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { EllipsisStyle, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utils/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst StyledSwapAmount = styled(ThemedText.BodyPrimary)`\n  display: inline-block;\n  ${EllipsisStyle}\n  max-width: 125px;\n`\ninterface SwapTransaction {\n  hash: string\n  timestamp: number\n  input: SwapLeg\n  output: SwapLeg\n  usdValue: number\n  makerAddress: string\n}\n\ninterface SwapLeg {\n  address: string\n  symbol: string\n  amount: number\n}\n\ntype TokenTxTableSortState = {\n  sortBy: Swap_OrderBy\n  sortDirection: OrderDirection\n}\n\nexport function TransactionsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const locale = useActiveLocale()\n  const activeLocalCurrency = useActiveLocalCurrency()\n  const { formatNumber, formatFiatPrice } = useFormatter()\n  const chainName = validateUrlChainParam(useParams<{ chainName?: string }>().chainName)\n  const [filterModalIsOpen, toggleFilterModal] = useReducer((s) => !s, false)\n  const filterModalRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(filterModalRef, filterModalIsOpen ? toggleFilterModal : undefined)\n  const [filter, setFilters] = useState<TokenTransactionType[]>([TokenTransactionType.BUY, TokenTransactionType.SELL])\n  const [sortState, setSortMethod] = useState<TokenTxTableSortState>({\n    sortBy: Swap_OrderBy.Timestamp,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { transactions, loading, loadMore } = useTokenTransactions(\n    referenceToken.address,\n    chainId,\n    sortState.sortBy,\n    sortState.sortDirection,\n    filter\n  )\n\n  const handleHeaderClick = useCallback(\n    (newSortMethod: Swap_OrderBy) => {\n      if (sortState.sortBy === newSortMethod) {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: sortState.sortDirection === OrderDirection.Asc ? OrderDirection.Desc : OrderDirection.Asc,\n        })\n      } else {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: OrderDirection.Desc,\n        })\n      }\n    },\n    [sortState.sortBy, sortState.sortDirection]\n  )\n\n  const data = useMemo(\n    () =>\n      transactions.map((transaction) => {\n        const swapLeg0 = {\n          address: transaction.pool.token0.id,\n          symbol: transaction.pool.token0.symbol,\n          amount: transaction.amount0,\n        }\n        const swapLeg1 = {\n          address: transaction.pool.token1.id,\n          symbol: transaction.pool.token1.symbol,\n          amount: transaction.amount1,\n        }\n        let input, output\n        if (swapLeg0.amount > 0) {\n          input = swapLeg0\n          output = swapLeg1\n        } else {\n          input = swapLeg1\n          output = swapLeg0\n        }\n        return {\n          hash: transaction.transaction.id,\n          timestamp: transaction.timestamp,\n          input,\n          output,\n          usdValue: transaction.amountUSD,\n          makerAddress: transaction.origin,\n        }\n      }),\n    [transactions]\n  )\n  // TODO(WEB-3236): once GQL BE Transaction query is supported add usd, token0 amount, and token1 amount sort support\n  const columns = useMemo(() => {\n    const columnHelper = createColumnHelper<SwapTransaction>()\n    return [\n      columnHelper.accessor((row) => row.timestamp, {\n        id: 'timestamp',\n        header: () => (\n          <Cell minWidth={150} justifyContent=\"flex-start\" grow>\n            <ClickableHeaderRow $justify=\"flex-start\" onClick={() => handleHeaderClick(Swap_OrderBy.Timestamp)}>\n              {sortState.sortBy === Swap_OrderBy.Timestamp && <HeaderArrow direction={sortState.sortDirection} />}\n              <ThemedText.BodySecondary>\n                <Trans>Time</Trans>\n              </ThemedText.BodySecondary>\n            </ClickableHeaderRow>\n          </Cell>\n        ),\n        cell: (timestamp) => (\n          <Cell loading={loading} minWidth={150} justifyContent=\"flex-start\" grow>\n            <ThemedText.BodySecondary>\n              {getLocaleTimeString(Number(timestamp.getValue?.()) * 1000, locale ?? DEFAULT_LOCALE)}\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.output.address, {\n        id: 'swap-type',\n        header: () => (\n          <Cell minWidth={50} justifyContent=\"flex-start\" grow>\n            <FilterHeaderRow modalOpen={filterModalIsOpen} onClick={toggleFilterModal} ref={filterModalRef}>\n              <Filter\n                allFilters={Object.values(TokenTransactionType)}\n                activeFilter={filter}\n                setFilters={setFilters}\n                isOpen={filterModalIsOpen}\n              />\n              <ThemedText.BodySecondary>\n                <Trans>Type</Trans>\n              </ThemedText.BodySecondary>\n            </FilterHeaderRow>\n          </Cell>\n        ),\n        cell: (outputTokenAddress) => (\n          <Cell loading={loading} minWidth={50} justifyContent=\"flex-start\" grow>\n            <ThemedText.BodyPrimary>\n              {String(outputTokenAddress.getValue?.()).toLowerCase() === referenceToken.address.toLowerCase() ? (\n                <Trans>Buy</Trans>\n              ) : (\n                <Trans>Sell</Trans>\n              )}\n            </ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor(\n        (row) =>\n          row.input.address.toLowerCase() === referenceToken.address.toLowerCase()\n            ? row.input.amount\n            : row.output.amount,\n        {\n          id: 'reference-amount',\n          header: () => (\n            <Cell minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>${referenceToken.symbol}</ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (inputTokenAmount) => (\n            <Cell loading={loading} minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodyPrimary>\n                {formatNumber({\n                  input: Math.abs(inputTokenAmount.getValue?.()) || 0,\n                })}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor(\n        (row) => {\n          const nonReferenceSwapLeg =\n            row.input.address.toLowerCase() === referenceToken.address.toLowerCase() ? row.output : row.input\n          return (\n            <StyledSwapAmount>\n              {formatNumber({\n                input: Math.abs(nonReferenceSwapLeg.amount) || 0,\n              })}{' '}\n              <StyledInternalLink to={`/explore/tokens/${chainName.toLowerCase()}/${nonReferenceSwapLeg.address}`}>\n                {nonReferenceSwapLeg.symbol}\n              </StyledInternalLink>\n            </StyledSwapAmount>\n          )\n        },\n        {\n          id: 'non-reference-amount',\n          header: () => (\n            <Cell minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>\n                <Trans>For</Trans>\n              </ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (swapOutput) => (\n            <Cell loading={loading} minWidth={150} justifyContent=\"flex-end\">\n              {swapOutput.getValue?.()}\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor((row) => row.usdValue, {\n        id: 'fiat-value',\n        header: () => (\n          <Cell minWidth={125} justifyContent=\"flex-end\">\n            <ClickableHeaderRow $justify=\"flex-end\" onClick={() => handleHeaderClick(Swap_OrderBy.AmountUsd)}>\n              {sortState.sortBy === Swap_OrderBy.AmountUsd && <HeaderArrow direction={sortState.sortDirection} />}\n              <ThemedText.BodySecondary>{activeLocalCurrency}</ThemedText.BodySecondary>\n            </ClickableHeaderRow>\n          </Cell>\n        ),\n        cell: (fiat) => (\n          <Cell loading={loading} minWidth={125} justifyContent=\"flex-end\">\n            <ThemedText.BodyPrimary>{formatFiatPrice({ price: fiat.getValue?.() })}</ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.makerAddress, {\n        id: 'maker-address',\n        header: () => (\n          <Cell minWidth={100} justifyContent=\"flex-end\">\n            <ThemedText.BodySecondary>\n              <Trans>Wallet</Trans>\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n        cell: (makerAddress) => (\n          <Cell loading={loading} minWidth={100} justifyContent=\"flex-end\">\n            <StyledExternalLink href={getExplorerLink(chainId, makerAddress.getValue?.(), ExplorerDataType.ADDRESS)}>\n              {shortenAddress(makerAddress.getValue?.(), 0)}\n            </StyledExternalLink>\n          </Cell>\n        ),\n      }),\n    ]\n  }, [\n    activeLocalCurrency,\n    chainId,\n    chainName,\n    filter,\n    filterModalIsOpen,\n    formatFiatPrice,\n    formatNumber,\n    handleHeaderClick,\n    loading,\n    locale,\n    referenceToken.address,\n    referenceToken.symbol,\n    sortState.sortBy,\n    sortState.sortDirection,\n  ])\n\n  return <Table columns={columns} data={data} loading={loading} loadMore={loadMore} maxHeight={600} />\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport Row from 'components/Row'\nimport { TokenDetailsPoolsTable } from 'components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable'\nimport { useState } from 'react'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\nimport { ClickableStyle } from 'theme/components'\n\nimport { TransactionsTable } from './tables/TransactionsTable'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst Tab = styled(Text)<{ isActive?: boolean }>`\n  cursor: pointer;\n  font-size: 24px !important;\n  line-height: 32px !important;\n  color: ${({ isActive, theme }) => (isActive ? theme.neutral1 : theme.neutral2)};\n  ${ClickableStyle};\n`\nenum ActivityTab {\n  Pools,\n  Txs,\n}\nexport function ActivitySection({ chainId, referenceToken }: { chainId: ChainId; referenceToken?: Token }) {\n  const [activityInView, setActivityInView] = useState(ActivityTab.Pools)\n\n  if (!referenceToken) {\n    return null\n  }\n  return (\n    <Container>\n      <Row gap=\"24px\" marginBottom=\"12px\" id=\"activity-header\">\n        <Tab isActive={activityInView === ActivityTab.Pools} onClick={() => setActivityInView(ActivityTab.Pools)}>\n          <Trans>Pools</Trans>\n        </Tab>\n        <Tab isActive={activityInView === ActivityTab.Txs} onClick={() => setActivityInView(ActivityTab.Txs)}>\n          <Trans>Transactions</Trans>\n        </Tab>\n      </Row>\n      {activityInView === ActivityTab.Pools && (\n        <TokenDetailsPoolsTable chainId={chainId} referenceToken={referenceToken} />\n      )}\n      {activityInView === ActivityTab.Txs && <TransactionsTable chainId={chainId} referenceToken={referenceToken} />}\n    </Container>\n  )\n}\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEye(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.75 12C14.75 13.517 13.517 14.75 12 14.75C10.483 14.75 9.25004 13.517 9.25004 12C9.25004 11.651 9.32196 11.32 9.44096 11.012C9.63496 11.166 9.86903 11.272 10.136 11.272C10.763 11.272 11.272 10.763 11.272 10.136C11.272 9.86899 11.166 9.63492 11.012 9.44092C11.32 9.32192 11.651 9.25 12 9.25C13.517 9.25 14.75 10.483 14.75 12ZM20.5921 13.4771C19.3651 15.5311 16.609 19 12 19C7.39104 19 4.635 15.5311 3.408 13.4771C2.864 12.5671 2.864 11.4329 3.408 10.5229C4.635 8.46895 7.39104 5 12 5C16.609 5 19.3651 8.46895 20.5921 10.5229C21.1361 11.4329 21.1361 12.5671 20.5921 13.4771ZM16.25 12C16.25 9.657 14.344 7.75 12 7.75C9.65604 7.75 7.75004 9.657 7.75004 12C7.75004 14.343 9.65604 16.25 12 16.25C14.344 16.25 16.25 14.343 16.25 12Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEye);\nexport default __webpack_public_path__ + \"static/media/eye.0b7e1ea0bf8a719e75d97cfc5cd4e72d.svg\";\nexport { ForwardRef as ReactComponent };","import { Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { getChainInfo } from 'constants/chainInfo'\nimport useSelectChain from 'hooks/useSelectChain'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { ReactComponent as EyeIcon } from '../../../assets/svg/eye.svg'\n\nconst InvalidDetailsContainer = styled.div`\n  padding-top: 128px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst InvalidDetailsText = styled.span`\n  margin-top: 28px;\n  margin-bottom: 20px;\n\n  text-align: center;\n\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 20px;\n  font-weight: 535;\n  line-height: 28px;\n`\n\nconst TokenExploreButton = styled(ButtonPrimary)`\n  width: fit-content;\n  padding: 12px 16px;\n  border-radius: 12px;\n\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 16px;\n  font-weight: 535;\n`\n\nexport default function InvalidTokenDetails({\n  pageChainId,\n  isInvalidAddress,\n}: {\n  pageChainId: ChainId\n  isInvalidAddress?: boolean\n}) {\n  const { chainId } = useWeb3React()\n  const navigate = useNavigate()\n  const selectChain = useSelectChain()\n\n  // if the token's address is valid and the chains match, it's a non-existant token\n  const isNonExistantToken = !isInvalidAddress && pageChainId === chainId\n\n  const connectedChainLabel = chainId ? getChainInfo(chainId)?.label : undefined\n\n  return (\n    <InvalidDetailsContainer>\n      <EyeIcon />\n      {isInvalidAddress || isNonExistantToken ? (\n        <>\n          <InvalidDetailsText>\n            <Trans>This token doesn&apos;t exist</Trans>\n          </InvalidDetailsText>\n          <TokenExploreButton onClick={() => navigate('/tokens')}>\n            <ThemedText.SubHeader>\n              <Trans>Explore tokens</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      ) : (\n        <>\n          {connectedChainLabel && (\n            <InvalidDetailsText>\n              <Trans>This token doesn&apos;t exist on {connectedChainLabel}</Trans>\n            </InvalidDetailsText>\n          )}\n          <TokenExploreButton onClick={() => selectChain(pageChainId)}>\n            <ThemedText.SubHeader>\n              <Trans>Switch to {getChainInfo(pageChainId).label}</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      )}\n    </InvalidDetailsContainer>\n  )\n}\n","import { ComponentProps } from 'react'\n\nexport const Globe = (props: ComponentProps<'svg'>) => (\n  <svg\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    stroke=\"transparent\"\n    {...props}\n  >\n    <path\n      d=\"M5.12245 9.5625C5.23495 11.8725 6.01495 14.2275 7.37245 16.32C4.19245 15.615 1.76996 12.8925 1.52246 9.5625H5.12245ZM7.37245 1.67999C4.19245 2.38499 1.76996 5.1075 1.52246 8.4375H5.12245C5.23495 6.1275 6.01495 3.77249 7.37245 1.67999ZM9.14997 1.5H8.84995L8.62496 1.82249C7.19996 3.84749 6.36745 6.1725 6.24745 8.4375H11.7525C11.6325 6.1725 10.8 3.84749 9.37496 1.82249L9.14997 1.5ZM6.24745 9.5625C6.36745 11.8275 7.19996 14.1525 8.62496 16.1775L8.84995 16.5H9.14997L9.37496 16.1775C10.8 14.1525 11.6325 11.8275 11.7525 9.5625H6.24745ZM12.8775 9.5625C12.765 11.8725 11.985 14.2275 10.6275 16.32C13.8075 15.615 16.23 12.8925 16.4775 9.5625H12.8775ZM16.4775 8.4375C16.23 5.1075 13.8075 2.38499 10.6275 1.67999C11.985 3.77249 12.765 6.1275 12.8775 8.4375H16.4775Z\"\n      fill={props.fill ?? '#607BEE'}\n    />\n  </svg>\n)\n","import { ComponentProps } from 'react'\n\nexport const TwitterXLogo = (props: ComponentProps<'svg'>) => (\n  <svg\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    stroke=\"transparent\"\n    {...props}\n  >\n    <path\n      d=\"M12.8761 3H14.9451L10.4251 8.16609L15.7425 15.196H11.579L8.31797 10.9324L4.58662 15.196H2.51644L7.35104 9.67026L2.25 3H6.51922L9.46689 6.89708L12.8761 3ZM12.15 13.9576H13.2964L5.89628 4.17332H4.66605L12.15 13.9576Z\"\n      fill={props.fill ?? '#607BEE'}\n    />\n  </svg>\n)\n","import { Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport Column from 'components/Column'\nimport { EtherscanLogo } from 'components/Icons/Etherscan'\nimport { Globe } from 'components/Icons/Globe'\nimport { TwitterXLogo } from 'components/Icons/TwitterX'\nimport Row from 'components/Row'\nimport { FOTTooltipContent } from 'components/swap/SwapLineItem'\nimport { NoInfoAvailable, truncateDescription, TruncateDescriptionButton } from 'components/Tokens/TokenDetails/shared'\nimport { MouseoverTooltip, TooltipSize } from 'components/Tooltip'\nimport { useTokenProjectQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { useSwapTaxes } from 'hooks/useSwapTaxes'\nimport { useCallback, useReducer } from 'react'\nimport { Copy } from 'react-feather'\nimport styled, { useTheme } from 'styled-components'\nimport { BREAKPOINTS } from 'theme'\nimport { ClickableStyle, EllipsisStyle, ExternalLink, ThemedText } from 'theme/components'\nimport { opacify } from 'theme/utils'\nimport { shortenAddress } from 'utils'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nconst TokenInfoSection = styled(Column)`\n  gap: 16px;\n  width: 100%;\n\n  @media (max-width: ${BREAKPOINTS.lg - 1}px) and (min-width: ${BREAKPOINTS.sm}px) {\n    max-width: 45%;\n  }\n`\n\nconst TokenNameRow = styled(Row)`\n  gap: 8px;\n  width: 100%;\n`\n\nconst TokenButtonRow = styled(TokenNameRow)`\n  flex-wrap: wrap;\n`\n\nconst TokenInfoButton = styled(Row)<{ tokenColor: string }>`\n  gap: 8px;\n  padding: 8px 12px;\n  border-radius: 20px;\n  color: ${({ tokenColor }) => tokenColor};\n  background-color: ${({ tokenColor }) => opacify(12, tokenColor)};\n  font-size: 14px;\n  font-weight: 535;\n  line-height: 16px;\n  width: max-content;\n  ${ClickableStyle}\n`\n\nconst TokenDescriptionContainer = styled(ThemedText.BodyPrimary)`\n  ${EllipsisStyle}\n  max-width: 100%;\n  // max-height: fit-content;\n  line-height: 24px;\n  white-space: pre-wrap;\n`\n\nconst DescriptionVisibilityWrapper = styled.p<{ $visible: boolean }>`\n  display: ${({ $visible }) => ($visible ? 'inline' : 'none')};\n`\n\nconst TRUNCATE_CHARACTER_COUNT = 75\n\nexport function TokenDescription({\n  tokenAddress,\n  chainId = ChainId.MAINNET,\n  isNative = false,\n  characterCount = TRUNCATE_CHARACTER_COUNT,\n}: {\n  tokenAddress: string\n  chainId?: number\n  isNative?: boolean\n  characterCount?: number\n}) {\n  const color = useTheme().neutral1\n  const chainName = chainIdToBackendName(chainId)\n  const { data: tokenQuery } = useTokenProjectQuery({\n    variables: {\n      address: isNative ? getNativeTokenDBAddress(chainName) : tokenAddress,\n      chain: chainName,\n    },\n    errorPolicy: 'all',\n  })\n  const tokenProject = tokenQuery?.token?.project\n  const description = tokenProject?.description\n  const explorerUrl = getExplorerLink(\n    chainId,\n    tokenAddress,\n    isNative ? ExplorerDataType.NATIVE : ExplorerDataType.TOKEN\n  )\n\n  const [, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(tokenAddress)\n  }, [tokenAddress, setCopied])\n\n  const [isDescriptionTruncated, toggleIsDescriptionTruncated] = useReducer((x) => !x, true)\n  const truncatedDescription = truncateDescription(description ?? '', characterCount)\n  const shouldTruncate = !!description && description.length > characterCount\n  const showTruncatedDescription = shouldTruncate && isDescriptionTruncated\n  const { inputTax: sellFee, outputTax: buyFee } = useSwapTaxes(tokenAddress, tokenAddress)\n  const { formatPercent } = useFormatter()\n  const { sellFeeString, buyFeeString } = {\n    sellFeeString: formatPercent(sellFee),\n    buyFeeString: formatPercent(buyFee),\n  }\n  const hasFee = Boolean(parseFloat(sellFeeString)) || Boolean(parseFloat(buyFee.toFixed(2)))\n  const sameFee = sellFeeString === buyFeeString\n\n  return (\n    <TokenInfoSection>\n      <ThemedText.HeadlineSmall>\n        <Trans>Info</Trans>\n      </ThemedText.HeadlineSmall>\n      <TokenButtonRow>\n        {!isNative && (\n          <TokenInfoButton tokenColor={color} onClick={copy}>\n            <Copy width=\"18px\" height=\"18px\" color={color} />\n            {shortenAddress(tokenAddress)}\n          </TokenInfoButton>\n        )}\n        <ExternalLink href={explorerUrl}>\n          <TokenInfoButton tokenColor={color}>\n            <EtherscanLogo width=\"18px\" height=\"18px\" fill={color} />\n            {chainId === ChainId.MAINNET ? <Trans>Etherscan</Trans> : <Trans>Explorer</Trans>}\n          </TokenInfoButton>\n        </ExternalLink>\n        {!!tokenProject?.homepageUrl && (\n          <ExternalLink href={tokenProject.homepageUrl}>\n            <TokenInfoButton tokenColor={color}>\n              <Globe width=\"18px\" height=\"18px\" fill={color} />\n              <Trans>Website</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n        {!!tokenProject?.twitterName && (\n          <ExternalLink href={`https://x.com/${tokenProject.twitterName}`}>\n            <TokenInfoButton tokenColor={color}>\n              <TwitterXLogo width=\"18px\" height=\"18px\" fill={color} />\n              <Trans>Twitter</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n      </TokenButtonRow>\n      <TokenDescriptionContainer>\n        {!description && (\n          <NoInfoAvailable>\n            <Trans>No token information available</Trans>\n          </NoInfoAvailable>\n        )}\n        {description && (\n          <>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-full\" $visible={!showTruncatedDescription}>\n              {description}\n            </DescriptionVisibilityWrapper>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-truncated\" $visible={showTruncatedDescription}>\n              {truncatedDescription}\n            </DescriptionVisibilityWrapper>\n          </>\n        )}\n        {shouldTruncate && (\n          <TruncateDescriptionButton\n            onClick={toggleIsDescriptionTruncated}\n            data-testid=\"token-description-show-more-button\"\n          >\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\n          </TruncateDescriptionButton>\n        )}\n      </TokenDescriptionContainer>\n      {hasFee && (\n        <MouseoverTooltip\n          placement=\"left\"\n          size={TooltipSize.Small}\n          text={\n            <ThemedText.Caption color=\"neutral2\">\n              <FOTTooltipContent />\n            </ThemedText.Caption>\n          }\n        >\n          <Column gap=\"sm\">\n            {sameFee ? (\n              <ThemedText.BodyPrimary>\n                {tokenQuery?.token?.symbol}&nbsp;\n                <Trans>fee:</Trans>&nbsp;{sellFeeString}\n              </ThemedText.BodyPrimary>\n            ) : (\n              <>\n                <ThemedText.BodyPrimary>\n                  {tokenQuery?.token?.symbol}&nbsp;\n                  <Trans>buy fee:</Trans>&nbsp;{buyFeeString}\n                </ThemedText.BodyPrimary>{' '}\n                <ThemedText.BodyPrimary>\n                  {tokenQuery?.token?.symbol}&nbsp;\n                  <Trans>sell fee:</Trans>&nbsp;{sellFeeString}\n                </ThemedText.BodyPrimary>{' '}\n              </>\n            )}\n          </Column>\n        </MouseoverTooltip>\n      )}\n    </TokenInfoSection>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Trace } from 'analytics'\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\nimport { BreadcrumbNavContainer, BreadcrumbNavLink, CurrentPageBreadcrumb } from 'components/BreadcrumbNav'\nimport ShareButton from 'components/BreadcrumbNav/ShareButton'\nimport { ChartType, PriceChartType } from 'components/Charts/utils'\nimport { useCachedPortfolioBalancesQuery } from 'components/PrefetchBalancesWrapper/PrefetchBalancesWrapper'\nimport { AboutSection } from 'components/Tokens/TokenDetails/About'\nimport AddressSection from 'components/Tokens/TokenDetails/AddressSection'\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\nimport TokenDetailsSkeleton, {\n  LeftPanel,\n  RightPanel,\n  TokenDetailsLayout,\n  TokenInfoContainer,\n  TokenNameCell,\n} from 'components/Tokens/TokenDetails/Skeleton'\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport { NATIVE_CHAIN_ID, nativeOnChain } from 'constants/tokens'\nimport { checkWarning } from 'constants/tokenSafety'\nimport { useInfoExplorePageEnabled } from 'featureFlags/flags/infoExplore'\nimport { useInfoTDPEnabled } from 'featureFlags/flags/infoTDP'\nimport {\n  Chain,\n  PortfolioTokenBalancePartsFragment,\n  TokenPriceQuery,\n  TokenQuery,\n} from 'graphql/data/__generated__/types-and-hooks'\nimport { TokenQueryData } from 'graphql/data/Token'\nimport {\n  getTokenDetailsURL,\n  gqlToCurrency,\n  InterfaceGqlChain,\n  supportedChainIdFromGQLChain,\n  TimePeriod,\n} from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useColor } from 'hooks/useColor'\nimport { useOnGlobalChainSwitch } from 'hooks/useGlobalChainSwitch'\nimport { UNKNOWN_TOKEN_SYMBOL, useTokenFromActiveNetwork } from 'lib/hooks/useCurrency'\nimport { Swap } from 'pages/Swap'\nimport { useCallback, useMemo, useState, useTransition } from 'react'\nimport { ArrowLeft, ChevronRight } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { CurrencyState } from 'state/swap/SwapContext'\nimport styled, { css, useTheme } from 'styled-components'\nimport { EllipsisStyle } from 'theme/components'\nimport { isAddress } from 'utils'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\n\nimport { ActivitySection } from './ActivitySection'\nimport BalanceSummary from './BalanceSummary'\nimport { AdvancedPriceChartToggle } from './ChartTypeSelectors/AdvancedPriceChartToggle'\nimport ChartTypeSelector from './ChartTypeSelectors/ChartTypeSelector'\nimport InvalidTokenDetails from './InvalidTokenDetails'\nimport MobileBalanceSummaryFooter from './MobileBalanceSummaryFooter'\nimport { Hr } from './shared'\nimport { TokenDescription } from './TokenDescription'\n\nconst TokenSymbol = styled.span<{ isInfoTDPEnabled?: boolean }>`\n  text-transform: uppercase;\n  color: ${({ theme }) => theme.neutral2};\n  margin-left: 8px;\n\n  ${({ isInfoTDPEnabled }) =>\n    isInfoTDPEnabled &&\n    css`\n      @media screen and (max-width: ${({ theme }) => theme.breakpoint.xs}px) {\n        display: none;\n      }\n    `}\n`\nconst ChartActions = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`\nconst TokenTitle = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  display: flex;\n\n  ${({ isInfoTDPEnabled }) =>\n    isInfoTDPEnabled\n      ? css`\n          overflow: hidden;\n          white-space: nowrap;\n        `\n      : css`\n          @media screen and (max-width: ${({ theme }) => theme.breakpoint.md}px) {\n            display: inline;\n          }\n        `}\n`\nconst TokenName = styled.span`\n  ${EllipsisStyle}\n  min-width: 40px;\n`\nconst DividerLine = styled(Hr)`\n  margin-top: 40px;\n  margin-bottom: 40px;\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    display: none;\n  }\n`\n\nfunction useOnChainToken(address: string | undefined, skip: boolean) {\n  const token = useTokenFromActiveNetwork(skip || !address ? undefined : address)\n\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\n    return undefined\n  } else {\n    return token\n  }\n}\n\n// Selects most relevant token based on data available, preferring native > query > on-chain\n// Token will be null if still loading from on-chain, and undefined if unavailable\nfunction useRelevantToken(\n  address: string | undefined,\n  pageChainId: number,\n  tokenQueryData: TokenQueryData | undefined\n) {\n  const { chainId: activeChainId } = useWeb3React()\n  const queryToken = useMemo(() => {\n    if (!address) return undefined\n    if (address === NATIVE_CHAIN_ID) return nativeOnChain(pageChainId)\n    if (tokenQueryData) return gqlToCurrency(tokenQueryData)\n    return undefined\n  }, [pageChainId, address, tokenQueryData])\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\n  const skipOnChainFetch = Boolean(queryToken) || pageChainId !== activeChainId\n  const onChainToken = useOnChainToken(address, skipOnChainFetch)\n\n  return useMemo(\n    () => ({ token: queryToken ?? onChainToken, didFetchFromChain: !queryToken }),\n    [onChainToken, queryToken]\n  )\n}\n\nfunction getCurrencyURLAddress(currency?: Currency): string {\n  if (!currency) return ''\n\n  if (currency.isToken) {\n    return currency.address\n  }\n  return NATIVE_CHAIN_ID\n}\n\nexport type MultiChainMap = { [chain: string]: { address?: string; balance?: PortfolioTokenBalancePartsFragment } }\ntype TokenDetailsProps = {\n  urlAddress?: string\n  inputTokenAddress?: string\n  chain: InterfaceGqlChain\n  tokenQuery: TokenQuery\n  tokenPriceQuery?: TokenPriceQuery\n  timePeriod: TimePeriod\n  onChangeTimePeriod: (t: TimePeriod) => void\n}\nexport default function TokenDetails({\n  urlAddress,\n  inputTokenAddress,\n  chain,\n  tokenQuery,\n  tokenPriceQuery,\n  timePeriod,\n  onChangeTimePeriod,\n}: TokenDetailsProps) {\n  if (!urlAddress) {\n    throw new Error('Invalid token details route: tokenAddress param is undefined')\n  }\n  const address = useMemo(\n    () => (urlAddress === NATIVE_CHAIN_ID ? urlAddress : isAddress(urlAddress) || undefined),\n    [urlAddress]\n  )\n\n  const { account, chainId: connectedChainId } = useWeb3React()\n\n\n  const pageChainId = supportedChainIdFromGQLChain(chain)\n  const inputCurrency = useCurrency(inputTokenAddress, pageChainId)\n  const outputCurrency = useCurrency(address === NATIVE_CHAIN_ID ? 'ETH' : address, pageChainId)\n\n  const tokenQueryData = tokenQuery.token\n  const { data: balanceQuery } = useCachedPortfolioBalancesQuery({ account })\n\n  const multiChainMap = useMemo(() => {\n\n    if (!balanceQuery) return null\n    const tokenBalances = balanceQuery?.portfolios?.[0].tokenBalances\n    const tokensAcrossChains = tokenQueryData?.project?.tokens\n    if (!tokensAcrossChains) return {}\n    return tokensAcrossChains.reduce((map, current) => {\n      if (current) {\n        if (!map[current.chain]) {\n          map[current.chain] = {}\n        }\n        map[current.chain].address = current.address\n        map[current.chain].balance = tokenBalances?.find((tokenBalance) => tokenBalance.token?.id === current.id)\n      }\n      return map\n    }, {} as MultiChainMap)\n  }, [balanceQuery?.portfolios, tokenQueryData?.project?.tokens])\n\n  const { token: detailedToken, didFetchFromChain } = useRelevantToken(address, pageChainId, tokenQueryData)\n\n  const tokenWarning = address ? checkWarning(address) : null\n  const isBlockedToken = tokenWarning?.canProceed === false\n  const navigate = useNavigate()\n\n  const theme = useTheme()\n  const extractedColor = useColor(detailedToken ?? undefined, theme.surface2, theme.darkMode)\n\n  const isInfoExplorePageEnabled = useInfoExplorePageEnabled()\n  const isInfoTDPEnabled = useInfoTDPEnabled()\n\n  // Wrapping navigate in a transition prevents Suspense from unnecessarily showing fallbacks again.\n  const [isPending, startTokenTransition] = useTransition()\n  // const navigateToTokenForChain = useCallback(\n  //   (update: Chain) => {\n  //     if (!address) return\n  //     const bridgedAddress = multiChainMap[update]?.address\n  //     if (bridgedAddress) {\n  //       startTokenTransition(() =>\n  //         navigate(\n  //           getTokenDetailsURL({\n  //             address: bridgedAddress,\n  //             chain: update,\n  //             isInfoExplorePageEnabled,\n  //           })\n  //         )\n  //       )\n  //     } else if (didFetchFromChain || detailedToken?.isNative) {\n  //       startTokenTransition(() => navigate(getTokenDetailsURL({ address, chain: update, isInfoExplorePageEnabled })))\n  //     }\n  //   },\n  //   [address, multiChainMap, didFetchFromChain, detailedToken?.isNative, navigate, isInfoExplorePageEnabled]\n  // )\n  // useOnGlobalChainSwitch(navigateToTokenForChain)\n\n  const handleCurrencyChange = useCallback(\n    (tokens: CurrencyState) => {\n      const inputCurrencyURLAddress = getCurrencyURLAddress(tokens.inputCurrency)\n      const outputCurrencyURLAddress = getCurrencyURLAddress(tokens.outputCurrency)\n      if (\n        addressesAreEquivalent(inputCurrencyURLAddress, address) ||\n        addressesAreEquivalent(outputCurrencyURLAddress, address)\n      ) {\n        return\n      }\n\n      const newDefaultToken = tokens.outputCurrency ?? tokens.inputCurrency\n      if (!newDefaultToken) return\n\n      startTokenTransition(() =>\n        navigate(\n          getTokenDetailsURL({\n            // The function falls back to \"NATIVE\" if the address is null\n            address: newDefaultToken.isNative ? null : newDefaultToken.address,\n            chain,\n            inputAddress:\n              // If only one token was selected before we navigate, then it was the default token and it's being replaced.\n              // On the new page, the *new* default token becomes the output, and we don't have another option to set as the input token.\n              tokens.inputCurrency && tokens.inputCurrency !== newDefaultToken ? inputCurrencyURLAddress : null,\n            isInfoExplorePageEnabled,\n          })\n        )\n      )\n    },\n    [address, chain, isInfoExplorePageEnabled, navigate]\n  )\n\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\n\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\n\n  const onResolveSwap = useCallback(\n    (value: boolean) => {\n      continueSwap?.resolve(value)\n      setContinueSwap(undefined)\n    },\n    [continueSwap, setContinueSwap]\n  )\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.PRICE)\n  const [priceChartType, setPriceChartType] = useState<PriceChartType>(PriceChartType.LINE)\n\n  // address will never be undefined if token is defined; address is checked here to appease typechecker\n  if (detailedToken === undefined || !address) {\n    return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!address} />\n  }\n  const tokenSymbolName = detailedToken && (detailedToken.symbol ?? <Trans>Symbol not found</Trans>)\n  const twitterShareName =\n    detailedToken && detailedToken.name && detailedToken.symbol\n      ? `${detailedToken.name} (${detailedToken.symbol})`\n      : detailedToken?.name || detailedToken?.symbol || ''\n\n  return (\n    <Trace\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\n      properties={{ tokenAddress: address, tokenName: detailedToken?.name }}\n      shouldLogImpression\n    >\n      <TokenDetailsLayout>\n        {detailedToken && !isPending ? (\n          <LeftPanel>\n            {isInfoTDPEnabled ? (\n              <BreadcrumbNavContainer isInfoTDPEnabled aria-label=\"breadcrumb-nav\">\n                <BreadcrumbNavLink to={`/explore/${chain.toLowerCase()}`}>\n                  <Trans>Explore</Trans> <ChevronRight size={14} />\n                </BreadcrumbNavLink>\n                <BreadcrumbNavLink to={`/explore/tokens/${chain.toLowerCase()}`}>\n                  <Trans>Tokens</Trans> <ChevronRight size={14} />\n                </BreadcrumbNavLink>\n                <CurrentPageBreadcrumb address={address} currency={detailedToken} chainId={detailedToken.chainId} />\n              </BreadcrumbNavContainer>\n            ) : (\n              <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\n                <BreadcrumbNavLink to={`${isInfoExplorePageEnabled ? '/explore' : ''}/tokens/${chain.toLowerCase()}`}>\n                  <ArrowLeft data-testid=\"token-details-return-button\" size={14} /> Tokens\n                </BreadcrumbNavLink>\n              </BreadcrumbNavContainer>\n            )}\n            <TokenInfoContainer isInfoTDPEnabled={isInfoTDPEnabled} data-testid=\"token-info-container\">\n              <TokenNameCell isInfoTDPEnabled={isInfoTDPEnabled}>\n                <PortfolioLogo currencies={[detailedToken]} chainId={detailedToken.chainId} size=\"32px\" />\n                {isInfoTDPEnabled ? (\n                  <TokenTitle isInfoTDPEnabled>\n                    <TokenName>{detailedToken.name ?? <Trans>Name not found</Trans>}</TokenName>\n                    <TokenSymbol isInfoTDPEnabled>{tokenSymbolName}</TokenSymbol>\n                  </TokenTitle>\n                ) : (\n                  <TokenTitle>\n                    {detailedToken.name ?? <Trans>Name not found</Trans>}\n                    <TokenSymbol>{tokenSymbolName}</TokenSymbol>\n                  </TokenTitle>\n                )}\n              </TokenNameCell>\n              {/* <ChartActions>\n                {isInfoTDPEnabled ? (\n                  <>\n                    {chartType === ChartType.PRICE && (\n                      <AdvancedPriceChartToggle\n                        currentChartType={priceChartType}\n                        onChartTypeChange={setPriceChartType}\n                      />\n                    )}\n\n                    <ChartTypeSelector\n                      options={[ChartType.PRICE, ChartType.VOLUME, ChartType.TVL]}\n                      currentChartType={chartType}\n                      onChartTypeChange={(c: ChartType) => {\n                        setChartType(c)\n                        if (c === ChartType.PRICE) setPriceChartType(PriceChartType.LINE)\n                      }}\n                    />\n                  </>\n                ) : (\n                  <ShareButton name={twitterShareName} />\n                )}\n              </ChartActions> */}\n            </TokenInfoContainer>\n            {/* <ChartSection\n              chartType={chartType}\n              priceChartType={priceChartType}\n              timePeriod={timePeriod}\n              onChangeTimePeriod={onChangeTimePeriod}\n              tokenPriceQuery={tokenPriceQuery}\n              extractedColor={extractedColor}\n            /> */}\n\n            <StatsSection chainId={pageChainId} address={address} tokenQueryData={tokenQueryData} />\n            {!isInfoTDPEnabled && (\n              <>\n                <Hr />\n                <AboutSection\n                  address={address}\n                  chainId={pageChainId}\n                  description={tokenQueryData?.project?.description}\n                  homepageUrl={tokenQueryData?.project?.homepageUrl}\n                  twitterName={tokenQueryData?.project?.twitterName}\n                />\n                {!detailedToken.isNative && <AddressSection address={address} />}\n              </>\n            )}\n            {isInfoTDPEnabled && (\n              <>\n                <DividerLine />\n                <ActivitySection chainId={pageChainId} referenceToken={detailedToken.wrapped} />\n              </>\n            )}\n          </LeftPanel>\n        ) : (\n          <TokenDetailsSkeleton />\n        )}\n\n        <RightPanel isInfoTDPEnabled={isInfoTDPEnabled} onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}>\n          <div style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}>\n            <Swap\n              chainId={pageChainId}\n              initialInputCurrency={inputCurrency}\n              initialOutputCurrency={outputCurrency}\n              onCurrencyChange={handleCurrencyChange}\n              disableTokenInputs={pageChainId !== connectedChainId}\n            />\n          </div>\n          {tokenWarning && <TokenSafetyMessage tokenAddress={address} warning={tokenWarning} />}\n          {/* {detailedToken && <BalanceSummary currency={detailedToken} chain={chain} multiChainMap={multiChainMap} />} */}\n          {isInfoTDPEnabled && (\n            <TokenDescription\n              tokenAddress={address}\n              chainId={pageChainId}\n              isNative={detailedToken?.isNative}\n              characterCount={200}\n            />\n          )}\n        </RightPanel>\n        {/* {detailedToken && (\n          <MobileBalanceSummaryFooter currency={detailedToken} pageChainBalance={multiChainMap[chain].balance} />\n        )} */}\n\n        <TokenSafetyModal\n          isOpen={openTokenSafetyModal || !!continueSwap}\n          tokenAddress={address}\n          onContinue={() => onResolveSwap(true)}\n          onBlocked={() => {\n            setOpenTokenSafetyModal(false)\n          }}\n          onCancel={() => onResolveSwap(false)}\n          showCancel={true}\n        />\n      </TokenDetailsLayout>\n    </Trace>\n  )\n}\n","import { t } from '@lingui/macro'\nimport { TokenQuery } from 'graphql/data/__generated__/types-and-hooks'\n\nexport const getTokenPageTitle = (tokenQuery: TokenQuery, omitSearchDetail?: boolean) => {\n  const tokenName = tokenQuery?.token?.name\n  const tokenSymbol = tokenQuery?.token?.symbol\n  const baseTitle = 'Buy & Trade'\n  const searchDetail = omitSearchDetail ? '' : ': Live Price & Chart on Goblins'\n  if (!tokenName && !tokenSymbol) {\n    return t`${baseTitle}${searchDetail}`\n  }\n  if (!tokenName && tokenSymbol) {\n    return t`${baseTitle} ${tokenSymbol}${searchDetail}`\n  }\n  if (tokenName && !tokenSymbol) {\n    return t`${baseTitle} ${tokenName}${searchDetail}`\n  }\n  return t`${baseTitle} ${tokenName} (${tokenSymbol})${searchDetail}`\n}\n","import PrefetchBalancesWrapper from 'components/PrefetchBalancesWrapper/PrefetchBalancesWrapper'\nimport TokenDetails from 'components/Tokens/TokenDetails'\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { useTokenPriceQuery, useTokenQuery } from 'graphql/data/types-and-hooks'\nimport { TimePeriod, toHistoryDuration, validateUrlChainParam } from 'graphql/data/util'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useEffect, useMemo, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nimport { getTokenPageTitle } from './utils'\nimport { chainToApolloClient } from 'graphql/thegraph/apollo'\nimport { ChainId } from '@uniswap/sdk-core'\n\nconst StyledPrefetchBalancesWrapper = styled(PrefetchBalancesWrapper)`\n  display: contents;\n`\n\nexport default function TokenDetailsPage() {\n  const { tokenAddress, chainName } = useParams<{\n    tokenAddress: string\n    chainName?: string\n  }>()\n  const chain = validateUrlChainParam(chainName)\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\n\n\n  console.log(chain, \"<===chain\")\n\n  const apolloClient = chainToApolloClient[ChainId.SMARTBCH]\n\n   \n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.DAY)\n  const [detailedTokenAddress, duration] = useMemo(\n    // tokenAddress will always be defined in the path for for this page to render, but useParams will always\n    // return optional arguments; nullish coalescing operator is present here to appease typechecker\n    () => [isNative ? getNativeTokenDBAddress(chain) : tokenAddress ?? '', toHistoryDuration(timePeriod)],\n    [chain, isNative, timePeriod, tokenAddress]\n  )\n\n  const parsedQs = useParsedQueryString()\n\n  const parsedInputTokenAddress: string | undefined = useMemo(() => {\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\n  }, [parsedQs]);\n\n  const { data: tokenQuery } = useTokenQuery({\n    client: apolloClient,\n    variables: {\n      address: detailedTokenAddress,\n\n    },\n    errorPolicy: 'all',\n  })\n\n  const { data: tokenPriceQuery } = useTokenPriceQuery({\n    variables: {\n      address: detailedTokenAddress,\n      chain,\n      duration,\n    },\n    errorPolicy: 'all',\n  })\n\n  // Saves already-loaded chart data into state to display while tokenPriceQuery is undefined timePeriod input changes\n  const [currentPriceQuery, setCurrentPriceQuery] = useState(tokenPriceQuery)\n  useEffect(() => {\n    if (tokenPriceQuery) setCurrentPriceQuery(tokenPriceQuery)\n  }, [setCurrentPriceQuery, tokenPriceQuery])\n\n\n  if (!tokenQuery) return <TokenDetailsPageSkeleton />\n\n  return (\n    <StyledPrefetchBalancesWrapper shouldFetchOnAccountUpdate={true} shouldFetchOnHover={false}>\n      <Helmet>\n        <title>{getTokenPageTitle(tokenQuery)}</title>\n      </Helmet>\n      <TokenDetails\n        urlAddress={tokenAddress}\n        chain={chain}\n        tokenQuery={tokenQuery}\n        tokenPriceQuery={currentPriceQuery}\n        inputTokenAddress={parsedInputTokenAddress}\n        timePeriod={timePeriod}\n        onChangeTimePeriod={setTimePeriod}\n      />\n    </StyledPrefetchBalancesWrapper>\n  )\n}\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\n  if (!a || !b) return false\n  return a === b || a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["ContractAddressSection","styled","div","theme","neutral2","ContractAddress","button","neutral1","AddressSection","address","ThemedText","SubHeaderSmall","CopyContractAddress","truncatedAddress","shortenAddress","Label","backgroundColor","surface3","color","TitleRow","Title","Text","DetailsRow","StyledLink","ExternalLink","accent1","TokenSafetyMessage","warning","tokenAddress","useTokenWarningColor","level","textColor","useTokenWarningTextColor","heading","description","getWarningCopy","data-cy","displayWarningLabel","canProceed","AlertTriangle","size","Slash","marginLeft","message","Boolean","href","TOKEN_SAFETY_ARTICLE","gql","HIDDEN_COLUMNS","PoolTableColumns","Transactions","TokenDetailsPoolsTable","chainId","referenceToken","sortState","setSortMethod","useState","sortBy","Pool_OrderBy","TotalValueLockedUsd","sortDirection","OrderDirection","Desc","pools","loading","error","loadMore","orderBy","orderDirection","apolloClient","chainToApolloClient","ChainId","MAINNET","data","fetchMore","usePoolsFromTokenAddressQuery","variables","toLowerCase","client","fetchPolicy","loadingMore","useRef","useCallback","onComplete","current","skip","length","updateQuery","prev","fetchMoreResult","Object","keys","mergedData","useMemo","map","topPool","rand","Math","random","tvl","parseFloat","totalValueLockedUSD","hash","id","token0","token1","txCount","feeTier","volume24h","volumeWeek","turnover","sort","a","b","usePoolsFromTokenAddress","handleHeaderClick","newSortMethod","Asc","BodyPrimary","data-testid","PoolsTable","maxHeight","hiddenColumns","TokenTransactionType","BUY","SELL","StyledSwapAmount","EllipsisStyle","TransactionsTable","locale","useActiveLocale","activeLocalCurrency","useActiveLocalCurrency","formatNumber","formatFiatPrice","useFormatter","chainName","validateUrlChainParam","useParams","filterModalIsOpen","toggleFilterModal","useReducer","s","filterModalRef","useOnClickOutside","undefined","filter","setFilters","Swap_OrderBy","Timestamp","transactions","first","useTokenTransactionsQuery","max","swapsAs0","swapsAs1","swap","amount0","includes","amount1","timestamp","useTokenTransactions","transaction","swapLeg0","pool","symbol","amount","swapLeg1","input","output","usdValue","amountUSD","makerAddress","origin","columns","columnHelper","createColumnHelper","accessor","row","header","Cell","minWidth","justifyContent","grow","ClickableHeaderRow","$justify","onClick","HeaderArrow","direction","BodySecondary","cell","getLocaleTimeString","Number","getValue","DEFAULT_LOCALE","FilterHeaderRow","modalOpen","ref","Filter","allFilters","values","activeFilter","isOpen","outputTokenAddress","String","inputTokenAmount","abs","nonReferenceSwapLeg","StyledInternalLink","to","swapOutput","AmountUsd","fiat","price","StyledExternalLink","getExplorerLink","ExplorerDataType","ADDRESS","Table","Container","Tab","isActive","ClickableStyle","ActivitySection","activityInView","setActivityInView","ActivityTab","Pools","Row","gap","marginBottom","Txs","_path","_extends","assign","bind","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","SvgEye","_ref","svgRef","title","titleId","props","xmlns","width","height","viewBox","fill","d","ForwardRef","InvalidDetailsContainer","InvalidDetailsText","span","TokenExploreButton","ButtonPrimary","InvalidTokenDetails","pageChainId","isInvalidAddress","useWeb3React","navigate","useNavigate","selectChain","useSelectChain","isNonExistantToken","connectedChainLabel","getChainInfo","label","EyeIcon","SubHeader","Globe","svg","stroke","path","TwitterXLogo","TokenInfoSection","Column","BREAKPOINTS","lg","sm","TokenNameRow","TokenButtonRow","TokenInfoButton","tokenColor","opacify","TokenDescriptionContainer","DescriptionVisibilityWrapper","p","$visible","TRUNCATE_CHARACTER_COUNT","TokenDescription","isNative","characterCount","useTheme","chainIdToBackendName","tokenQuery","useTokenProjectQuery","getNativeTokenDBAddress","chain","errorPolicy","tokenProject","token","project","explorerUrl","NATIVE","TOKEN","setCopied","useCopyClipboard","copy","isDescriptionTruncated","toggleIsDescriptionTruncated","x","truncatedDescription","truncateDescription","shouldTruncate","showTruncatedDescription","inputTax","sellFee","outputTax","buyFee","useSwapTaxes","formatPercent","sellFeeString","buyFeeString","hasFee","toFixed","sameFee","HeadlineSmall","Copy","EtherscanLogo","homepageUrl","twitterName","NoInfoAvailable","TruncateDescriptionButton","MouseoverTooltip","placement","TooltipSize","Small","text","Caption","FOTTooltipContent","TokenSymbol","isInfoTDPEnabled","css","breakpoint","xs","TokenTitle","md","TokenName","DividerLine","Hr","useRelevantToken","tokenQueryData","activeChainId","queryToken","NATIVE_CHAIN_ID","nativeOnChain","gqlToCurrency","skipOnChainFetch","onChainToken","useTokenFromActiveNetwork","UNKNOWN_TOKEN_SYMBOL","useOnChainToken","didFetchFromChain","getCurrencyURLAddress","currency","isToken","TokenDetails","urlAddress","inputTokenAddress","tokenPriceQuery","timePeriod","onChangeTimePeriod","Error","isAddress","account","connectedChainId","supportedChainIdFromGQLChain","inputCurrency","useCurrency","outputCurrency","balanceQuery","useCachedPortfolioBalancesQuery","detailedToken","tokenBalances","portfolios","tokensAcrossChains","tokens","reduce","balance","find","tokenBalance","tokenWarning","checkWarning","isBlockedToken","isInfoExplorePageEnabled","useColor","surface2","darkMode","useInfoExplorePageEnabled","useInfoTDPEnabled","isPending","startTokenTransition","useTransition","handleCurrencyChange","inputCurrencyURLAddress","outputCurrencyURLAddress","addressesAreEquivalent","newDefaultToken","getTokenDetailsURL","inputAddress","continueSwap","setContinueSwap","openTokenSafetyModal","setOpenTokenSafetyModal","onResolveSwap","value","resolve","chartType","setChartType","ChartType","PRICE","priceChartType","setPriceChartType","PriceChartType","LINE","tokenSymbolName","name","Trace","page","InterfacePageName","TOKEN_DETAILS_PAGE","properties","tokenName","shouldLogImpression","TokenDetailsLayout","LeftPanel","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","ChevronRight","CurrentPageBreadcrumb","ArrowLeft","TokenInfoContainer","TokenNameCell","PortfolioLogo","currencies","StatsSection","AboutSection","wrapped","TokenDetailsSkeleton","RightPanel","style","pointerEvents","Swap","initialInputCurrency","initialOutputCurrency","onCurrencyChange","disableTokenInputs","TokenSafetyModal","onContinue","onBlocked","onCancel","showCancel","getTokenPageTitle","omitSearchDetail","tokenSymbol","baseTitle","searchDetail","StyledPrefetchBalancesWrapper","PrefetchBalancesWrapper","TokenDetailsPage","console","log","SMARTBCH","setTimePeriod","TimePeriod","DAY","detailedTokenAddress","duration","toHistoryDuration","parsedQs","useParsedQueryString","parsedInputTokenAddress","useTokenQuery","useTokenPriceQuery","currentPriceQuery","setCurrentPriceQuery","useEffect","shouldFetchOnAccountUpdate","shouldFetchOnHover","Helmet","TokenDetailsPageSkeleton"],"sourceRoot":""}