{"version":3,"file":"static/js/5813.db9739a1.chunk.js","mappings":"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","sources":["components/Toggle/MultiToggle.tsx","components/RateToggle/index.tsx","hooks/useV3PositionFees.ts","hooks/usePositionTokenURI.ts","pages/Pool/PositionPage.tsx"],"sourcesContent":["import styled from 'styled-components'\n\nexport const ToggleWrapper = styled.button<{ width?: string }>`\n  display: flex;\n  align-items: center;\n  width: ${({ width }) => width ?? '100%'};\n  padding: 1px;\n  background: ${({ theme }) => theme.surface2};\n  border-radius: 8px;\n  border: ${({ theme }) => '1px solid ' + theme.surface3};\n  cursor: pointer;\n  outline: none;\n`\n\nexport const ToggleElement = styled.span<{ isActive?: boolean; fontSize?: string }>`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 4px 0.5rem;\n  border-radius: 6px;\n  justify-content: center;\n  height: 100%;\n  background: ${({ theme, isActive }) => (isActive ? theme.surface1 : 'none')};\n  color: ${({ theme, isActive }) => (isActive ? theme.neutral1 : theme.neutral3)};\n  font-size: ${({ fontSize }) => fontSize ?? '1rem'};\n  font-weight: 535;\n  white-space: nowrap;\n  :hover {\n    user-select: initial;\n    color: ${({ theme, isActive }) => (isActive ? theme.neutral2 : theme.neutral3)};\n  }\n`\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { ToggleElement, ToggleWrapper } from 'components/Toggle/MultiToggle'\n\n// the order of displayed base currencies from left to right is always in sort order\n// currencyA is treated as the preferred base currency\nexport default function RateToggle({\n  currencyA,\n  currencyB,\n  handleRateToggle,\n}: {\n  currencyA: Currency\n  currencyB: Currency\n  handleRateToggle: () => void\n}) {\n  const tokenA = currencyA?.wrapped\n  const tokenB = currencyB?.wrapped\n\n  const isSorted = tokenA && tokenB && tokenA.sortsBefore(tokenB)\n\n  return tokenA && tokenB ? (\n    <div style={{ width: 'fit-content', display: 'flex', alignItems: 'center' }} onClick={handleRateToggle}>\n      <ToggleWrapper width=\"fit-content\">\n        <ToggleElement isActive={isSorted} fontSize=\"12px\">\n          <Trans>{isSorted ? currencyA.symbol : currencyB.symbol}</Trans>\n        </ToggleElement>\n        <ToggleElement isActive={!isSorted} fontSize=\"12px\">\n          <Trans>{isSorted ? currencyB.symbol : currencyA.symbol}</Trans>\n        </ToggleElement>\n      </ToggleWrapper>\n    </div>\n  ) : null\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useBlockNumber from 'lib/hooks/useBlockNumber'\nimport { useEffect, useState } from 'react'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // we can't use multicall for this because we need to simulate the call from a specific address\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber] | undefined>()\n  useEffect(() => {\n    ;(async function getFees() {\n      if (positionManager && tokenIdHexString && owner) {\n        try {\n          const results = await positionManager.callStatic.collect(\n            {\n              tokenId: tokenIdHexString,\n              recipient: owner, // some tokens might fail if transferred to address(0)\n              amount0Max: MAX_UINT128,\n              amount1Max: MAX_UINT128,\n            },\n            { from: owner } // need to simulate the call as the owner\n          )\n          setAmounts([results.amount0, results.amount1])\n        } catch {\n          // If the static call fails, the default state will remain for `amounts`.\n          // This case is handled by returning unclaimed fees as empty.\n          // TODO(WEB-2283): Look into why we have failures with call data being 0x.\n        }\n      }\n    })()\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token0 : unwrappedToken(pool.token0), amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(asWETH ? pool.token1 : unwrappedToken(pool.token1), amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport JSBI from 'jsbi'\nimport { NEVER_RELOAD, useSingleCallResult } from 'lib/hooks/multicall'\nimport { useMemo } from 'react'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ntype TokenId = number | JSBI | BigNumber\n\nconst STARTS_WITH = 'data:application/json;base64,'\n\ntype UsePositionTokenURIResult =\n  | {\n      valid: true\n      loading: false\n      result: {\n        name: string\n        description: string\n        image: string\n      }\n    }\n  | {\n      valid: false\n      loading: false\n    }\n  | {\n      valid: true\n      loading: true\n    }\n\nexport function usePositionTokenURI(tokenId: TokenId | undefined): UsePositionTokenURIResult {\n  const contract = useV3NFTPositionManagerContract()\n  const inputs = useMemo(\n    () => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId?.toString(16)],\n    [tokenId]\n  )\n  const { result, error, loading, valid } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3_000_000,\n  })\n\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true,\n      }\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    const [tokenURI] = result as [string]\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH))\n      return {\n        valid: false,\n        loading: false,\n      }\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)))\n\n      return {\n        valid: true,\n        loading: false,\n        result: json,\n      }\n    } catch (error) {\n      return { valid: false, loading: false }\n    }\n  }, [error, loading, result, tokenId, valid])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { TransactionResponse } from '@ethersproject/providers'\nimport { t, Trans } from '@lingui/macro'\nimport { InterfacePageName, LiquidityEventName, LiquiditySource } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Fraction, Percent, Price, Token } from '@uniswap/sdk-core'\nimport { NonfungiblePositionManager, Pool, Position } from '@uniswap/v3-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { sendAnalyticsEvent, Trace } from 'analytics'\nimport Badge from 'components/Badge'\nimport { ButtonConfirmed, ButtonGray, ButtonPrimary } from 'components/Button'\nimport { DarkCard, LightCard } from 'components/Card'\nimport { AutoColumn } from 'components/Column'\nimport DoubleCurrencyLogo from 'components/DoubleLogo'\nimport { LoadingFullscreen } from 'components/Loader/styled'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport { RowBetween, RowFixed } from 'components/Row'\nimport { Dots } from 'components/swap/styled'\nimport Toggle from 'components/Toggle'\nimport TransactionConfirmationModal, { ConfirmationModalContent } from 'components/TransactionConfirmationModal'\nimport { CHAIN_IDS_TO_NAMES, isSupportedChain } from 'constants/chains'\nimport { useInfoExplorePageEnabled } from 'featureFlags/flags/infoExplore'\nimport { chainIdToBackendName, getTokenDetailsURL, isGqlSupportedChain } from 'graphql/data/util'\nimport { useToken } from 'hooks/Tokens'\nimport { useV3NFTPositionManagerContract } from 'hooks/useContract'\nimport useIsTickAtLimit from 'hooks/useIsTickAtLimit'\nimport { PoolState, usePool } from 'hooks/usePools'\nimport useStablecoinPrice from 'hooks/useStablecoinPrice'\nimport { useV3PositionFees } from 'hooks/useV3PositionFees'\nimport { useV3PositionFromTokenId } from 'hooks/useV3Positions'\nimport { useSingleCallResult } from 'lib/hooks/multicall'\nimport useNativeCurrency from 'lib/hooks/useNativeCurrency'\nimport { PropsWithChildren, useCallback, useMemo, useRef, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { Link, useParams } from 'react-router-dom'\nimport { Bound } from 'state/mint/v3/actions'\nimport { useIsTransactionPending, useTransactionAdder } from 'state/transactions/hooks'\nimport styled, { useTheme } from 'styled-components'\nimport { ExternalLink, HideExtraSmall, HideSmall, StyledRouterLink, ThemedText } from 'theme/components'\nimport { currencyId } from 'utils/currencyId'\nimport { WrongChainError } from 'utils/errors'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport RangeBadge from '../../components/Badge/RangeBadge'\nimport { SmallButtonPrimary } from '../../components/Button/index'\nimport { getPriceOrderingFromPositionForUI } from '../../components/PositionListItem'\nimport RateToggle from '../../components/RateToggle'\nimport { SwitchLocaleLink } from '../../components/SwitchLocaleLink'\nimport { usePositionTokenURI } from '../../hooks/usePositionTokenURI'\nimport { TransactionType } from '../../state/transactions/types'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport { LoadingRows } from './styled'\nimport { useWallet } from 'hooks/useWallet'\nimport { useSelector } from 'react-redux'\nimport Web3Intraction from 'utils/web3Intraction'\nimport { fa } from 'make-plural'\n\nconst PositionPageButtonPrimary = styled(ButtonPrimary)`\n  width: 228px;\n  height: 40px;\n  font-size: 16px;\n  line-height: 20px;\n  border-radius: 12px;\n`\n\nconst PageWrapper = styled.div`\n  padding: 68px 16px 16px 16px;\n\n  min-width: 800px;\n  max-width: 960px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    min-width: 100%;\n    padding: 16px;\n  }\n`\n\nconst BadgeText = styled.div`\n  font-weight: 535;\n  font-size: 14px;\n  color: ${({ theme }) => theme.neutral2};\n`\n\n// responsive text\n// disable the warning because we don't use the end prop, we just want to filter it out\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst Label = styled(({ end, ...props }) => <ThemedText.DeprecatedLabel {...props} />) <{ end?: boolean }>`\n  display: flex;\n  font-size: 16px;\n  justify-content: ${({ end }) => (end ? 'flex-end' : 'flex-start')};\n  align-items: center;\n`\n\nconst ExtentsText = styled.span`\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 14px;\n  text-align: center;\n  margin-right: 4px;\n  font-weight: 535;\n`\n\nconst HoverText = styled(ThemedText.DeprecatedMain)`\n  text-decoration: none;\n  color: ${({ theme }) => theme.neutral2};\n  :hover {\n    color: ${({ theme }) => theme.neutral1};\n    text-decoration: none;\n  }\n`\n\nconst DoubleArrow = styled.span`\n  color: ${({ theme }) => theme.neutral3};\n  margin: 0 1rem;\n`\nconst ResponsiveRow = styled(RowBetween)`\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    align-items: flex-start;\n    row-gap: 16px;\n    width: 100%;\n  }\n`\n\nconst ActionButtonResponsiveRow = styled(ResponsiveRow)`\n  width: 50%;\n  justify-content: flex-end;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: 100%;\n    flex-direction: row;\n    * {\n      width: 100%;\n    }\n  }\n`\n\nconst ResponsiveButtonConfirmed = styled(ButtonConfirmed)`\n  border-radius: 12px;\n  padding: 6px 8px;\n  width: fit-content;\n  font-size: 16px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    width: fit-content;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    width: fit-content;\n  }\n`\n\nconst NFTGrid = styled.div`\n  display: grid;\n  grid-template: 'overlap';\n  min-height: 400px;\n`\n\nconst NFTCanvas = styled.canvas`\n  grid-area: overlap;\n`\n\nconst NFTImage = styled.img`\n  grid-area: overlap;\n  height: 400px;\n  /* Ensures SVG appears on top of canvas. */\n  z-index: 1;\n`\n\nconst PairHeader = styled(ThemedText.H1Medium)`\n  margin-right: 10px;\n`\n\nfunction CurrentPriceCard({\n  inverted,\n  pool,\n  currencyQuote,\n  currencyBase,\n}: {\n  inverted?: boolean\n  pool?: Pool | null\n  currencyQuote?: Currency\n  currencyBase?: Currency\n}) {\n  const { formatPrice } = useFormatter()\n\n  if (!pool || !currencyQuote || !currencyBase) {\n    return null\n  }\n\n  return (\n    <LightCard padding=\"12px\">\n      <AutoColumn gap=\"sm\" justify=\"center\">\n        <ExtentsText>\n          <Trans>Current price</Trans>\n        </ExtentsText>\n        <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n          {formatPrice({ price: inverted ? pool.token1Price : pool.token0Price, type: NumberType.TokenTx })}\n        </ThemedText.DeprecatedMediumHeader>\n        <ExtentsText>\n          <Trans>\n            {currencyQuote?.symbol} per {currencyBase?.symbol}\n          </Trans>\n        </ExtentsText>\n      </AutoColumn>\n    </LightCard>\n  )\n}\n\nconst TokenLink = ({\n  children,\n  chainId,\n  address,\n}: PropsWithChildren<{ chainId: keyof typeof CHAIN_IDS_TO_NAMES; address: string }>) => {\n  const isInfoExplorePageEnabled = useInfoExplorePageEnabled()\n  const tokenLink = getTokenDetailsURL({ address, chain: chainIdToBackendName(chainId), isInfoExplorePageEnabled })\n  return <StyledRouterLink to={tokenLink}>{children}</StyledRouterLink>\n}\n\nconst ExternalTokenLink = ({ children, chainId, address }: PropsWithChildren<{ chainId: number; address: string }>) => {\n  return <ExternalLink href={getExplorerLink(chainId, address, ExplorerDataType.TOKEN)}>{children}</ExternalLink>\n}\n\nfunction LinkedCurrency({ chainId, currency }: { chainId?: number; currency?: Currency }) {\n  const address = (currency as Token)?.address\n\n  if (typeof chainId === 'number' && address) {\n    const Link = isGqlSupportedChain(chainId) ? TokenLink : ExternalTokenLink\n    return (\n      <Link chainId={chainId} address={address}>\n        <RowFixed>\n          <CurrencyLogo currency={currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n          <ThemedText.DeprecatedMain>{currency?.symbol} ↗</ThemedText.DeprecatedMain>\n        </RowFixed>\n      </Link>\n    )\n  }\n\n  return (\n    <RowFixed>\n      <CurrencyLogo currency={currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n      <ThemedText.DeprecatedMain>{currency?.symbol}</ThemedText.DeprecatedMain>\n    </RowFixed>\n  )\n}\n\nfunction getRatio(\n  lower: Price<Currency, Currency>,\n  current: Price<Currency, Currency>,\n  upper: Price<Currency, Currency>\n) {\n  try {\n    if (!current.greaterThan(lower)) {\n      return 100\n    } else if (!current.lessThan(upper)) {\n      return 0\n    }\n\n    const a = Number.parseFloat(lower.toSignificant(15))\n    const b = Number.parseFloat(upper.toSignificant(15))\n    const c = Number.parseFloat(current.toSignificant(15))\n\n    const ratio = Math.floor((1 / ((Math.sqrt(a * b) - Math.sqrt(b * c)) / (c - Math.sqrt(b * c)) + 1)) * 100)\n\n    if (ratio < 0 || ratio > 100) {\n      throw Error('Out of range')\n    }\n\n    return ratio\n  } catch {\n    return undefined\n  }\n}\n\n// snapshots a src img into a canvas\nfunction getSnapshot(src: HTMLImageElement, canvas: HTMLCanvasElement, targetHeight: number) {\n  const context = canvas.getContext('2d')\n\n  if (context) {\n    let { width, height } = src\n\n    // src may be hidden and not have the target dimensions\n    const ratio = width / height\n    height = targetHeight\n    width = Math.round(ratio * targetHeight)\n\n    // Ensure crispness at high DPIs\n    canvas.width = width * devicePixelRatio\n    canvas.height = height * devicePixelRatio\n    canvas.style.width = width + 'px'\n    canvas.style.height = height + 'px'\n    context.scale(devicePixelRatio, devicePixelRatio)\n\n    context.clearRect(0, 0, width, height)\n    context.drawImage(src, 0, 0, width, height)\n  }\n}\n\nfunction NFT({ image, height: targetHeight }: { image: string; height: number }) {\n  const [animate, setAnimate] = useState(false)\n\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const imageRef = useRef<HTMLImageElement>(null)\n\n  return (\n    <NFTGrid\n      onMouseEnter={() => {\n        setAnimate(true)\n      }}\n      onMouseLeave={() => {\n        // snapshot the current frame so the transition to the canvas is smooth\n        if (imageRef.current && canvasRef.current) {\n          getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n        }\n        setAnimate(false)\n      }}\n    >\n      <NFTCanvas ref={canvasRef} />\n      <NFTImage\n        ref={imageRef}\n        src={image}\n        hidden={!animate}\n        onLoad={() => {\n          // snapshot for the canvas\n          if (imageRef.current && canvasRef.current) {\n            getSnapshot(imageRef.current, canvasRef.current, targetHeight)\n          }\n        }}\n      />\n    </NFTGrid>\n  )\n}\n\nconst useInverter = ({\n  priceLower,\n  priceUpper,\n  quote,\n  base,\n  invert,\n}: {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n  invert?: boolean\n}): {\n  priceLower?: Price<Token, Token>\n  priceUpper?: Price<Token, Token>\n  quote?: Token\n  base?: Token\n} => {\n  return {\n    priceUpper: invert ? priceLower?.invert() : priceUpper,\n    priceLower: invert ? priceUpper?.invert() : priceLower,\n    quote: invert ? base : quote,\n    base: invert ? quote : base,\n  }\n}\n\nexport function PositionPageUnsupportedContent() {\n  return (\n    <PageWrapper>\n      <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n        <ThemedText.HeadlineLarge style={{ marginBottom: '8px' }}>\n          <Trans>Position unavailable</Trans>\n        </ThemedText.HeadlineLarge>\n        <ThemedText.BodyPrimary style={{ marginBottom: '32px' }}>\n          <Trans>To view a position, you must be connected to the network it belongs to.</Trans>\n        </ThemedText.BodyPrimary>\n        <PositionPageButtonPrimary as={Link} to=\"/pools\" width=\"fit-content\">\n          <Trans>Back to Pools</Trans>\n        </PositionPageButtonPrimary>\n      </div>\n    </PageWrapper>\n  )\n}\n\nexport default function PositionPage() {\n  const { chainId } = useWeb3React()\n  if (isSupportedChain(chainId)) {\n    return <PositionPageContent />\n  } else {\n    return <PositionPageUnsupportedContent />\n  }\n}\n\nconst PositionLabelRow = styled(RowFixed)({\n  flexWrap: 'wrap',\n  gap: 8,\n})\n\nfunction parseTokenId(tokenId: string | undefined): BigNumber | undefined {\n  if (!tokenId) return\n  try {\n    return BigNumber.from(tokenId)\n  } catch (error) {\n    return\n  }\n}\n\nfunction PositionPageContent() {\n  const { currentNetwork, isBlocked } = useSelector((state: any) => state.dashboard);\n  const wallet = useWallet();\n  const { tokenId: tokenIdFromUrl } = useParams<{ tokenId?: string }>()\n  const { chainId, account, provider } = useWeb3React()\n  const theme = useTheme()\n  const { formatCurrencyAmount, formatDelta, formatTickPrice } = useFormatter()\n\n  const parsedTokenId = parseTokenId(tokenIdFromUrl)\n  const { loading, position: positionDetails } = useV3PositionFromTokenId(parsedTokenId)\n\n  const {\n    token0: token0Address,\n    token1: token1Address,\n    fee: feeAmount,\n    liquidity,\n    tickLower,\n    tickUpper,\n    tokenId,\n  } = positionDetails || {}\n\n  const removed = liquidity?.eq(0)\n\n  const metadata = usePositionTokenURI(parsedTokenId)\n\n  const token0 = useToken(token0Address)\n  const token1 = useToken(token1Address)\n\n  const currency0 = token0 ? unwrappedToken(token0) : undefined\n  const currency1 = token1 ? unwrappedToken(token1) : undefined\n\n  // flag for receiving WETH\n  const [receiveWETH, setReceiveWETH] = useState(false)\n  const nativeCurrency = useNativeCurrency(chainId)\n  const nativeWrappedSymbol = nativeCurrency.wrapped.symbol\n\n  // construct Position from details returned\n  const [poolState, pool] = usePool(token0 ?? undefined, token1 ?? undefined, feeAmount)\n  const position = useMemo(() => {\n    if (pool && liquidity && typeof tickLower === 'number' && typeof tickUpper === 'number') {\n      return new Position({ pool, liquidity: liquidity.toString(), tickLower, tickUpper })\n    }\n    return undefined\n  }, [liquidity, pool, tickLower, tickUpper])\n\n  const tickAtLimit = useIsTickAtLimit(feeAmount, tickLower, tickUpper)\n\n  const pricesFromPosition = getPriceOrderingFromPositionForUI(position)\n  const [manuallyInverted, setManuallyInverted] = useState(false)\n\n  // handle manual inversion\n  const { priceLower, priceUpper, base } = useInverter({\n    priceLower: pricesFromPosition.priceLower,\n    priceUpper: pricesFromPosition.priceUpper,\n    quote: pricesFromPosition.quote,\n    base: pricesFromPosition.base,\n    invert: manuallyInverted,\n  })\n\n  const inverted = token1 ? base?.equals(token1) : undefined\n  const currencyQuote = inverted ? currency0 : currency1\n  const currencyBase = inverted ? currency1 : currency0\n\n  const ratio = useMemo(() => {\n    return priceLower && pool && priceUpper\n      ? getRatio(\n        inverted ? priceUpper.invert() : priceLower,\n        pool.token0Price,\n        inverted ? priceLower.invert() : priceUpper\n      )\n      : undefined\n  }, [inverted, pool, priceLower, priceUpper])\n\n  // fees\n  const [feeValue0, feeValue1] = useV3PositionFees(pool ?? undefined, positionDetails?.tokenId, receiveWETH)\n\n  // these currencies will match the feeValue{0,1} currencies for the purposes of fee collection\n  const currency0ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token0 : unwrappedToken(pool.token0)) : undefined\n  const currency1ForFeeCollectionPurposes = pool ? (receiveWETH ? pool.token1 : unwrappedToken(pool.token1)) : undefined\n\n  const [collecting, setCollecting] = useState<boolean>(false)\n  const [collectMigrationHash, setCollectMigrationHash] = useState<string | null>(null)\n  const isCollectPending = useIsTransactionPending(collectMigrationHash ?? undefined)\n  const [showConfirm, setShowConfirm] = useState(false)\n\n\n  const [compoundCollecting, setCompoundCollecting] = useState<boolean>(false)\n  const [compoundMigrationHash, setCompoundMigrationHash] = useState<string | null>(null)\n  const isCompoundPending = useIsTransactionPending(collectMigrationHash ?? undefined)\n  const [compoundShowConfirm, setCompoundShowConfirm] = useState(false)\n\n  // usdc prices always in terms of tokens\n  const price0 = useStablecoinPrice(token0 ?? undefined)\n  const price1 = useStablecoinPrice(token1 ?? undefined)\n\n  const fiatValueOfFees: CurrencyAmount<Currency> | null = useMemo(() => {\n    if (!price0 || !price1 || !feeValue0 || !feeValue1) return null\n\n    // we wrap because it doesn't matter, the quote returns a USDC amount\n    const feeValue0Wrapped = feeValue0?.wrapped\n    const feeValue1Wrapped = feeValue1?.wrapped\n\n    if (!feeValue0Wrapped || !feeValue1Wrapped) return null\n\n    const amount0 = price0.quote(feeValue0Wrapped)\n    const amount1 = price1.quote(feeValue1Wrapped)\n    return amount0.add(amount1)\n  }, [price0, price1, feeValue0, feeValue1])\n\n  const fiatValueOfLiquidity: CurrencyAmount<Token> | null = useMemo(() => {\n    if (!price0 || !price1 || !position) return null\n    const amount0 = price0.quote(position.amount0)\n    const amount1 = price1.quote(position.amount1)\n    return amount0.add(amount1)\n  }, [price0, price1, position])\n\n  const addTransaction = useTransactionAdder()\n  const positionManager = useV3NFTPositionManagerContract()\n  const collect = useCallback(async () => {\n    if (\n      !currency0ForFeeCollectionPurposes ||\n      !currency1ForFeeCollectionPurposes ||\n      !chainId ||\n      !positionManager ||\n      !account ||\n      !tokenId ||\n      !provider\n    )\n      return\n\n    setCollecting(true)\n\n    // we fall back to expecting 0 fees in case the fetch fails, which is safe in the\n    // vast majority of cases\n    const { calldata, value } = NonfungiblePositionManager.collectCallParameters({\n      tokenId: tokenId.toString(),\n      expectedCurrencyOwed0: feeValue0 ?? CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0),\n      expectedCurrencyOwed1: feeValue1 ?? CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0),\n      recipient: account,\n    })\n\n    const txn = {\n      to: positionManager.address,\n      data: calldata,\n      value,\n    }\n\n    const connectedChainId = await provider.getSigner().getChainId()\n    if (chainId !== connectedChainId) throw new WrongChainError()\n\n    provider\n      .getSigner()\n      .estimateGas(txn)\n      .then((estimate) => {\n        const newTxn = {\n          ...txn,\n          gasLimit: calculateGasMargin(estimate),\n        }\n\n        return provider\n          .getSigner()\n          .sendTransaction(newTxn)\n          .then((response: TransactionResponse) => {\n            setCollectMigrationHash(response.hash)\n            setCollecting(false)\n\n            sendAnalyticsEvent(LiquidityEventName.COLLECT_LIQUIDITY_SUBMITTED, {\n              source: LiquiditySource.V3,\n              label: [currency0ForFeeCollectionPurposes.symbol, currency1ForFeeCollectionPurposes.symbol].join('/'),\n            })\n\n            addTransaction(response, {\n              type: TransactionType.COLLECT_FEES,\n              currencyId0: currencyId(currency0ForFeeCollectionPurposes),\n              currencyId1: currencyId(currency1ForFeeCollectionPurposes),\n              expectedCurrencyOwed0:\n                feeValue0?.quotient.toString() ??\n                CurrencyAmount.fromRawAmount(currency0ForFeeCollectionPurposes, 0).toExact(),\n              expectedCurrencyOwed1:\n                feeValue1?.quotient.toString() ??\n                CurrencyAmount.fromRawAmount(currency1ForFeeCollectionPurposes, 0).toExact(),\n            })\n          })\n      })\n      .catch((error) => {\n        setCollecting(false)\n        console.error(error)\n      })\n  }, [\n    chainId,\n    feeValue0,\n    feeValue1,\n    currency0ForFeeCollectionPurposes,\n    currency1ForFeeCollectionPurposes,\n    positionManager,\n    account,\n    tokenId,\n    addTransaction,\n    provider,\n  ])\n\n\n  const compound = useCallback(\n    async () => {\n\n      try {\n        setCompoundCollecting(true)\n        const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n        let txn = await web3.compoundPool(tokenId, wallet.address);\n\n\n        setCollectMigrationHash(txn.transactionHash)\n\n        setCompoundCollecting(false)\n        setCompoundShowConfirm(false)\n\n      } catch (error) {\n        setCompoundCollecting(false)\n\n      }\n\n    },\n    [tokenId, wallet],\n  )\n\n  const owner = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result?.[0]\n  const ownsNFT = owner === account || positionDetails?.operator === account\n\n  const feeValueUpper = inverted ? feeValue0 : feeValue1\n  const feeValueLower = inverted ? feeValue1 : feeValue0\n\n  // check if price is within range\n  const below = pool && typeof tickLower === 'number' ? pool.tickCurrent < tickLower : undefined\n  const above = pool && typeof tickUpper === 'number' ? pool.tickCurrent >= tickUpper : undefined\n  const inRange: boolean = typeof below === 'boolean' && typeof above === 'boolean' ? !below && !above : false\n\n  function modalHeader() {\n    return (\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\n        <LightCard padding=\"12px 16px\">\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueUpper?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueUpper ? formatCurrencyAmount({ amount: feeValueUpper }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueLower?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueLower ? formatCurrencyAmount({ amount: feeValueLower }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n          </AutoColumn>\n        </LightCard>\n        <ThemedText.DeprecatedItalic>\n          <Trans>Collecting fees will withdraw currently available fees for you.</Trans>\n        </ThemedText.DeprecatedItalic>\n        <ButtonPrimary data-testid=\"modal-collect-fees-button\" onClick={collect}>\n          <Trans>Collect</Trans>\n        </ButtonPrimary>\n      </AutoColumn>\n    )\n  }\n\n\n  // console.log(pool,positionDetails,positionManager, \"<====pool\")\n  function modalHeaderCompound() {\n    \n    return (\n      <AutoColumn gap=\"md\" style={{ marginTop: '20px' }}>\n        <LightCard padding=\"12px 16px\">\n          <AutoColumn gap=\"md\">\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueUpper?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueUpper ? formatCurrencyAmount({ amount: feeValueUpper }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <CurrencyLogo currency={feeValueLower?.currency} size=\"20px\" style={{ marginRight: '0.5rem' }} />\n                <ThemedText.DeprecatedMain>\n                  {feeValueLower ? formatCurrencyAmount({ amount: feeValueLower }) : '-'}\n                </ThemedText.DeprecatedMain>\n              </RowFixed>\n              <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n            </RowBetween>\n          </AutoColumn>\n        </LightCard>\n        <ThemedText.DeprecatedItalic>\n          <Trans>Compounding fees will withdraw currently available fees for you.</Trans>\n        </ThemedText.DeprecatedItalic>\n        <ButtonPrimary data-testid=\"modal-collect-fees-button\" onClick={compound}>\n          <Trans>Compound</Trans>\n        </ButtonPrimary>\n      </AutoColumn>\n    )\n  }\n\n  const showCollectAsWeth = Boolean(\n    ownsNFT &&\n    (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0)) &&\n    currency0 &&\n    currency1 &&\n    (currency0.isNative || currency1.isNative) &&\n    !collectMigrationHash\n  )\n\n  if (!positionDetails && !loading) {\n    return <PositionPageUnsupportedContent />\n  }\n\n  return loading || poolState === PoolState.LOADING || !feeAmount ? (\n    <LoadingRows>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </LoadingRows>\n  ) : (\n    <Trace page={InterfacePageName.POOL_PAGE} shouldLogImpression>\n      <>\n        <Helmet>\n          <title>{t`Manage ${currencyQuote?.symbol}/${currencyBase?.symbol} pool liquidity on Goblins`}</title>\n        </Helmet>\n        <PageWrapper>\n          <TransactionConfirmationModal\n            isOpen={showConfirm}\n            onDismiss={() => setShowConfirm(false)}\n            attemptingTxn={collecting}\n            hash={collectMigrationHash ?? ''}\n            reviewContent={() => (\n              <ConfirmationModalContent\n                title={<Trans>Claim fees</Trans>}\n                onDismiss={() => setShowConfirm(false)}\n                topContent={modalHeader}\n              />\n            )}\n            pendingText={<Trans>Collecting fees</Trans>}\n          />\n\n\n          <TransactionConfirmationModal\n            isOpen={compoundShowConfirm}\n            onDismiss={() => setCompoundShowConfirm(false)}\n            attemptingTxn={compoundCollecting}\n            hash={compoundMigrationHash ?? ''}\n            reviewContent={() => (\n              <ConfirmationModalContent\n                title={<Trans>Compound fees</Trans>}\n                onDismiss={() => setCompoundShowConfirm(false)}\n                topContent={modalHeaderCompound}\n              />\n            )}\n            pendingText={<Trans>Compounding fees</Trans>}\n          />\n          <AutoColumn gap=\"md\">\n            <AutoColumn gap=\"sm\">\n              <Link\n                data-cy=\"visit-pool\"\n                style={{ textDecoration: 'none', width: 'fit-content', marginBottom: '0.5rem' }}\n                to=\"/pools\"\n              >\n                <HoverText>\n                  <Trans>← Back to Pools</Trans>\n                </HoverText>\n              </Link>\n              <ResponsiveRow>\n                <PositionLabelRow>\n                  <DoubleCurrencyLogo currency0={currencyBase} currency1={currencyQuote} size={24} margin={true} />\n                  <PairHeader>\n                    &nbsp;{currencyQuote?.symbol}&nbsp;/&nbsp;{currencyBase?.symbol}\n                  </PairHeader>\n                  <Badge style={{ marginRight: '8px' }}>\n                    <BadgeText>\n                      <Trans>{formatDelta(parseFloat(new Percent(feeAmount, 1_000_000).toSignificant()))}</Trans>\n                    </BadgeText>\n                  </Badge>\n                  <RangeBadge removed={removed} inRange={inRange} />\n                </PositionLabelRow>\n                {ownsNFT && (\n                  <ActionButtonResponsiveRow>\n\n                    {currency0 && currency1 && feeAmount && tokenId ? (\n                      <ButtonGray\n                        as={Link}\n                        to={`/add/${currencyId(currency0)}/${currencyId(currency1)}/${feeAmount}/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                        style={{ marginRight: '8px' }}\n                      >\n                        <Trans>Increase liquidity</Trans>\n                      </ButtonGray>\n                    ) : null}\n                    {tokenId && !removed ? (\n                      <SmallButtonPrimary\n                        as={Link}\n                        to={`/remove/${tokenId}`}\n                        padding=\"6px 8px\"\n                        width=\"fit-content\"\n                        $borderRadius=\"12px\"\n                      >\n                        <Trans>Remove liquidity</Trans>\n                      </SmallButtonPrimary>\n                    ) : null}\n                  </ActionButtonResponsiveRow>\n                )}\n              </ResponsiveRow>\n            </AutoColumn>\n            <ResponsiveRow align=\"flex-start\">\n              <HideSmall\n                style={{\n                  height: '100%',\n                  marginRight: 12,\n                }}\n              >\n                {'result' in metadata ? (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      display: 'flex',\n                      alignItems: 'center',\n                      flexDirection: 'column',\n                      justifyContent: 'space-around',\n                      minWidth: '340px',\n                    }}\n                  >\n                    <NFT image={metadata.result.image} height={400} />\n                    {typeof chainId === 'number' && owner && !ownsNFT ? (\n                      <ExternalLink href={getExplorerLink(chainId, owner, ExplorerDataType.ADDRESS)}>\n                        <Trans>Owner</Trans>\n                      </ExternalLink>\n                    ) : null}\n                  </DarkCard>\n                ) : (\n                  <DarkCard\n                    width=\"100%\"\n                    height=\"100%\"\n                    style={{\n                      minWidth: '340px',\n                      position: 'relative',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    <LoadingFullscreen />\n                  </DarkCard>\n                )}\n              </HideSmall>\n              <AutoColumn gap=\"sm\" style={{ width: '100%', height: '100%' }}>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <Label>\n                        <Trans>Liquidity</Trans>\n                      </Label>\n                      {fiatValueOfLiquidity?.greaterThan(new Fraction(1, 100)) ? (\n                        <ThemedText.DeprecatedLargeHeader fontSize=\"36px\" fontWeight={535}>\n                          <Trans>\n                            {formatCurrencyAmount({\n                              amount: fiatValueOfLiquidity,\n                              type: NumberType.FiatTokenPrice,\n                            })}\n                          </Trans>\n                        </ThemedText.DeprecatedLargeHeader>\n                      ) : (\n                        <ThemedText.DeprecatedLargeHeader color={theme.neutral1} fontSize=\"36px\" fontWeight={535}>\n                          <Trans>-</Trans>\n                        </ThemedText.DeprecatedLargeHeader>\n                      )}\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <LinkedCurrency chainId={chainId} currency={currencyQuote} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {formatCurrencyAmount({ amount: inverted ? position?.amount0 : position?.amount1 })}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <BadgeText>\n                                  <Trans>{inverted ? ratio : 100 - ratio}%</Trans>\n                                </BadgeText>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <LinkedCurrency chainId={chainId} currency={currencyBase} />\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {formatCurrencyAmount({ amount: inverted ? position?.amount1 : position?.amount0 })}\n                            </ThemedText.DeprecatedMain>\n                            {typeof ratio === 'number' && !removed ? (\n                              <Badge style={{ marginLeft: '10px' }}>\n                                <BadgeText>\n                                  <Trans>{inverted ? 100 - ratio : ratio}%</Trans>\n                                </BadgeText>\n                              </Badge>\n                            ) : null}\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                  </AutoColumn>\n                </DarkCard>\n                <DarkCard>\n                  <AutoColumn gap=\"md\" style={{ width: '100%' }}>\n                    <AutoColumn gap=\"md\">\n                      <RowBetween style={{ alignItems: 'flex-start' }}>\n                        <AutoColumn gap=\"md\">\n                          <Label>\n                            <Trans>Unclaimed fees</Trans>\n                          </Label>\n                          {fiatValueOfFees?.greaterThan(new Fraction(1, 100)) ? (\n                            <ThemedText.DeprecatedLargeHeader color={theme.success} fontSize=\"36px\" fontWeight={535}>\n                              <Trans>\n                                {formatCurrencyAmount({ amount: fiatValueOfFees, type: NumberType.FiatTokenPrice })}\n                              </Trans>\n                            </ThemedText.DeprecatedLargeHeader>\n                          ) : (\n                            <ThemedText.DeprecatedLargeHeader color={theme.neutral1} fontSize=\"36px\" fontWeight={535}>\n                              <Trans>-</Trans>\n                            </ThemedText.DeprecatedLargeHeader>\n                          )}\n                        </AutoColumn>\n                        {ownsNFT &&\n                          (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) || !!collectMigrationHash) ? (\n                          <ResponsiveButtonConfirmed\n                            data-testid=\"collect-fees-button\"\n                            disabled={collecting || !!collectMigrationHash}\n                            confirmed={!!collectMigrationHash && !isCollectPending}\n                            width=\"fit-content\"\n                            style={{ borderRadius: '12px' }}\n                            padding=\"4px 8px\"\n                            onClick={() => setShowConfirm(true)}\n                          >\n                            {!!collectMigrationHash && !isCollectPending ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                <Trans> Collected</Trans>\n                              </ThemedText.DeprecatedMain>\n                            ) : isCollectPending || collecting ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                {' '}\n                                <Dots>\n                                  <Trans>Collecting</Trans>\n                                </Dots>\n                              </ThemedText.DeprecatedMain>\n                            ) : (\n                              <>\n                                <ThemedText.DeprecatedMain color={theme.white}>\n                                  <Trans>Collect fees</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </>\n                            )}\n                          </ResponsiveButtonConfirmed>\n                        ) : null}\n\n                        {ownsNFT &&\n                          (feeValue0?.greaterThan(0) || feeValue1?.greaterThan(0) || !!compoundMigrationHash) ? (\n                          <ResponsiveButtonConfirmed\n                            data-testid=\"collect-fees-button\"\n                            disabled={compoundCollecting || !!compoundMigrationHash}\n                            confirmed={!!compoundMigrationHash && !isCompoundPending}\n                            width=\"fit-content\"\n                            style={{ borderRadius: '12px' }}\n                            padding=\"4px 8px\"\n                            onClick={() => setCompoundShowConfirm(true)}\n                          >\n                            {!!compoundMigrationHash && !isCompoundPending ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                <Trans> Compounded</Trans>\n                              </ThemedText.DeprecatedMain>\n                            ) : isCompoundPending || compoundCollecting ? (\n                              <ThemedText.DeprecatedMain color={theme.neutral1}>\n                                {' '}\n                                <Dots>\n                                  <Trans>Compounding</Trans>\n                                </Dots>\n                              </ThemedText.DeprecatedMain>\n                            ) : (\n                              <>\n                                <ThemedText.DeprecatedMain color={theme.white}>\n                                  <Trans>Compound</Trans>\n                                </ThemedText.DeprecatedMain>\n                              </>\n                            )}\n                          </ResponsiveButtonConfirmed>\n                        ) : null}\n\n\n                      </RowBetween>\n                    </AutoColumn>\n                    <LightCard padding=\"12px 16px\">\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueUpper?.currency}\n                              size=\"20px\"\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueUpper?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueUpper ? formatCurrencyAmount({ amount: feeValueUpper }) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                        <RowBetween>\n                          <RowFixed>\n                            <CurrencyLogo\n                              currency={feeValueLower?.currency}\n                              size=\"20px\"\n                              style={{ marginRight: '0.5rem' }}\n                            />\n                            <ThemedText.DeprecatedMain>{feeValueLower?.currency?.symbol}</ThemedText.DeprecatedMain>\n                          </RowFixed>\n                          <RowFixed>\n                            <ThemedText.DeprecatedMain>\n                              {feeValueLower ? formatCurrencyAmount({ amount: feeValueLower }) : '-'}\n                            </ThemedText.DeprecatedMain>\n                          </RowFixed>\n                        </RowBetween>\n                      </AutoColumn>\n                    </LightCard>\n                    {showCollectAsWeth && (\n                      <AutoColumn gap=\"md\">\n                        <RowBetween>\n                          <ThemedText.DeprecatedMain>\n                            <Trans>Collect as {nativeWrappedSymbol}</Trans>\n                          </ThemedText.DeprecatedMain>\n                          <Toggle\n                            id=\"receive-as-weth\"\n                            isActive={receiveWETH}\n                            toggle={() => setReceiveWETH((receiveWETH) => !receiveWETH)}\n                          />\n                        </RowBetween>\n                      </AutoColumn>\n                    )}\n                  </AutoColumn>\n                </DarkCard>\n              </AutoColumn>\n            </ResponsiveRow>\n            <DarkCard>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <RowFixed>\n                    <Label display=\"flex\" style={{ marginRight: '12px' }}>\n                      <Trans>Price range</Trans>\n                    </Label>\n                    <HideExtraSmall>\n                      <>\n                        <RangeBadge removed={removed} inRange={inRange} />\n                        <span style={{ width: '8px' }} />\n                      </>\n                    </HideExtraSmall>\n                  </RowFixed>\n                  <RowFixed>\n                    {currencyBase && currencyQuote && (\n                      <RateToggle\n                        currencyA={currencyBase}\n                        currencyB={currencyQuote}\n                        handleRateToggle={() => setManuallyInverted(!manuallyInverted)}\n                      />\n                    )}\n                  </RowFixed>\n                </RowBetween>\n\n                <RowBetween>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Min price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceLower,\n                          atLimit: tickAtLimit,\n                          direction: Bound.LOWER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {currencyQuote?.symbol} per {currencyBase?.symbol}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <ThemedText.DeprecatedSmall color={theme.neutral3}>\n                          <Trans>Your position will be 100% {currencyBase?.symbol} at this price.</Trans>\n                        </ThemedText.DeprecatedSmall>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n\n                  <DoubleArrow>⟷</DoubleArrow>\n                  <LightCard padding=\"12px\" width=\"100%\">\n                    <AutoColumn gap=\"sm\" justify=\"center\">\n                      <ExtentsText>\n                        <Trans>Max price</Trans>\n                      </ExtentsText>\n                      <ThemedText.DeprecatedMediumHeader textAlign=\"center\">\n                        {formatTickPrice({\n                          price: priceUpper,\n                          atLimit: tickAtLimit,\n                          direction: Bound.UPPER,\n                          numberType: NumberType.TokenTx,\n                        })}\n                      </ThemedText.DeprecatedMediumHeader>\n                      <ExtentsText>\n                        {' '}\n                        <Trans>\n                          {currencyQuote?.symbol} per {currencyBase?.symbol}\n                        </Trans>\n                      </ExtentsText>\n\n                      {inRange && (\n                        <ThemedText.DeprecatedSmall color={theme.neutral3}>\n                          <Trans>Your position will be 100% {currencyQuote?.symbol} at this price.</Trans>\n                        </ThemedText.DeprecatedSmall>\n                      )}\n                    </AutoColumn>\n                  </LightCard>\n                </RowBetween>\n                <CurrentPriceCard\n                  inverted={inverted}\n                  pool={pool}\n                  currencyQuote={currencyQuote}\n                  currencyBase={currencyBase}\n                />\n              </AutoColumn>\n            </DarkCard>\n          </AutoColumn>\n        </PageWrapper>\n        <SwitchLocaleLink />\n      </>\n    </Trace>\n  )\n}\n"],"names":["ToggleWrapper","styled","button","width","theme","surface2","surface3","ToggleElement","span","isActive","surface1","neutral1","neutral3","fontSize","neutral2","RateToggle","currencyA","currencyB","handleRateToggle","tokenA","wrapped","tokenB","isSorted","sortsBefore","div","style","display","alignItems","onClick","symbol","MAX_UINT128","BigNumber","from","pow","sub","useV3PositionFees","pool","tokenId","asWETH","positionManager","useV3NFTPositionManagerContract","owner","useSingleCallResult","result","tokenIdHexString","toHexString","latestBlockNumber","useBlockNumber","amounts","setAmounts","useState","useEffect","results","callStatic","collect","recipient","amount0Max","amount1Max","amount0","amount1","CurrencyAmount","fromRawAmount","token0","unwrappedToken","toString","token1","undefined","STARTS_WITH","PositionPageButtonPrimary","ButtonPrimary","PageWrapper","breakpoint","md","sm","BadgeText","Label","end","props","ThemedText","DeprecatedLabel","ExtentsText","HoverText","DeprecatedMain","DoubleArrow","ResponsiveRow","RowBetween","ActionButtonResponsiveRow","ResponsiveButtonConfirmed","ButtonConfirmed","NFTGrid","NFTCanvas","canvas","NFTImage","img","PairHeader","H1Medium","CurrentPriceCard","inverted","currencyQuote","currencyBase","formatPrice","useFormatter","LightCard","padding","AutoColumn","gap","justify","DeprecatedMediumHeader","textAlign","price","token1Price","token0Price","type","NumberType","TokenTx","TokenLink","children","chainId","address","isInfoExplorePageEnabled","useInfoExplorePageEnabled","tokenLink","getTokenDetailsURL","chain","chainIdToBackendName","StyledRouterLink","to","ExternalTokenLink","ExternalLink","href","getExplorerLink","ExplorerDataType","TOKEN","LinkedCurrency","currency","Link","isGqlSupportedChain","RowFixed","CurrencyLogo","size","marginRight","getSnapshot","src","targetHeight","context","getContext","height","ratio","Math","round","devicePixelRatio","scale","clearRect","drawImage","NFT","image","animate","setAnimate","canvasRef","useRef","imageRef","onMouseEnter","onMouseLeave","current","ref","hidden","onLoad","useInverter","priceLower","priceUpper","quote","base","invert","PositionPageUnsupportedContent","flexDirection","HeadlineLarge","marginBottom","BodyPrimary","as","PositionPage","useWeb3React","isSupportedChain","PositionPageContent","PositionLabelRow","flexWrap","currentNetwork","isBlocked","useSelector","state","dashboard","wallet","useWallet","tokenIdFromUrl","useParams","account","provider","useTheme","formatCurrencyAmount","formatDelta","formatTickPrice","parsedTokenId","error","parseTokenId","loading","position","positionDetails","useV3PositionFromTokenId","token0Address","token1Address","fee","feeAmount","liquidity","tickLower","tickUpper","removed","eq","metadata","contract","inputs","useMemo","valid","NEVER_RELOAD","gasRequired","tokenURI","startsWith","JSON","parse","atob","slice","length","usePositionTokenURI","useToken","currency0","currency1","receiveWETH","setReceiveWETH","nativeWrappedSymbol","useNativeCurrency","poolState","usePool","Position","tickAtLimit","useIsTickAtLimit","pricesFromPosition","getPriceOrderingFromPositionForUI","manuallyInverted","setManuallyInverted","equals","lower","upper","greaterThan","lessThan","a","Number","parseFloat","toSignificant","b","c","floor","sqrt","Error","getRatio","feeValue0","feeValue1","currency0ForFeeCollectionPurposes","currency1ForFeeCollectionPurposes","collecting","setCollecting","collectMigrationHash","setCollectMigrationHash","isCollectPending","useIsTransactionPending","showConfirm","setShowConfirm","compoundCollecting","setCompoundCollecting","compoundMigrationHash","setCompoundMigrationHash","isCompoundPending","compoundShowConfirm","setCompoundShowConfirm","price0","useStablecoinPrice","price1","fiatValueOfFees","feeValue0Wrapped","feeValue1Wrapped","add","fiatValueOfLiquidity","addTransaction","useTransactionAdder","useCallback","async","calldata","value","NonfungiblePositionManager","collectCallParameters","expectedCurrencyOwed0","expectedCurrencyOwed1","txn","data","connectedChainId","getSigner","getChainId","WrongChainError","estimateGas","then","estimate","newTxn","gasLimit","calculateGasMargin","sendTransaction","response","hash","sendAnalyticsEvent","LiquidityEventName","COLLECT_LIQUIDITY_SUBMITTED","source","LiquiditySource","V3","label","join","TransactionType","COLLECT_FEES","currencyId0","currencyId","currencyId1","quotient","toExact","catch","console","compound","web3","Web3Intraction","compoundPool","transactionHash","ownsNFT","operator","feeValueUpper","feeValueLower","below","tickCurrent","above","inRange","modalHeader","marginTop","amount","DeprecatedItalic","data-testid","modalHeaderCompound","showCollectAsWeth","Boolean","isNative","PoolState","LOADING","LoadingRows","Trace","page","InterfacePageName","POOL_PAGE","shouldLogImpression","Helmet","title","TransactionConfirmationModal","isOpen","onDismiss","attemptingTxn","reviewContent","ConfirmationModalContent","topContent","pendingText","data-cy","textDecoration","DoubleCurrencyLogo","margin","Badge","Percent","RangeBadge","ButtonGray","$borderRadius","SmallButtonPrimary","align","HideSmall","DarkCard","justifyContent","minWidth","ADDRESS","overflow","LoadingFullscreen","Fraction","DeprecatedLargeHeader","fontWeight","FiatTokenPrice","color","marginLeft","success","disabled","confirmed","borderRadius","Dots","white","Toggle","id","toggle","HideExtraSmall","atLimit","direction","Bound","LOWER","numberType","DeprecatedSmall","UPPER","SwitchLocaleLink"],"sourceRoot":""}