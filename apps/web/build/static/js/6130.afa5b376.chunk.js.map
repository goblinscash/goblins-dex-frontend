{"version":3,"file":"static/js/6130.afa5b376.chunk.js","mappings":"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","sources":["components/Tokens/TokenDetails/AddressSection.tsx","components/TokenSafety/TokenSafetyMessage.tsx","hooks/useGlobalChainSwitch.ts","graphql/thegraph/PoolsFromTokenAddress.ts","components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable.tsx","graphql/thegraph/TokenTransactions.ts","components/Tokens/TokenDetails/tables/TransactionsTable.tsx","components/Tokens/TokenDetails/ActivitySection.tsx","components/Tokens/TokenDetails/BalanceSummary.tsx","components/Tokens/TokenDetails/ChartTypeSelectors/ChartTypeSelector.tsx","assets/svg/eye.svg","components/Tokens/TokenDetails/InvalidTokenDetails.tsx","components/Tokens/TokenDetails/MobileBalanceSummaryFooter.tsx","components/Icons/Globe.tsx","components/Icons/TwitterX.tsx","components/Tokens/TokenDetails/TokenDescription.tsx","components/Tokens/TokenDetails/index.tsx","pages/TokenDetails/utils.ts","pages/TokenDetails/index.tsx","utils/addressesAreEquivalent.ts"],"sourcesContent":["import { Trans } from '@lingui/macro'\nimport styled from 'styled-components'\nimport { CopyContractAddress, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utils/addresses'\n\nconst ContractAddressSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 0.9em;\n  gap: 4px;\n  padding: 4px 0px;\n`\n\nconst ContractAddress = styled.button`\n  display: flex;\n  color: ${({ theme }) => theme.neutral1};\n  gap: 10px;\n  align-items: center;\n  background: transparent;\n  border: none;\n  min-height: 38px;\n  padding: 0px;\n`\n\nexport default function AddressSection({ address }: { address: string }) {\n  return (\n    <ContractAddressSection>\n      <ThemedText.SubHeaderSmall>\n        <Trans>Contract address</Trans>\n      </ThemedText.SubHeaderSmall>\n      <ContractAddress>\n        <CopyContractAddress address={address} truncatedAddress={shortenAddress(address, 2, 3)} />\n      </ContractAddress>\n    </ContractAddressSection>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { displayWarningLabel, getWarningCopy, TOKEN_SAFETY_ARTICLE, Warning } from 'constants/tokenSafety'\nimport { useTokenWarningColor, useTokenWarningTextColor } from 'hooks/useTokenWarningColor'\nimport { AlertTriangle, Slash } from 'react-feather'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\nimport { ExternalLink } from 'theme/components'\n\nconst Label = styled.div<{ color: string; backgroundColor: string }>`\n  width: 100%;\n  padding: 12px 20px 16px;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  border-radius: 16px;\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ color }) => color};\n`\n\nconst TitleRow = styled.div`\n  align-items: center;\n  font-weight: 535;\n  display: inline-flex;\n`\n\nconst Title = styled(Text)`\n  font-weight: 535;\n  font-size: 16px;\n  line-height: 24px;\n  margin-left: 7px;\n`\n\nconst DetailsRow = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  line-height: 16px;\n  color: ${({ theme }) => theme.neutral2};\n`\n\nconst StyledLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.accent1};\n\n  font-weight: 535;\n`\n\ntype TokenSafetyMessageProps = {\n  warning: Warning\n  tokenAddress: string\n}\n\nexport default function TokenSafetyMessage({ warning, tokenAddress }: TokenSafetyMessageProps) {\n  const backgroundColor = useTokenWarningColor(warning.level)\n  const textColor = useTokenWarningTextColor(warning.level)\n  const { heading, description } = getWarningCopy(warning)\n\n  return (\n    <Label data-cy=\"token-safety-message\" color={textColor} backgroundColor={backgroundColor}>\n      {displayWarningLabel(warning) && (\n        <TitleRow>\n          {warning.canProceed ? <AlertTriangle size=\"16px\" /> : <Slash size=\"16px\" />}\n          <Title marginLeft=\"7px\">{warning.message}</Title>\n        </TitleRow>\n      )}\n\n      <DetailsRow>\n        {heading}\n        {Boolean(heading) && ' '}\n        {description}\n        {Boolean(description) && ' '}\n        {tokenAddress && (\n          <StyledLink href={TOKEN_SAFETY_ARTICLE}>\n            <Trans>Learn more</Trans>\n          </StyledLink>\n        )}\n      </DetailsRow>\n    </Label>\n  )\n}\n","import { useWeb3React } from '@web3-react/core'\nimport { Chain } from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport { useEffect, useRef } from 'react'\n\nexport const useOnGlobalChainSwitch = (callback: (chain: Chain) => void) => {\n  const { chainId: connectedChainId } = useWeb3React()\n  const globalChainName = chainIdToBackendName(connectedChainId)\n  const prevGlobalChainRef = useRef(globalChainName)\n  useEffect(() => {\n    if (prevGlobalChainRef.current !== globalChainName) {\n      callback(globalChainName)\n    }\n    prevGlobalChainRef.current = globalChainName\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalChainName])\n}\n","import { ChainId } from '@uniswap/sdk-core'\nimport {\n  OrderDirection,\n  Pool_OrderBy,\n  usePoolsFromTokenAddressQuery,\n} from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { chainToApolloClient } from 'graphql/thegraph/apollo'\nimport { TablePool } from 'graphql/thegraph/TopPools'\nimport gql from 'graphql-tag'\nimport { useCallback, useMemo, useRef } from 'react'\n\ngql`\n  query PoolsFromTokenAddress(\n    $tokenAddress: String!\n    $skip: Int\n    $orderBy: Pool_orderBy\n    $orderDirection: OrderDirection\n  ) {\n    pools(\n      where: { or: [{ token0: $tokenAddress }, { token1: $tokenAddress }] }\n      first: 20\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      subgraphError: allow\n    ) {\n      id\n      txCount\n      totalValueLockedUSD\n      feeTier\n      token0 {\n        id\n        symbol\n      }\n      token1 {\n        id\n        symbol\n      }\n    }\n  }\n`\n\nexport function usePoolsFromTokenAddress(\n  tokenAddress: string,\n  chainId?: ChainId,\n  orderBy: Pool_OrderBy = Pool_OrderBy.TotalValueLockedUsd,\n  orderDirection: OrderDirection = OrderDirection.Desc\n) {\n  const apolloClient = chainToApolloClient[chainId || ChainId.MAINNET]\n  const { loading, error, data, fetchMore } = usePoolsFromTokenAddressQuery({\n    variables: {\n      tokenAddress: tokenAddress.toLowerCase(),\n      orderBy,\n      orderDirection,\n    },\n    client: apolloClient,\n    fetchPolicy: 'cache-first',\n  })\n\n  const loadingMore = useRef(false)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMore.current) {\n        return\n      }\n      loadingMore.current = true\n      fetchMore({\n        variables: {\n          skip: data?.pools?.length ?? 0,\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult || !prev || !Object.keys(prev).length) return prev\n          onComplete?.()\n          const mergedData = {\n            pools: [...prev.pools, ...fetchMoreResult.pools],\n          }\n          loadingMore.current = false\n          return mergedData\n        },\n      })\n    },\n    [data?.pools?.length, fetchMore]\n  )\n\n  return useMemo(() => {\n    const pools: TablePool[] = (data?.pools ?? [])\n      .map((topPool) => {\n        const rand = Math.random()\n        const tvl = parseFloat(topPool.totalValueLockedUSD ?? '0')\n        return {\n          hash: topPool.id,\n          token0: topPool.token0,\n          token1: topPool.token1,\n          txCount: parseFloat(topPool.txCount ?? '0'),\n          tvl,\n          feeTier: parseFloat(topPool.feeTier ?? '0'),\n          // TODO(WEB-3236): once GQL BE TopToken query is supported use real value for volume24h, volumeWeek, and turnover\n          volume24h: rand * tvl,\n          volumeWeek: rand * tvl * 7,\n          turnover: rand,\n        } as TablePool\n      })\n      .sort((a, b) => b.tvl - a.tvl)\n    return { loading, error, pools, loadMore }\n  }, [data?.pools, error, loadMore, loading])\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport { PoolsTable, PoolTableColumns, PoolTableSortState } from 'components/Pools/PoolTable/PoolTable'\nimport { OrderDirection, Pool_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { usePoolsFromTokenAddress } from 'graphql/thegraph/PoolsFromTokenAddress'\nimport { useCallback, useState } from 'react'\nimport { ThemedText } from 'theme/components'\n\nconst HIDDEN_COLUMNS = [PoolTableColumns.Transactions]\n\nexport function TokenDetailsPoolsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const [sortState, setSortMethod] = useState<PoolTableSortState>({\n    sortBy: Pool_OrderBy.TotalValueLockedUsd,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { pools, loading, error, loadMore } = usePoolsFromTokenAddress(\n    referenceToken.address,\n    chainId,\n    sortState.sortBy,\n    sortState.sortDirection\n  )\n\n  const handleHeaderClick = useCallback(\n    (newSortMethod: Pool_OrderBy) => {\n      if (sortState.sortBy === newSortMethod) {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: sortState.sortDirection === OrderDirection.Asc ? OrderDirection.Desc : OrderDirection.Asc,\n        })\n      } else {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: OrderDirection.Desc,\n        })\n      }\n    },\n    [sortState.sortBy, sortState.sortDirection]\n  )\n\n  if (error) {\n    return (\n      <ThemedText.BodyPrimary>\n        <Trans>Error loading Top Pools</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <div data-testid={`tdp-pools-table-${referenceToken.address.toLowerCase()}`}>\n      <PoolsTable\n        pools={pools}\n        loading={loading}\n        chainId={chainId}\n        maxHeight={600}\n        hiddenColumns={HIDDEN_COLUMNS}\n        loadMore={loadMore}\n        sortState={sortState}\n        handleHeaderClick={handleHeaderClick}\n      />\n    </div>\n  )\n}\n","import { gql } from '@apollo/client'\nimport { ChainId } from '@uniswap/sdk-core'\nimport { OrderDirection, Swap_OrderBy, useTokenTransactionsQuery } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { useCallback, useMemo, useRef } from 'react'\n\nimport { chainToApolloClient } from './apollo'\n\ngql`\n  query TokenTransactions(\n    $address: String!\n    $first: Int\n    $skip: Int\n    $orderBy: Swap_orderBy\n    $orderDirection: OrderDirection\n  ) {\n    swapsAs0: swaps(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      where: { token0: $address }\n      subgraphError: allow\n    ) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs1: swaps(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      orderDirection: $orderDirection\n      where: { token1: $address }\n      subgraphError: allow\n    ) {\n      timestamp\n      transaction {\n        id\n      }\n      pool {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      origin\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\nexport enum TokenTransactionType {\n  BUY = 'Buy',\n  SELL = 'Sell',\n}\n\nexport function useTokenTransactions(\n  address: string,\n  chainId?: ChainId,\n  orderBy: Swap_OrderBy = Swap_OrderBy.Timestamp,\n  orderDirection: OrderDirection = OrderDirection.Desc,\n  filter: TokenTransactionType[] = [TokenTransactionType.BUY, TokenTransactionType.SELL],\n  first = 25,\n  skip?: number\n) {\n  const apolloClient = chainToApolloClient[chainId || ChainId.MAINNET]\n  const { data, loading, fetchMore } = useTokenTransactionsQuery({\n    variables: {\n      address: address.toLowerCase(),\n      first,\n      skip,\n      orderBy,\n      orderDirection,\n    },\n    client: apolloClient,\n  })\n  const loadingMore = useRef(false)\n  const loadMore = useCallback(\n    ({ onComplete }: { onComplete?: () => void }) => {\n      if (loadingMore.current) {\n        return\n      }\n      loadingMore.current = true\n      fetchMore({\n        variables: {\n          skip: Math.max(data?.swapsAs0?.length ?? 0, data?.swapsAs1?.length ?? 0),\n        },\n        updateQuery: (prev, { fetchMoreResult }) => {\n          if (!fetchMoreResult) return prev\n          onComplete?.()\n          const mergedData = {\n            swapsAs0: [...prev.swapsAs0, ...fetchMoreResult.swapsAs0],\n            swapsAs1: [...prev.swapsAs1, ...fetchMoreResult.swapsAs1],\n          }\n          loadingMore.current = false\n          return mergedData\n        },\n      })\n    },\n    [data, fetchMore]\n  )\n\n  const transactions = useMemo(\n    () =>\n      [\n        ...(data?.swapsAs0.filter((swap) => {\n          const isSell = swap.amount0 > 0\n          return isSell ? filter.includes(TokenTransactionType.SELL) : filter.includes(TokenTransactionType.BUY)\n        }) ?? []),\n        ...(data?.swapsAs1.filter((swap) => {\n          const isSell = swap.amount1 > 0\n          return isSell ? filter.includes(TokenTransactionType.SELL) : filter.includes(TokenTransactionType.BUY)\n        }) ?? []),\n      ].sort((a, b) => b.timestamp - a.timestamp),\n    [data?.swapsAs0, data?.swapsAs1, filter]\n  )\n\n  return useMemo(() => {\n    return {\n      transactions,\n      loading,\n      loadMore,\n    }\n  }, [transactions, loading, loadMore])\n}\n","import { Trans } from '@lingui/macro'\nimport { createColumnHelper } from '@tanstack/react-table'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport { Table } from 'components/Table'\nimport { Cell } from 'components/Table/Cell'\nimport { Filter } from 'components/Table/Filter'\nimport {\n  ClickableHeaderRow,\n  FilterHeaderRow,\n  HeaderArrow,\n  StyledExternalLink,\n  StyledInternalLink,\n} from 'components/Table/styled'\nimport { getLocaleTimeString } from 'components/Table/utils'\nimport { DEFAULT_LOCALE } from 'constants/locales'\nimport { validateUrlChainParam } from 'graphql/data/util'\nimport { OrderDirection, Swap_OrderBy } from 'graphql/thegraph/__generated__/types-and-hooks'\nimport { TokenTransactionType, useTokenTransactions } from 'graphql/thegraph/TokenTransactions'\nimport { useActiveLocalCurrency } from 'hooks/useActiveLocalCurrency'\nimport { useActiveLocale } from 'hooks/useActiveLocale'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { useCallback, useMemo, useReducer, useRef, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { EllipsisStyle, ThemedText } from 'theme/components'\nimport { shortenAddress } from 'utils/addresses'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nconst StyledSwapAmount = styled(ThemedText.BodyPrimary)`\n  display: inline-block;\n  ${EllipsisStyle}\n  max-width: 125px;\n`\ninterface SwapTransaction {\n  hash: string\n  timestamp: number\n  input: SwapLeg\n  output: SwapLeg\n  usdValue: number\n  makerAddress: string\n}\n\ninterface SwapLeg {\n  address: string\n  symbol: string\n  amount: number\n}\n\ntype TokenTxTableSortState = {\n  sortBy: Swap_OrderBy\n  sortDirection: OrderDirection\n}\n\nexport function TransactionsTable({ chainId, referenceToken }: { chainId: ChainId; referenceToken: Token }) {\n  const locale = useActiveLocale()\n  const activeLocalCurrency = useActiveLocalCurrency()\n  const { formatNumber, formatFiatPrice } = useFormatter()\n  const chainName = validateUrlChainParam(useParams<{ chainName?: string }>().chainName)\n  const [filterModalIsOpen, toggleFilterModal] = useReducer((s) => !s, false)\n  const filterModalRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(filterModalRef, filterModalIsOpen ? toggleFilterModal : undefined)\n  const [filter, setFilters] = useState<TokenTransactionType[]>([TokenTransactionType.BUY, TokenTransactionType.SELL])\n  const [sortState, setSortMethod] = useState<TokenTxTableSortState>({\n    sortBy: Swap_OrderBy.Timestamp,\n    sortDirection: OrderDirection.Desc,\n  })\n  const { transactions, loading, loadMore } = useTokenTransactions(\n    referenceToken.address,\n    chainId,\n    sortState.sortBy,\n    sortState.sortDirection,\n    filter\n  )\n\n  const handleHeaderClick = useCallback(\n    (newSortMethod: Swap_OrderBy) => {\n      if (sortState.sortBy === newSortMethod) {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: sortState.sortDirection === OrderDirection.Asc ? OrderDirection.Desc : OrderDirection.Asc,\n        })\n      } else {\n        setSortMethod({\n          sortBy: newSortMethod,\n          sortDirection: OrderDirection.Desc,\n        })\n      }\n    },\n    [sortState.sortBy, sortState.sortDirection]\n  )\n\n  const data = useMemo(\n    () =>\n      transactions.map((transaction) => {\n        const swapLeg0 = {\n          address: transaction.pool.token0.id,\n          symbol: transaction.pool.token0.symbol,\n          amount: transaction.amount0,\n        }\n        const swapLeg1 = {\n          address: transaction.pool.token1.id,\n          symbol: transaction.pool.token1.symbol,\n          amount: transaction.amount1,\n        }\n        let input, output\n        if (swapLeg0.amount > 0) {\n          input = swapLeg0\n          output = swapLeg1\n        } else {\n          input = swapLeg1\n          output = swapLeg0\n        }\n        return {\n          hash: transaction.transaction.id,\n          timestamp: transaction.timestamp,\n          input,\n          output,\n          usdValue: transaction.amountUSD,\n          makerAddress: transaction.origin,\n        }\n      }),\n    [transactions]\n  )\n  // TODO(WEB-3236): once GQL BE Transaction query is supported add usd, token0 amount, and token1 amount sort support\n  const columns = useMemo(() => {\n    const columnHelper = createColumnHelper<SwapTransaction>()\n    return [\n      columnHelper.accessor((row) => row.timestamp, {\n        id: 'timestamp',\n        header: () => (\n          <Cell minWidth={150} justifyContent=\"flex-start\" grow>\n            <ClickableHeaderRow $justify=\"flex-start\" onClick={() => handleHeaderClick(Swap_OrderBy.Timestamp)}>\n              {sortState.sortBy === Swap_OrderBy.Timestamp && <HeaderArrow direction={sortState.sortDirection} />}\n              <ThemedText.BodySecondary>\n                <Trans>Time</Trans>\n              </ThemedText.BodySecondary>\n            </ClickableHeaderRow>\n          </Cell>\n        ),\n        cell: (timestamp) => (\n          <Cell loading={loading} minWidth={150} justifyContent=\"flex-start\" grow>\n            <ThemedText.BodySecondary>\n              {getLocaleTimeString(Number(timestamp.getValue?.()) * 1000, locale ?? DEFAULT_LOCALE)}\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.output.address, {\n        id: 'swap-type',\n        header: () => (\n          <Cell minWidth={50} justifyContent=\"flex-start\" grow>\n            <FilterHeaderRow modalOpen={filterModalIsOpen} onClick={toggleFilterModal} ref={filterModalRef}>\n              <Filter\n                allFilters={Object.values(TokenTransactionType)}\n                activeFilter={filter}\n                setFilters={setFilters}\n                isOpen={filterModalIsOpen}\n              />\n              <ThemedText.BodySecondary>\n                <Trans>Type</Trans>\n              </ThemedText.BodySecondary>\n            </FilterHeaderRow>\n          </Cell>\n        ),\n        cell: (outputTokenAddress) => (\n          <Cell loading={loading} minWidth={50} justifyContent=\"flex-start\" grow>\n            <ThemedText.BodyPrimary>\n              {String(outputTokenAddress.getValue?.()).toLowerCase() === referenceToken.address.toLowerCase() ? (\n                <Trans>Buy</Trans>\n              ) : (\n                <Trans>Sell</Trans>\n              )}\n            </ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor(\n        (row) =>\n          row.input.address.toLowerCase() === referenceToken.address.toLowerCase()\n            ? row.input.amount\n            : row.output.amount,\n        {\n          id: 'reference-amount',\n          header: () => (\n            <Cell minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>${referenceToken.symbol}</ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (inputTokenAmount) => (\n            <Cell loading={loading} minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodyPrimary>\n                {formatNumber({\n                  input: Math.abs(inputTokenAmount.getValue?.()) || 0,\n                })}\n              </ThemedText.BodyPrimary>\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor(\n        (row) => {\n          const nonReferenceSwapLeg =\n            row.input.address.toLowerCase() === referenceToken.address.toLowerCase() ? row.output : row.input\n          return (\n            <StyledSwapAmount>\n              {formatNumber({\n                input: Math.abs(nonReferenceSwapLeg.amount) || 0,\n              })}{' '}\n              <StyledInternalLink to={`/explore/tokens/${chainName.toLowerCase()}/${nonReferenceSwapLeg.address}`}>\n                {nonReferenceSwapLeg.symbol}\n              </StyledInternalLink>\n            </StyledSwapAmount>\n          )\n        },\n        {\n          id: 'non-reference-amount',\n          header: () => (\n            <Cell minWidth={150} justifyContent=\"flex-end\">\n              <ThemedText.BodySecondary>\n                <Trans>For</Trans>\n              </ThemedText.BodySecondary>\n            </Cell>\n          ),\n          cell: (swapOutput) => (\n            <Cell loading={loading} minWidth={150} justifyContent=\"flex-end\">\n              {swapOutput.getValue?.()}\n            </Cell>\n          ),\n        }\n      ),\n      columnHelper.accessor((row) => row.usdValue, {\n        id: 'fiat-value',\n        header: () => (\n          <Cell minWidth={125} justifyContent=\"flex-end\">\n            <ClickableHeaderRow $justify=\"flex-end\" onClick={() => handleHeaderClick(Swap_OrderBy.AmountUsd)}>\n              {sortState.sortBy === Swap_OrderBy.AmountUsd && <HeaderArrow direction={sortState.sortDirection} />}\n              <ThemedText.BodySecondary>{activeLocalCurrency}</ThemedText.BodySecondary>\n            </ClickableHeaderRow>\n          </Cell>\n        ),\n        cell: (fiat) => (\n          <Cell loading={loading} minWidth={125} justifyContent=\"flex-end\">\n            <ThemedText.BodyPrimary>{formatFiatPrice({ price: fiat.getValue?.() })}</ThemedText.BodyPrimary>\n          </Cell>\n        ),\n      }),\n      columnHelper.accessor((row) => row.makerAddress, {\n        id: 'maker-address',\n        header: () => (\n          <Cell minWidth={100} justifyContent=\"flex-end\">\n            <ThemedText.BodySecondary>\n              <Trans>Wallet</Trans>\n            </ThemedText.BodySecondary>\n          </Cell>\n        ),\n        cell: (makerAddress) => (\n          <Cell loading={loading} minWidth={100} justifyContent=\"flex-end\">\n            <StyledExternalLink href={getExplorerLink(chainId, makerAddress.getValue?.(), ExplorerDataType.ADDRESS)}>\n              {shortenAddress(makerAddress.getValue?.(), 0)}\n            </StyledExternalLink>\n          </Cell>\n        ),\n      }),\n    ]\n  }, [\n    activeLocalCurrency,\n    chainId,\n    chainName,\n    filter,\n    filterModalIsOpen,\n    formatFiatPrice,\n    formatNumber,\n    handleHeaderClick,\n    loading,\n    locale,\n    referenceToken.address,\n    referenceToken.symbol,\n    sortState.sortBy,\n    sortState.sortDirection,\n  ])\n\n  return <Table columns={columns} data={data} loading={loading} loadMore={loadMore} maxHeight={600} />\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Token } from '@uniswap/sdk-core'\nimport Row from 'components/Row'\nimport { TokenDetailsPoolsTable } from 'components/Tokens/TokenDetails/tables/TokenDetailsPoolsTable'\nimport { useState } from 'react'\nimport { Text } from 'rebass'\nimport styled from 'styled-components'\nimport { ClickableStyle } from 'theme/components'\n\nimport { TransactionsTable } from './tables/TransactionsTable'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst Tab = styled(Text)<{ isActive?: boolean }>`\n  cursor: pointer;\n  font-size: 24px !important;\n  line-height: 32px !important;\n  color: ${({ isActive, theme }) => (isActive ? theme.neutral1 : theme.neutral2)};\n  ${ClickableStyle};\n`\nenum ActivityTab {\n  Pools,\n  Txs,\n}\nexport function ActivitySection({ chainId, referenceToken }: { chainId: ChainId; referenceToken?: Token }) {\n  const [activityInView, setActivityInView] = useState(ActivityTab.Pools)\n\n  if (!referenceToken) {\n    return null\n  }\n  return (\n    <Container>\n      <Row gap=\"24px\" marginBottom=\"12px\" id=\"activity-header\">\n        <Tab isActive={activityInView === ActivityTab.Pools} onClick={() => setActivityInView(ActivityTab.Pools)}>\n          <Trans>Pools</Trans>\n        </Tab>\n        <Tab isActive={activityInView === ActivityTab.Txs} onClick={() => setActivityInView(ActivityTab.Txs)}>\n          <Trans>Transactions</Trans>\n        </Tab>\n      </Row>\n      {activityInView === ActivityTab.Pools && (\n        <TokenDetailsPoolsTable chainId={chainId} referenceToken={referenceToken} />\n      )}\n      {activityInView === ActivityTab.Txs && <TransactionsTable chainId={chainId} referenceToken={referenceToken} />}\n    </Container>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ChainId, Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\nimport { getChainInfo } from 'constants/chainInfo'\nimport { asSupportedChain } from 'constants/chains'\nimport { useInfoExplorePageEnabled } from 'featureFlags/flags/infoExplore'\nimport { useInfoTDPEnabled } from 'featureFlags/flags/infoTDP'\nimport { Chain, PortfolioTokenBalancePartsFragment } from 'graphql/data/__generated__/types-and-hooks'\nimport { getTokenDetailsURL, gqlToCurrency, supportedChainIdFromGQLChain } from 'graphql/data/util'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useCurrencyBalance from 'lib/hooks/useCurrencyBalance'\nimport { useMemo } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nimport { MultiChainMap } from '.'\n\nconst BalancesCard = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  height: fit-content;\n  ${({ isInfoTDPEnabled }) => !isInfoTDPEnabled && 'padding: 16px;'}\n  width: 100%;\n\n  // 768 hardcoded to match NFT-redesign navbar breakpoints\n  // src/nft/css/sprinkles.css.ts\n  // change to match theme breakpoints when this navbar is updated\n  @media screen and (min-width: 768px) {\n    display: flex;\n  }\n`\nconst BalanceSection = styled.div`\n  height: fit-content;\n  width: 100%;\n`\nconst BalanceRow = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  margin-top: 12px;\n`\nconst BalanceItem = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst BalanceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 8px;\n  flex: 1;\n`\n\nconst BalanceAmountsContainer = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  ${({ isInfoTDPEnabled }) => isInfoTDPEnabled && 'margin-left: 12px;'}\n`\n\nconst StyledNetworkLabel = styled.div`\n  color: ${({ color }) => color};\n  font-size: 12px;\n  line-height: 16px;\n`\n\ninterface BalanceProps {\n  currency?: Currency\n  chainId?: ChainId\n  balance?: CurrencyAmount<Currency> // TODO(WEB-3026): only used for pre-Info-project calculations, should remove after project goes live\n  gqlBalance?: PortfolioTokenBalancePartsFragment\n  onClick?: () => void\n}\nconst Balance = ({ currency, chainId = ChainId.MAINNET, balance, gqlBalance, onClick }: BalanceProps) => {\n  const { formatCurrencyAmount, formatNumber } = useFormatter()\n  const { label: chainName, color } = getChainInfo(asSupportedChain(chainId) ?? ChainId.MAINNET)\n  const currencies = useMemo(() => [currency], [currency])\n  const isInfoTDPEnabled = useInfoExplorePageEnabled()\n\n  const formattedBalance = formatCurrencyAmount({\n    amount: balance,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdValue = formatCurrencyAmount({\n    amount: useStablecoinValue(balance),\n    type: NumberType.PortfolioBalance,\n  })\n  const formattedGqlBalance = formatNumber({\n    input: gqlBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: gqlBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n\n  if (isInfoTDPEnabled) {\n    return (\n      <BalanceRow onClick={onClick}>\n        <PortfolioLogo currencies={currencies} chainId={chainId} size=\"2rem\" />\n        <BalanceAmountsContainer isInfoTDPEnabled>\n          <BalanceItem>\n            <ThemedText.BodyPrimary>{formattedUsdGqlValue}</ThemedText.BodyPrimary>\n          </BalanceItem>\n          <BalanceItem>\n            <ThemedText.BodySecondary>{formattedGqlBalance}</ThemedText.BodySecondary>\n          </BalanceItem>\n        </BalanceAmountsContainer>\n      </BalanceRow>\n    )\n  } else {\n    return (\n      <BalanceRow>\n        <PortfolioLogo currencies={currencies} chainId={chainId} size=\"2rem\" />\n        <BalanceContainer>\n          <BalanceAmountsContainer>\n            <BalanceItem>\n              <ThemedText.SubHeader>\n                {formattedBalance} {currency?.symbol}\n              </ThemedText.SubHeader>\n            </BalanceItem>\n            <BalanceItem>\n              <ThemedText.BodyPrimary>{formattedUsdValue}</ThemedText.BodyPrimary>\n            </BalanceItem>\n          </BalanceAmountsContainer>\n          <StyledNetworkLabel color={color}>{chainName}</StyledNetworkLabel>\n        </BalanceContainer>\n      </BalanceRow>\n    )\n  }\n}\n\nconst ConnectedChainBalanceSummary = ({\n  connectedChainBalance,\n}: {\n  connectedChainBalance?: CurrencyAmount<Currency>\n}) => {\n  const { chainId: connectedChainId } = useWeb3React()\n  if (!connectedChainId || !connectedChainBalance || !connectedChainBalance.greaterThan(0)) return null\n  const token = connectedChainBalance.currency\n  const { label: chainName } = getChainInfo(asSupportedChain(connectedChainId) ?? ChainId.MAINNET)\n  return (\n    <BalanceSection>\n      <ThemedText.SubHeaderSmall color=\"neutral1\">\n        <Trans>Your balance on {chainName}</Trans>\n      </ThemedText.SubHeaderSmall>\n      <Balance currency={token} chainId={connectedChainId} balance={connectedChainBalance} />\n    </BalanceSection>\n  )\n}\n\nconst PageChainBalanceSummary = ({ pageChainBalance }: { pageChainBalance?: PortfolioTokenBalancePartsFragment }) => {\n  if (!pageChainBalance || !pageChainBalance.token) return null\n  const currency = gqlToCurrency(pageChainBalance.token)\n  return (\n    <BalanceSection>\n      <ThemedText.HeadlineSmall color=\"neutral1\">\n        <Trans>Your balance</Trans>\n      </ThemedText.HeadlineSmall>\n      <Balance currency={currency} chainId={currency?.chainId} gqlBalance={pageChainBalance} />\n    </BalanceSection>\n  )\n}\n\nconst OtherChainsBalanceSummary = ({\n  otherChainBalances,\n  hasPageChainBalance,\n}: {\n  otherChainBalances: readonly PortfolioTokenBalancePartsFragment[]\n  hasPageChainBalance: boolean\n}) => {\n  const navigate = useNavigate()\n  const isInfoExplorePageEnabled = useInfoExplorePageEnabled()\n\n  if (!otherChainBalances.length) return null\n  return (\n    <BalanceSection>\n      {hasPageChainBalance ? (\n        <ThemedText.SubHeaderSmall>\n          <Trans>On other networks</Trans>\n        </ThemedText.SubHeaderSmall>\n      ) : (\n        <ThemedText.HeadlineSmall>\n          <Trans>Balance on other networks</Trans>\n        </ThemedText.HeadlineSmall>\n      )}\n      {otherChainBalances.map((balance) => {\n        const currency = balance.token && gqlToCurrency(balance.token)\n        const chainId = (balance.token && supportedChainIdFromGQLChain(balance.token.chain)) ?? ChainId.MAINNET\n        return (\n          <Balance\n            key={balance.id}\n            currency={currency}\n            chainId={chainId}\n            gqlBalance={balance}\n            onClick={() =>\n              navigate(\n                getTokenDetailsURL({\n                  address: balance.token?.address,\n                  chain: balance.token?.chain ?? Chain.Ethereum,\n                  isInfoExplorePageEnabled,\n                })\n              )\n            }\n          />\n        )\n      })}\n    </BalanceSection>\n  )\n}\n\nexport default function BalanceSummary({\n  currency,\n  chain,\n  multiChainMap,\n}: {\n  currency: Currency\n  chain: Chain\n  multiChainMap: MultiChainMap\n}) {\n  const { account } = useWeb3React()\n\n  const isInfoTDPEnabled = useInfoTDPEnabled()\n\n  const connectedChainBalance = useCurrencyBalance(account, currency)\n\n  const pageChainBalance = multiChainMap[chain].balance\n  const otherChainBalances: PortfolioTokenBalancePartsFragment[] = []\n  for (const [key, value] of Object.entries(multiChainMap)) {\n    if (key !== chain && value.balance !== undefined) {\n      otherChainBalances.push(value.balance)\n    }\n  }\n  const hasBalances = pageChainBalance || Boolean(otherChainBalances.length)\n\n  if (!account || !hasBalances) {\n    return null\n  }\n  return (\n    <BalancesCard isInfoTDPEnabled={isInfoTDPEnabled}>\n      {!isInfoTDPEnabled && <ConnectedChainBalanceSummary connectedChainBalance={connectedChainBalance} />}\n      {isInfoTDPEnabled && (\n        <>\n          <PageChainBalanceSummary pageChainBalance={pageChainBalance} />\n          <OtherChainsBalanceSummary otherChainBalances={otherChainBalances} hasPageChainBalance={!!pageChainBalance} />\n        </>\n      )}\n    </BalancesCard>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { ChartType } from 'components/Charts/utils'\nimport { DropdownSelector, InternalMenuItem } from 'components/DropdownSelector'\nimport PillMultiToggle from 'components/Toggle/PillMultiToggle'\nimport { useScreenSize } from 'hooks/useScreenSize'\nimport { Check } from 'react-feather'\nimport { useToggleModal } from 'state/application/hooks'\nimport { ApplicationModal } from 'state/application/reducer'\nimport { css, useTheme } from 'styled-components'\n\nconst StyledDropdownButton = css`\n  border-radius: 20px;\n  min-width: 93px;\n  height: 40px;\n`\nconst StyledMenuFlyout = css`\n  min-width: 130px;\n  border-radius: 16px;\n  right: 20px;\n`\nfunction ChartTypeDropdown<T extends ChartType>({\n  options,\n  currentChartType,\n  onSelectOption,\n}: {\n  options: readonly T[]\n  currentChartType: T\n  onSelectOption: (option: T) => void\n}) {\n  const theme = useTheme()\n  const toggleMenu = useToggleModal(ApplicationModal.TDP_CHART_TYPE_SELECTOR)\n\n  return (\n    <DropdownSelector\n      modal={ApplicationModal.TDP_CHART_TYPE_SELECTOR}\n      menuLabel={<>{currentChartType}</>}\n      internalMenuItems={\n        <>\n          {options.map((chartType) => {\n            return (\n              <InternalMenuItem\n                key={chartType}\n                onClick={() => {\n                  onSelectOption(chartType)\n                  toggleMenu()\n                }}\n              >\n                <Trans>{chartType}</Trans>\n                {chartType === currentChartType && <Check size={16} color={theme.accent1} />}\n              </InternalMenuItem>\n            )\n          })}\n        </>\n      }\n      buttonCss={StyledDropdownButton}\n      menuFlyoutCss={StyledMenuFlyout}\n    />\n  )\n}\n\nexport default function ChartTypeSelector<T extends ChartType>({\n  options,\n  currentChartType,\n  onChartTypeChange,\n}: {\n  options: readonly T[]\n  currentChartType: T\n  onChartTypeChange: (c: T) => void\n}) {\n  const screenSize = useScreenSize()\n\n  if (!screenSize['sm']) {\n    return (\n      <ChartTypeDropdown options={options} currentChartType={currentChartType} onSelectOption={onChartTypeChange} />\n    )\n  } else {\n    return (\n      <PillMultiToggle\n        options={options}\n        currentSelected={currentChartType}\n        onSelectOption={onChartTypeChange as (c: string) => void}\n      />\n    )\n  }\n}\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgEye(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14.75 12C14.75 13.517 13.517 14.75 12 14.75C10.483 14.75 9.25004 13.517 9.25004 12C9.25004 11.651 9.32196 11.32 9.44096 11.012C9.63496 11.166 9.86903 11.272 10.136 11.272C10.763 11.272 11.272 10.763 11.272 10.136C11.272 9.86899 11.166 9.63492 11.012 9.44092C11.32 9.32192 11.651 9.25 12 9.25C13.517 9.25 14.75 10.483 14.75 12ZM20.5921 13.4771C19.3651 15.5311 16.609 19 12 19C7.39104 19 4.635 15.5311 3.408 13.4771C2.864 12.5671 2.864 11.4329 3.408 10.5229C4.635 8.46895 7.39104 5 12 5C16.609 5 19.3651 8.46895 20.5921 10.5229C21.1361 11.4329 21.1361 12.5671 20.5921 13.4771ZM16.25 12C16.25 9.657 14.344 7.75 12 7.75C9.65604 7.75 7.75004 9.657 7.75004 12C7.75004 14.343 9.65604 16.25 12 16.25C14.344 16.25 16.25 14.343 16.25 12Z\",\n    fill: \"currentColor\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgEye);\nexport default __webpack_public_path__ + \"static/media/eye.0b7e1ea0bf8a719e75d97cfc5cd4e72d.svg\";\nexport { ForwardRef as ReactComponent };","import { Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { ButtonPrimary } from 'components/Button'\nimport { getChainInfo } from 'constants/chainInfo'\nimport useSelectChain from 'hooks/useSelectChain'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ThemedText } from 'theme/components'\n\nimport { ReactComponent as EyeIcon } from '../../../assets/svg/eye.svg'\n\nconst InvalidDetailsContainer = styled.div`\n  padding-top: 128px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst InvalidDetailsText = styled.span`\n  margin-top: 28px;\n  margin-bottom: 20px;\n\n  text-align: center;\n\n  color: ${({ theme }) => theme.neutral2};\n  font-size: 20px;\n  font-weight: 535;\n  line-height: 28px;\n`\n\nconst TokenExploreButton = styled(ButtonPrimary)`\n  width: fit-content;\n  padding: 12px 16px;\n  border-radius: 12px;\n\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 16px;\n  font-weight: 535;\n`\n\nexport default function InvalidTokenDetails({\n  pageChainId,\n  isInvalidAddress,\n}: {\n  pageChainId: ChainId\n  isInvalidAddress?: boolean\n}) {\n  const { chainId } = useWeb3React()\n  const navigate = useNavigate()\n  const selectChain = useSelectChain()\n\n  // if the token's address is valid and the chains match, it's a non-existant token\n  const isNonExistantToken = !isInvalidAddress && pageChainId === chainId\n\n  const connectedChainLabel = chainId ? getChainInfo(chainId)?.label : undefined\n\n  return (\n    <InvalidDetailsContainer>\n      <EyeIcon />\n      {isInvalidAddress || isNonExistantToken ? (\n        <>\n          <InvalidDetailsText>\n            <Trans>This token doesn&apos;t exist</Trans>\n          </InvalidDetailsText>\n          <TokenExploreButton onClick={() => navigate('/tokens')}>\n            <ThemedText.SubHeader>\n              <Trans>Explore tokens</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      ) : (\n        <>\n          {connectedChainLabel && (\n            <InvalidDetailsText>\n              <Trans>This token doesn&apos;t exist on {connectedChainLabel}</Trans>\n            </InvalidDetailsText>\n          )}\n          <TokenExploreButton onClick={() => selectChain(pageChainId)}>\n            <ThemedText.SubHeader>\n              <Trans>Switch to {getChainInfo(pageChainId).label}</Trans>\n            </ThemedText.SubHeader>\n          </TokenExploreButton>\n        </>\n      )}\n    </InvalidDetailsContainer>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { useInfoTDPEnabled } from 'featureFlags/flags/infoTDP'\nimport { PortfolioTokenBalancePartsFragment } from 'graphql/data/__generated__/types-and-hooks'\nimport { CHAIN_ID_TO_BACKEND_NAME } from 'graphql/data/util'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport useCurrencyBalance from 'lib/hooks/useCurrencyBalance'\nimport styled, { css } from 'styled-components'\nimport { StyledInternalLink, ThemedText } from 'theme/components'\nimport { NumberType, useFormatter } from 'utils/formatNumbers'\n\nconst Wrapper = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  align-content: center;\n  align-items: center;\n  background-color: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral2};\n  display: flex;\n  flex-direction: row;\n  font-weight: 535;\n  font-size: 14px;\n  height: fit-content;\n  justify-content: space-between;\n  left: 0;\n  line-height: 20px;\n  position: fixed;\n\n  ${({ isInfoTDPEnabled }) =>\n    isInfoTDPEnabled\n      ? css`\n          border-radius: 20px;\n          bottom: 56px;\n          margin: 8px;\n          padding: 12px 32px;\n          width: calc(100vw - 16px);\n        `\n      : css`\n          border-bottom: none;\n          border-radius: 20px 20px 0px 0px;\n          bottom: 52px;\n          padding: 12px 16px;\n          width: 100%;\n        `}\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    bottom: 0px;\n  }\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    display: none;\n  }\n`\nconst BalanceValue = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  color: ${({ theme }) => theme.neutral1};\n  font-size: 20px;\n  line-height: ${({ isInfoTDPEnabled }) => (isInfoTDPEnabled ? '20px' : '28px')};\n  display: flex;\n  gap: 8px;\n`\nconst Balance = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  align-items: ${({ isInfoTDPEnabled }) => (isInfoTDPEnabled ? 'flex-end' : 'center')};\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 8px;\n`\nconst BalanceInfo = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  display: flex;\n  flex: 10 1 auto;\n  flex-direction: column;\n  justify-content: flex-start;\n  ${({ isInfoTDPEnabled }) => isInfoTDPEnabled && 'gap: 6px;'}\n`\nconst FiatValue = styled(ThemedText.Caption)<{ isInfoTDPEnabled?: boolean }>`\n  ${({ isInfoTDPEnabled, theme }) => !isInfoTDPEnabled && `color: ${theme.neutral2};`}\n  font-size: 12px;\n  line-height: 16px;\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    line-height: 24px;\n  }\n`\nconst SwapButton = styled(StyledInternalLink)<{ isInfoTDPEnabled?: boolean }>`\n  background-color: ${({ theme }) => theme.accent1};\n  border: none;\n  border-radius: ${({ isInfoTDPEnabled }) => (isInfoTDPEnabled ? '22px' : '12px')};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  flex: 1 1 auto;\n  padding: 12px 16px;\n  font-size: ${({ isInfoTDPEnabled }) => (isInfoTDPEnabled ? '16px' : '1em')};\n  font-weight: 535;\n  height: 44px;\n  justify-content: center;\n  margin: auto;\n  max-width: 100vw;\n`\n\nexport default function MobileBalanceSummaryFooter({\n  currency,\n  pageChainBalance,\n}: {\n  currency: Currency\n  pageChainBalance?: PortfolioTokenBalancePartsFragment\n}) {\n  const isInfoTDPEnabled = useInfoTDPEnabled()\n\n  const { account } = useWeb3React()\n  const balance = useCurrencyBalance(account, currency)\n  const { formatCurrencyAmount, formatNumber } = useFormatter()\n  const formattedBalance = formatCurrencyAmount({\n    amount: balance,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdValue = formatCurrencyAmount({\n    amount: useStablecoinValue(balance),\n    type: NumberType.FiatTokenStats,\n  })\n  const formattedGqlBalance = formatNumber({\n    input: pageChainBalance?.quantity,\n    type: NumberType.TokenNonTx,\n  })\n  const formattedUsdGqlValue = formatNumber({\n    input: pageChainBalance?.denominatedValue?.value,\n    type: NumberType.PortfolioBalance,\n  })\n  const chain = CHAIN_ID_TO_BACKEND_NAME[currency.chainId].toLowerCase()\n\n  return (\n    <Wrapper isInfoTDPEnabled={isInfoTDPEnabled}>\n      {Boolean(account && (isInfoTDPEnabled ? pageChainBalance : balance)) && (\n        <BalanceInfo isInfoTDPEnabled={isInfoTDPEnabled}>\n          {isInfoTDPEnabled ? <Trans>Your balance</Trans> : <Trans>Your {currency.symbol} balance</Trans>}\n          <Balance isInfoTDPEnabled={isInfoTDPEnabled}>\n            <BalanceValue isInfoTDPEnabled={isInfoTDPEnabled}>\n              {isInfoTDPEnabled ? formattedGqlBalance : formattedBalance} {currency.symbol}\n            </BalanceValue>\n            <FiatValue isInfoTDPEnabled={isInfoTDPEnabled}>\n              {isInfoTDPEnabled ? `(${formattedUsdGqlValue})` : formattedUsdValue}\n            </FiatValue>\n          </Balance>\n        </BalanceInfo>\n      )}\n      <SwapButton\n        isInfoTDPEnabled={isInfoTDPEnabled}\n        to={`/swap?chain=${chain}&outputCurrency=${currency.isNative ? NATIVE_CHAIN_ID : currency.address}`}\n      >\n        <Trans>Swap</Trans>\n      </SwapButton>\n    </Wrapper>\n  )\n}\n","import { ComponentProps } from 'react'\n\nexport const Globe = (props: ComponentProps<'svg'>) => (\n  <svg\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    stroke=\"transparent\"\n    {...props}\n  >\n    <path\n      d=\"M5.12245 9.5625C5.23495 11.8725 6.01495 14.2275 7.37245 16.32C4.19245 15.615 1.76996 12.8925 1.52246 9.5625H5.12245ZM7.37245 1.67999C4.19245 2.38499 1.76996 5.1075 1.52246 8.4375H5.12245C5.23495 6.1275 6.01495 3.77249 7.37245 1.67999ZM9.14997 1.5H8.84995L8.62496 1.82249C7.19996 3.84749 6.36745 6.1725 6.24745 8.4375H11.7525C11.6325 6.1725 10.8 3.84749 9.37496 1.82249L9.14997 1.5ZM6.24745 9.5625C6.36745 11.8275 7.19996 14.1525 8.62496 16.1775L8.84995 16.5H9.14997L9.37496 16.1775C10.8 14.1525 11.6325 11.8275 11.7525 9.5625H6.24745ZM12.8775 9.5625C12.765 11.8725 11.985 14.2275 10.6275 16.32C13.8075 15.615 16.23 12.8925 16.4775 9.5625H12.8775ZM16.4775 8.4375C16.23 5.1075 13.8075 2.38499 10.6275 1.67999C11.985 3.77249 12.765 6.1275 12.8775 8.4375H16.4775Z\"\n      fill={props.fill ?? '#607BEE'}\n    />\n  </svg>\n)\n","import { ComponentProps } from 'react'\n\nexport const TwitterXLogo = (props: ComponentProps<'svg'>) => (\n  <svg\n    width=\"18\"\n    height=\"18\"\n    viewBox=\"0 0 18 18\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    stroke=\"transparent\"\n    {...props}\n  >\n    <path\n      d=\"M12.8761 3H14.9451L10.4251 8.16609L15.7425 15.196H11.579L8.31797 10.9324L4.58662 15.196H2.51644L7.35104 9.67026L2.25 3H6.51922L9.46689 6.89708L12.8761 3ZM12.15 13.9576H13.2964L5.89628 4.17332H4.66605L12.15 13.9576Z\"\n      fill={props.fill ?? '#607BEE'}\n    />\n  </svg>\n)\n","import { Trans } from '@lingui/macro'\nimport { ChainId } from '@uniswap/sdk-core'\nimport Column from 'components/Column'\nimport { EtherscanLogo } from 'components/Icons/Etherscan'\nimport { Globe } from 'components/Icons/Globe'\nimport { TwitterXLogo } from 'components/Icons/TwitterX'\nimport Row from 'components/Row'\nimport { FOTTooltipContent } from 'components/swap/SwapLineItem'\nimport { NoInfoAvailable, truncateDescription, TruncateDescriptionButton } from 'components/Tokens/TokenDetails/shared'\nimport { MouseoverTooltip, TooltipSize } from 'components/Tooltip'\nimport { useTokenProjectQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { chainIdToBackendName } from 'graphql/data/util'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { useSwapTaxes } from 'hooks/useSwapTaxes'\nimport { useCallback, useReducer } from 'react'\nimport { Copy } from 'react-feather'\nimport styled, { useTheme } from 'styled-components'\nimport { BREAKPOINTS } from 'theme'\nimport { ClickableStyle, EllipsisStyle, ExternalLink, ThemedText } from 'theme/components'\nimport { opacify } from 'theme/utils'\nimport { shortenAddress } from 'utils'\nimport { useFormatter } from 'utils/formatNumbers'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nconst TokenInfoSection = styled(Column)`\n  gap: 16px;\n  width: 100%;\n\n  @media (max-width: ${BREAKPOINTS.lg - 1}px) and (min-width: ${BREAKPOINTS.sm}px) {\n    max-width: 45%;\n  }\n`\n\nconst TokenNameRow = styled(Row)`\n  gap: 8px;\n  width: 100%;\n`\n\nconst TokenButtonRow = styled(TokenNameRow)`\n  flex-wrap: wrap;\n`\n\nconst TokenInfoButton = styled(Row)<{ tokenColor: string }>`\n  gap: 8px;\n  padding: 8px 12px;\n  border-radius: 20px;\n  color: ${({ tokenColor }) => tokenColor};\n  background-color: ${({ tokenColor }) => opacify(12, tokenColor)};\n  font-size: 14px;\n  font-weight: 535;\n  line-height: 16px;\n  width: max-content;\n  ${ClickableStyle}\n`\n\nconst TokenDescriptionContainer = styled(ThemedText.BodyPrimary)`\n  ${EllipsisStyle}\n  max-width: 100%;\n  // max-height: fit-content;\n  line-height: 24px;\n  white-space: pre-wrap;\n`\n\nconst DescriptionVisibilityWrapper = styled.p<{ $visible: boolean }>`\n  display: ${({ $visible }) => ($visible ? 'inline' : 'none')};\n`\n\nconst TRUNCATE_CHARACTER_COUNT = 75\n\nexport function TokenDescription({\n  tokenAddress,\n  chainId = ChainId.MAINNET,\n  isNative = false,\n  characterCount = TRUNCATE_CHARACTER_COUNT,\n}: {\n  tokenAddress: string\n  chainId?: number\n  isNative?: boolean\n  characterCount?: number\n}) {\n  const color = useTheme().neutral1\n  const chainName = chainIdToBackendName(chainId)\n  const { data: tokenQuery } = useTokenProjectQuery({\n    variables: {\n      address: isNative ? getNativeTokenDBAddress(chainName) : tokenAddress,\n      chain: chainName,\n    },\n    errorPolicy: 'all',\n  })\n  const tokenProject = tokenQuery?.token?.project\n  const description = tokenProject?.description\n  const explorerUrl = getExplorerLink(\n    chainId,\n    tokenAddress,\n    isNative ? ExplorerDataType.NATIVE : ExplorerDataType.TOKEN\n  )\n\n  const [, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(tokenAddress)\n  }, [tokenAddress, setCopied])\n\n  const [isDescriptionTruncated, toggleIsDescriptionTruncated] = useReducer((x) => !x, true)\n  const truncatedDescription = truncateDescription(description ?? '', characterCount)\n  const shouldTruncate = !!description && description.length > characterCount\n  const showTruncatedDescription = shouldTruncate && isDescriptionTruncated\n  const { inputTax: sellFee, outputTax: buyFee } = useSwapTaxes(tokenAddress, tokenAddress)\n  const { formatPercent } = useFormatter()\n  const { sellFeeString, buyFeeString } = {\n    sellFeeString: formatPercent(sellFee),\n    buyFeeString: formatPercent(buyFee),\n  }\n  const hasFee = Boolean(parseFloat(sellFeeString)) || Boolean(parseFloat(buyFee.toFixed(2)))\n  const sameFee = sellFeeString === buyFeeString\n\n  return (\n    <TokenInfoSection>\n      <ThemedText.HeadlineSmall>\n        <Trans>Info</Trans>\n      </ThemedText.HeadlineSmall>\n      <TokenButtonRow>\n        {!isNative && (\n          <TokenInfoButton tokenColor={color} onClick={copy}>\n            <Copy width=\"18px\" height=\"18px\" color={color} />\n            {shortenAddress(tokenAddress)}\n          </TokenInfoButton>\n        )}\n        <ExternalLink href={explorerUrl}>\n          <TokenInfoButton tokenColor={color}>\n            <EtherscanLogo width=\"18px\" height=\"18px\" fill={color} />\n            {chainId === ChainId.MAINNET ? <Trans>Etherscan</Trans> : <Trans>Explorer</Trans>}\n          </TokenInfoButton>\n        </ExternalLink>\n        {!!tokenProject?.homepageUrl && (\n          <ExternalLink href={tokenProject.homepageUrl}>\n            <TokenInfoButton tokenColor={color}>\n              <Globe width=\"18px\" height=\"18px\" fill={color} />\n              <Trans>Website</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n        {!!tokenProject?.twitterName && (\n          <ExternalLink href={`https://x.com/${tokenProject.twitterName}`}>\n            <TokenInfoButton tokenColor={color}>\n              <TwitterXLogo width=\"18px\" height=\"18px\" fill={color} />\n              <Trans>Twitter</Trans>\n            </TokenInfoButton>\n          </ExternalLink>\n        )}\n      </TokenButtonRow>\n      <TokenDescriptionContainer>\n        {!description && (\n          <NoInfoAvailable>\n            <Trans>No token information available</Trans>\n          </NoInfoAvailable>\n        )}\n        {description && (\n          <>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-full\" $visible={!showTruncatedDescription}>\n              {description}\n            </DescriptionVisibilityWrapper>\n            <DescriptionVisibilityWrapper data-testid=\"token-description-truncated\" $visible={showTruncatedDescription}>\n              {truncatedDescription}\n            </DescriptionVisibilityWrapper>\n          </>\n        )}\n        {shouldTruncate && (\n          <TruncateDescriptionButton\n            onClick={toggleIsDescriptionTruncated}\n            data-testid=\"token-description-show-more-button\"\n          >\n            {isDescriptionTruncated ? <Trans>Show more</Trans> : <Trans>Hide</Trans>}\n          </TruncateDescriptionButton>\n        )}\n      </TokenDescriptionContainer>\n      {hasFee && (\n        <MouseoverTooltip\n          placement=\"left\"\n          size={TooltipSize.Small}\n          text={\n            <ThemedText.Caption color=\"neutral2\">\n              <FOTTooltipContent />\n            </ThemedText.Caption>\n          }\n        >\n          <Column gap=\"sm\">\n            {sameFee ? (\n              <ThemedText.BodyPrimary>\n                {tokenQuery?.token?.symbol}&nbsp;\n                <Trans>fee:</Trans>&nbsp;{sellFeeString}\n              </ThemedText.BodyPrimary>\n            ) : (\n              <>\n                <ThemedText.BodyPrimary>\n                  {tokenQuery?.token?.symbol}&nbsp;\n                  <Trans>buy fee:</Trans>&nbsp;{buyFeeString}\n                </ThemedText.BodyPrimary>{' '}\n                <ThemedText.BodyPrimary>\n                  {tokenQuery?.token?.symbol}&nbsp;\n                  <Trans>sell fee:</Trans>&nbsp;{sellFeeString}\n                </ThemedText.BodyPrimary>{' '}\n              </>\n            )}\n          </Column>\n        </MouseoverTooltip>\n      )}\n    </TokenInfoSection>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Trace } from 'analytics'\nimport { PortfolioLogo } from 'components/AccountDrawer/MiniPortfolio/PortfolioLogo'\nimport { BreadcrumbNavContainer, BreadcrumbNavLink, CurrentPageBreadcrumb } from 'components/BreadcrumbNav'\nimport ShareButton from 'components/BreadcrumbNav/ShareButton'\nimport { ChartType, PriceChartType } from 'components/Charts/utils'\nimport { useCachedPortfolioBalancesQuery } from 'components/PrefetchBalancesWrapper/PrefetchBalancesWrapper'\nimport { AboutSection } from 'components/Tokens/TokenDetails/About'\nimport AddressSection from 'components/Tokens/TokenDetails/AddressSection'\nimport ChartSection from 'components/Tokens/TokenDetails/ChartSection'\nimport TokenDetailsSkeleton, {\n  LeftPanel,\n  RightPanel,\n  TokenDetailsLayout,\n  TokenInfoContainer,\n  TokenNameCell,\n} from 'components/Tokens/TokenDetails/Skeleton'\nimport StatsSection from 'components/Tokens/TokenDetails/StatsSection'\nimport TokenSafetyMessage from 'components/TokenSafety/TokenSafetyMessage'\nimport TokenSafetyModal from 'components/TokenSafety/TokenSafetyModal'\nimport { NATIVE_CHAIN_ID, nativeOnChain } from 'constants/tokens'\nimport { checkWarning } from 'constants/tokenSafety'\nimport { useInfoExplorePageEnabled } from 'featureFlags/flags/infoExplore'\nimport { useInfoTDPEnabled } from 'featureFlags/flags/infoTDP'\nimport {\n  Chain,\n  PortfolioTokenBalancePartsFragment,\n  TokenPriceQuery,\n  TokenQuery,\n} from 'graphql/data/__generated__/types-and-hooks'\nimport { TokenQueryData } from 'graphql/data/Token'\nimport {\n  getTokenDetailsURL,\n  gqlToCurrency,\n  InterfaceGqlChain,\n  supportedChainIdFromGQLChain,\n  TimePeriod,\n} from 'graphql/data/util'\nimport { useCurrency } from 'hooks/Tokens'\nimport { useColor } from 'hooks/useColor'\nimport { useOnGlobalChainSwitch } from 'hooks/useGlobalChainSwitch'\nimport { UNKNOWN_TOKEN_SYMBOL, useTokenFromActiveNetwork } from 'lib/hooks/useCurrency'\nimport { Swap } from 'pages/Swap'\nimport { useCallback, useMemo, useState, useTransition } from 'react'\nimport { ArrowLeft, ChevronRight } from 'react-feather'\nimport { useNavigate } from 'react-router-dom'\nimport { CurrencyState } from 'state/swap/SwapContext'\nimport styled, { css, useTheme } from 'styled-components'\nimport { EllipsisStyle } from 'theme/components'\nimport { isAddress } from 'utils'\nimport { addressesAreEquivalent } from 'utils/addressesAreEquivalent'\n\nimport { ActivitySection } from './ActivitySection'\nimport BalanceSummary from './BalanceSummary'\nimport { AdvancedPriceChartToggle } from './ChartTypeSelectors/AdvancedPriceChartToggle'\nimport ChartTypeSelector from './ChartTypeSelectors/ChartTypeSelector'\nimport InvalidTokenDetails from './InvalidTokenDetails'\nimport MobileBalanceSummaryFooter from './MobileBalanceSummaryFooter'\nimport { Hr } from './shared'\nimport { TokenDescription } from './TokenDescription'\n\nconst TokenSymbol = styled.span<{ isInfoTDPEnabled?: boolean }>`\n  text-transform: uppercase;\n  color: ${({ theme }) => theme.neutral2};\n  margin-left: 8px;\n\n  ${({ isInfoTDPEnabled }) =>\n    isInfoTDPEnabled &&\n    css`\n      @media screen and (max-width: ${({ theme }) => theme.breakpoint.xs}px) {\n        display: none;\n      }\n    `}\n`\nconst ChartActions = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`\nconst TokenTitle = styled.div<{ isInfoTDPEnabled?: boolean }>`\n  display: flex;\n\n  ${({ isInfoTDPEnabled }) =>\n    isInfoTDPEnabled\n      ? css`\n          overflow: hidden;\n          white-space: nowrap;\n        `\n      : css`\n          @media screen and (max-width: ${({ theme }) => theme.breakpoint.md}px) {\n            display: inline;\n          }\n        `}\n`\nconst TokenName = styled.span`\n  ${EllipsisStyle}\n  min-width: 40px;\n`\nconst DividerLine = styled(Hr)`\n  margin-top: 40px;\n  margin-bottom: 40px;\n  @media screen and (max-width: ${({ theme }) => theme.breakpoint.sm}px) {\n    display: none;\n  }\n`\n\nfunction useOnChainToken(address: string | undefined, skip: boolean) {\n  const token = useTokenFromActiveNetwork(skip || !address ? undefined : address)\n\n  if (skip || !address || (token && token?.symbol === UNKNOWN_TOKEN_SYMBOL)) {\n    return undefined\n  } else {\n    return token\n  }\n}\n\n// Selects most relevant token based on data available, preferring native > query > on-chain\n// Token will be null if still loading from on-chain, and undefined if unavailable\nfunction useRelevantToken(\n  address: string | undefined,\n  pageChainId: number,\n  tokenQueryData: TokenQueryData | undefined\n) {\n  const { chainId: activeChainId } = useWeb3React()\n  const queryToken = useMemo(() => {\n    if (!address) return undefined\n    if (address === NATIVE_CHAIN_ID) return nativeOnChain(pageChainId)\n    if (tokenQueryData) return gqlToCurrency(tokenQueryData)\n    return undefined\n  }, [pageChainId, address, tokenQueryData])\n  // fetches on-chain token if query data is missing and page chain matches global chain (else fetch won't work)\n  const skipOnChainFetch = Boolean(queryToken) || pageChainId !== activeChainId\n  const onChainToken = useOnChainToken(address, skipOnChainFetch)\n\n  return useMemo(\n    () => ({ token: queryToken ?? onChainToken, didFetchFromChain: !queryToken }),\n    [onChainToken, queryToken]\n  )\n}\n\nfunction getCurrencyURLAddress(currency?: Currency): string {\n  if (!currency) return ''\n\n  if (currency.isToken) {\n    return currency.address\n  }\n  return NATIVE_CHAIN_ID\n}\n\nexport type MultiChainMap = { [chain: string]: { address?: string; balance?: PortfolioTokenBalancePartsFragment } }\ntype TokenDetailsProps = {\n  urlAddress?: string\n  inputTokenAddress?: string\n  chain: InterfaceGqlChain\n  tokenQuery: TokenQuery\n  tokenPriceQuery?: TokenPriceQuery\n  timePeriod: TimePeriod\n  onChangeTimePeriod: (t: TimePeriod) => void\n}\nexport default function TokenDetails({\n  urlAddress,\n  inputTokenAddress,\n  chain,\n  tokenQuery,\n  tokenPriceQuery,\n  timePeriod,\n  onChangeTimePeriod,\n}: TokenDetailsProps) {\n  if (!urlAddress) {\n    throw new Error('Invalid token details route: tokenAddress param is undefined')\n  }\n  const address = useMemo(\n    () => (urlAddress === NATIVE_CHAIN_ID ? urlAddress : isAddress(urlAddress) || undefined),\n    [urlAddress]\n  )\n\n  const { account, chainId: connectedChainId } = useWeb3React()\n  const pageChainId = supportedChainIdFromGQLChain(chain)\n  const inputCurrency = useCurrency(inputTokenAddress, pageChainId)\n  const outputCurrency = useCurrency(address === NATIVE_CHAIN_ID ? 'ETH' : address, pageChainId)\n\n  const tokenQueryData = tokenQuery.token\n  const { data: balanceQuery } = useCachedPortfolioBalancesQuery({ account })\n  const multiChainMap = useMemo(() => {\n    const tokenBalances = balanceQuery?.portfolios?.[0].tokenBalances\n    const tokensAcrossChains = tokenQueryData?.project?.tokens\n    if (!tokensAcrossChains) return {}\n    return tokensAcrossChains.reduce((map, current) => {\n      if (current) {\n        if (!map[current.chain]) {\n          map[current.chain] = {}\n        }\n        map[current.chain].address = current.address\n        map[current.chain].balance = tokenBalances?.find((tokenBalance) => tokenBalance.token?.id === current.id)\n      }\n      return map\n    }, {} as MultiChainMap)\n  }, [balanceQuery?.portfolios, tokenQueryData?.project?.tokens])\n\n  const { token: detailedToken, didFetchFromChain } = useRelevantToken(address, pageChainId, tokenQueryData)\n\n  const tokenWarning = address ? checkWarning(address) : null\n  const isBlockedToken = tokenWarning?.canProceed === false\n  const navigate = useNavigate()\n\n  const theme = useTheme()\n  const extractedColor = useColor(detailedToken ?? undefined, theme.surface2, theme.darkMode)\n\n  const isInfoExplorePageEnabled = useInfoExplorePageEnabled()\n  const isInfoTDPEnabled = useInfoTDPEnabled()\n\n  // Wrapping navigate in a transition prevents Suspense from unnecessarily showing fallbacks again.\n  const [isPending, startTokenTransition] = useTransition()\n  const navigateToTokenForChain = useCallback(\n    (update: Chain) => {\n      if (!address) return\n      const bridgedAddress = multiChainMap[update]?.address\n      if (bridgedAddress) {\n        startTokenTransition(() =>\n          navigate(\n            getTokenDetailsURL({\n              address: bridgedAddress,\n              chain: update,\n              isInfoExplorePageEnabled,\n            })\n          )\n        )\n      } else if (didFetchFromChain || detailedToken?.isNative) {\n        startTokenTransition(() => navigate(getTokenDetailsURL({ address, chain: update, isInfoExplorePageEnabled })))\n      }\n    },\n    [address, multiChainMap, didFetchFromChain, detailedToken?.isNative, navigate, isInfoExplorePageEnabled]\n  )\n  useOnGlobalChainSwitch(navigateToTokenForChain)\n\n  const handleCurrencyChange = useCallback(\n    (tokens: CurrencyState) => {\n      const inputCurrencyURLAddress = getCurrencyURLAddress(tokens.inputCurrency)\n      const outputCurrencyURLAddress = getCurrencyURLAddress(tokens.outputCurrency)\n      if (\n        addressesAreEquivalent(inputCurrencyURLAddress, address) ||\n        addressesAreEquivalent(outputCurrencyURLAddress, address)\n      ) {\n        return\n      }\n\n      const newDefaultToken = tokens.outputCurrency ?? tokens.inputCurrency\n      if (!newDefaultToken) return\n\n      startTokenTransition(() =>\n        navigate(\n          getTokenDetailsURL({\n            // The function falls back to \"NATIVE\" if the address is null\n            address: newDefaultToken.isNative ? null : newDefaultToken.address,\n            chain,\n            inputAddress:\n              // If only one token was selected before we navigate, then it was the default token and it's being replaced.\n              // On the new page, the *new* default token becomes the output, and we don't have another option to set as the input token.\n              tokens.inputCurrency && tokens.inputCurrency !== newDefaultToken ? inputCurrencyURLAddress : null,\n            isInfoExplorePageEnabled,\n          })\n        )\n      )\n    },\n    [address, chain, isInfoExplorePageEnabled, navigate]\n  )\n\n  const [continueSwap, setContinueSwap] = useState<{ resolve: (value: boolean | PromiseLike<boolean>) => void }>()\n\n  const [openTokenSafetyModal, setOpenTokenSafetyModal] = useState(false)\n\n  const onResolveSwap = useCallback(\n    (value: boolean) => {\n      continueSwap?.resolve(value)\n      setContinueSwap(undefined)\n    },\n    [continueSwap, setContinueSwap]\n  )\n\n  const [chartType, setChartType] = useState<ChartType>(ChartType.PRICE)\n  const [priceChartType, setPriceChartType] = useState<PriceChartType>(PriceChartType.LINE)\n\n  // address will never be undefined if token is defined; address is checked here to appease typechecker\n  if (detailedToken === undefined || !address) {\n    return <InvalidTokenDetails pageChainId={pageChainId} isInvalidAddress={!address} />\n  }\n  const tokenSymbolName = detailedToken && (detailedToken.symbol ?? <Trans>Symbol not found</Trans>)\n  const twitterShareName =\n    detailedToken && detailedToken.name && detailedToken.symbol\n      ? `${detailedToken.name} (${detailedToken.symbol})`\n      : detailedToken?.name || detailedToken?.symbol || ''\n\n  return (\n    <Trace\n      page={InterfacePageName.TOKEN_DETAILS_PAGE}\n      properties={{ tokenAddress: address, tokenName: detailedToken?.name }}\n      shouldLogImpression\n    >\n      <TokenDetailsLayout>\n        {detailedToken && !isPending ? (\n          <LeftPanel>\n            {isInfoTDPEnabled ? (\n              <BreadcrumbNavContainer isInfoTDPEnabled aria-label=\"breadcrumb-nav\">\n                <BreadcrumbNavLink to={`/explore/${chain.toLowerCase()}`}>\n                  <Trans>Explore</Trans> <ChevronRight size={14} />\n                </BreadcrumbNavLink>\n                <BreadcrumbNavLink to={`/explore/tokens/${chain.toLowerCase()}`}>\n                  <Trans>Tokens</Trans> <ChevronRight size={14} />\n                </BreadcrumbNavLink>\n                <CurrentPageBreadcrumb address={address} currency={detailedToken} chainId={detailedToken.chainId} />\n              </BreadcrumbNavContainer>\n            ) : (\n              <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\n                <BreadcrumbNavLink to={`${isInfoExplorePageEnabled ? '/explore' : ''}/tokens/${chain.toLowerCase()}`}>\n                  <ArrowLeft data-testid=\"token-details-return-button\" size={14} /> Tokens\n                </BreadcrumbNavLink>\n              </BreadcrumbNavContainer>\n            )}\n            <TokenInfoContainer isInfoTDPEnabled={isInfoTDPEnabled} data-testid=\"token-info-container\">\n              <TokenNameCell isInfoTDPEnabled={isInfoTDPEnabled}>\n                <PortfolioLogo currencies={[detailedToken]} chainId={detailedToken.chainId} size=\"32px\" />\n                {isInfoTDPEnabled ? (\n                  <TokenTitle isInfoTDPEnabled>\n                    <TokenName>{detailedToken.name ?? <Trans>Name not found</Trans>}</TokenName>\n                    <TokenSymbol isInfoTDPEnabled>{tokenSymbolName}</TokenSymbol>\n                  </TokenTitle>\n                ) : (\n                  <TokenTitle>\n                    {detailedToken.name ?? <Trans>Name not found</Trans>}\n                    <TokenSymbol>{tokenSymbolName}</TokenSymbol>\n                  </TokenTitle>\n                )}\n              </TokenNameCell>\n              <ChartActions>\n                {isInfoTDPEnabled ? (\n                  <>\n                    {chartType === ChartType.PRICE && (\n                      <AdvancedPriceChartToggle\n                        currentChartType={priceChartType}\n                        onChartTypeChange={setPriceChartType}\n                      />\n                    )}\n\n                    <ChartTypeSelector\n                      options={[ChartType.PRICE, ChartType.VOLUME, ChartType.TVL]}\n                      currentChartType={chartType}\n                      onChartTypeChange={(c: ChartType) => {\n                        setChartType(c)\n                        if (c === ChartType.PRICE) setPriceChartType(PriceChartType.LINE)\n                      }}\n                    />\n                  </>\n                ) : (\n                  <ShareButton name={twitterShareName} />\n                )}\n              </ChartActions>\n            </TokenInfoContainer>\n            <ChartSection\n              chartType={chartType}\n              priceChartType={priceChartType}\n              timePeriod={timePeriod}\n              onChangeTimePeriod={onChangeTimePeriod}\n              tokenPriceQuery={tokenPriceQuery}\n              extractedColor={extractedColor}\n            />\n\n            <StatsSection chainId={pageChainId} address={address} tokenQueryData={tokenQueryData} />\n            {!isInfoTDPEnabled && (\n              <>\n                <Hr />\n                <AboutSection\n                  address={address}\n                  chainId={pageChainId}\n                  description={tokenQueryData?.project?.description}\n                  homepageUrl={tokenQueryData?.project?.homepageUrl}\n                  twitterName={tokenQueryData?.project?.twitterName}\n                />\n                {!detailedToken.isNative && <AddressSection address={address} />}\n              </>\n            )}\n            {isInfoTDPEnabled && (\n              <>\n                <DividerLine />\n                <ActivitySection chainId={pageChainId} referenceToken={detailedToken.wrapped} />\n              </>\n            )}\n          </LeftPanel>\n        ) : (\n          <TokenDetailsSkeleton />\n        )}\n\n        <RightPanel isInfoTDPEnabled={isInfoTDPEnabled} onClick={() => isBlockedToken && setOpenTokenSafetyModal(true)}>\n          <div style={{ pointerEvents: isBlockedToken ? 'none' : 'auto' }}>\n            <Swap\n              chainId={pageChainId}\n              initialInputCurrency={inputCurrency}\n              initialOutputCurrency={outputCurrency}\n              onCurrencyChange={handleCurrencyChange}\n              disableTokenInputs={pageChainId !== connectedChainId}\n            />\n          </div>\n          {tokenWarning && <TokenSafetyMessage tokenAddress={address} warning={tokenWarning} />}\n          {detailedToken && <BalanceSummary currency={detailedToken} chain={chain} multiChainMap={multiChainMap} />}\n          {isInfoTDPEnabled && (\n            <TokenDescription\n              tokenAddress={address}\n              chainId={pageChainId}\n              isNative={detailedToken?.isNative}\n              characterCount={200}\n            />\n          )}\n        </RightPanel>\n        {detailedToken && (\n          <MobileBalanceSummaryFooter currency={detailedToken} pageChainBalance={multiChainMap[chain].balance} />\n        )}\n\n        <TokenSafetyModal\n          isOpen={openTokenSafetyModal || !!continueSwap}\n          tokenAddress={address}\n          onContinue={() => onResolveSwap(true)}\n          onBlocked={() => {\n            setOpenTokenSafetyModal(false)\n          }}\n          onCancel={() => onResolveSwap(false)}\n          showCancel={true}\n        />\n      </TokenDetailsLayout>\n    </Trace>\n  )\n}\n","import { t } from '@lingui/macro'\nimport { TokenQuery } from 'graphql/data/__generated__/types-and-hooks'\n\nexport const getTokenPageTitle = (tokenQuery: TokenQuery, omitSearchDetail?: boolean) => {\n  const tokenName = tokenQuery?.token?.name\n  const tokenSymbol = tokenQuery?.token?.symbol\n  const baseTitle = 'Buy & Trade'\n  const searchDetail = omitSearchDetail ? '' : ': Live Price & Chart on Goblins'\n  if (!tokenName && !tokenSymbol) {\n    return t`${baseTitle}${searchDetail}`\n  }\n  if (!tokenName && tokenSymbol) {\n    return t`${baseTitle} ${tokenSymbol}${searchDetail}`\n  }\n  if (tokenName && !tokenSymbol) {\n    return t`${baseTitle} ${tokenName}${searchDetail}`\n  }\n  return t`${baseTitle} ${tokenName} (${tokenSymbol})${searchDetail}`\n}\n","import PrefetchBalancesWrapper from 'components/PrefetchBalancesWrapper/PrefetchBalancesWrapper'\nimport TokenDetails from 'components/Tokens/TokenDetails'\nimport { TokenDetailsPageSkeleton } from 'components/Tokens/TokenDetails/Skeleton'\nimport { NATIVE_CHAIN_ID } from 'constants/tokens'\nimport { useTokenPriceQuery, useTokenQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { TimePeriod, toHistoryDuration, validateUrlChainParam } from 'graphql/data/util'\nimport useParsedQueryString from 'hooks/useParsedQueryString'\nimport { useEffect, useMemo, useState } from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { getNativeTokenDBAddress } from 'utils/nativeTokens'\n\nimport { getTokenPageTitle } from './utils'\n\nconst StyledPrefetchBalancesWrapper = styled(PrefetchBalancesWrapper)`\n  display: contents;\n`\n\nexport default function TokenDetailsPage() {\n  const { tokenAddress, chainName } = useParams<{\n    tokenAddress: string\n    chainName?: string\n  }>()\n  const chain = validateUrlChainParam(chainName)\n  const isNative = tokenAddress === NATIVE_CHAIN_ID\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.DAY)\n  const [detailedTokenAddress, duration] = useMemo(\n    // tokenAddress will always be defined in the path for for this page to render, but useParams will always\n    // return optional arguments; nullish coalescing operator is present here to appease typechecker\n    () => [isNative ? getNativeTokenDBAddress(chain) : tokenAddress ?? '', toHistoryDuration(timePeriod)],\n    [chain, isNative, timePeriod, tokenAddress]\n  )\n\n  const parsedQs = useParsedQueryString()\n\n  const parsedInputTokenAddress: string | undefined = useMemo(() => {\n    return typeof parsedQs.inputCurrency === 'string' ? (parsedQs.inputCurrency as string) : undefined\n  }, [parsedQs])\n\n  const { data: tokenQuery } = useTokenQuery({\n    variables: {\n      address: detailedTokenAddress,\n      chain,\n    },\n    errorPolicy: 'all',\n  })\n\n  const { data: tokenPriceQuery } = useTokenPriceQuery({\n    variables: {\n      address: detailedTokenAddress,\n      chain,\n      duration,\n    },\n    errorPolicy: 'all',\n  })\n\n  // Saves already-loaded chart data into state to display while tokenPriceQuery is undefined timePeriod input changes\n  const [currentPriceQuery, setCurrentPriceQuery] = useState(tokenPriceQuery)\n  useEffect(() => {\n    if (tokenPriceQuery) setCurrentPriceQuery(tokenPriceQuery)\n  }, [setCurrentPriceQuery, tokenPriceQuery])\n\n  if (!tokenQuery) return <TokenDetailsPageSkeleton />\n\n  return (\n    <StyledPrefetchBalancesWrapper shouldFetchOnAccountUpdate={true} shouldFetchOnHover={false}>\n      <Helmet>\n        <title>{getTokenPageTitle(tokenQuery)}</title>\n      </Helmet>\n      <TokenDetails\n        urlAddress={tokenAddress}\n        chain={chain}\n        tokenQuery={tokenQuery}\n        tokenPriceQuery={currentPriceQuery}\n        inputTokenAddress={parsedInputTokenAddress}\n        timePeriod={timePeriod}\n        onChangeTimePeriod={setTimePeriod}\n      />\n    </StyledPrefetchBalancesWrapper>\n  )\n}\n","export function addressesAreEquivalent(a: string | null | undefined, b: string | null | undefined) {\n  if (!a || !b) return false\n  return a === b || a.toLowerCase() === b.toLowerCase()\n}\n"],"names":["ContractAddressSection","styled","div","theme","neutral2","ContractAddress","button","neutral1","AddressSection","address","ThemedText","SubHeaderSmall","CopyContractAddress","truncatedAddress","shortenAddress","Label","backgroundColor","surface3","color","TitleRow","Title","Text","DetailsRow","StyledLink","ExternalLink","accent1","TokenSafetyMessage","warning","tokenAddress","useTokenWarningColor","level","textColor","useTokenWarningTextColor","heading","description","getWarningCopy","data-cy","displayWarningLabel","canProceed","AlertTriangle","size","Slash","marginLeft","message","Boolean","href","TOKEN_SAFETY_ARTICLE","useOnGlobalChainSwitch","callback","chainId","connectedChainId","useWeb3React","globalChainName","chainIdToBackendName","prevGlobalChainRef","useRef","useEffect","current","gql","HIDDEN_COLUMNS","PoolTableColumns","Transactions","TokenDetailsPoolsTable","referenceToken","sortState","setSortMethod","useState","sortBy","Pool_OrderBy","TotalValueLockedUsd","sortDirection","OrderDirection","Desc","pools","loading","error","loadMore","orderBy","orderDirection","apolloClient","chainToApolloClient","ChainId","MAINNET","data","fetchMore","usePoolsFromTokenAddressQuery","variables","toLowerCase","client","fetchPolicy","loadingMore","useCallback","onComplete","skip","length","updateQuery","prev","fetchMoreResult","Object","keys","mergedData","useMemo","map","topPool","rand","Math","random","tvl","parseFloat","totalValueLockedUSD","hash","id","token0","token1","txCount","feeTier","volume24h","volumeWeek","turnover","sort","a","b","usePoolsFromTokenAddress","handleHeaderClick","newSortMethod","Asc","BodyPrimary","data-testid","PoolsTable","maxHeight","hiddenColumns","TokenTransactionType","BUY","SELL","StyledSwapAmount","EllipsisStyle","TransactionsTable","locale","useActiveLocale","activeLocalCurrency","useActiveLocalCurrency","formatNumber","formatFiatPrice","useFormatter","chainName","validateUrlChainParam","useParams","filterModalIsOpen","toggleFilterModal","useReducer","s","filterModalRef","useOnClickOutside","undefined","filter","setFilters","Swap_OrderBy","Timestamp","transactions","first","useTokenTransactionsQuery","max","swapsAs0","swapsAs1","swap","amount0","includes","amount1","timestamp","useTokenTransactions","transaction","swapLeg0","pool","symbol","amount","swapLeg1","input","output","usdValue","amountUSD","makerAddress","origin","columns","columnHelper","createColumnHelper","accessor","row","header","Cell","minWidth","justifyContent","grow","ClickableHeaderRow","$justify","onClick","HeaderArrow","direction","BodySecondary","cell","getLocaleTimeString","Number","getValue","DEFAULT_LOCALE","FilterHeaderRow","modalOpen","ref","Filter","allFilters","values","activeFilter","isOpen","outputTokenAddress","String","inputTokenAmount","abs","nonReferenceSwapLeg","StyledInternalLink","to","swapOutput","AmountUsd","fiat","price","StyledExternalLink","getExplorerLink","ExplorerDataType","ADDRESS","Table","Container","Tab","isActive","ClickableStyle","ActivitySection","activityInView","setActivityInView","ActivityTab","Pools","Row","gap","marginBottom","Txs","BalancesCard","isInfoTDPEnabled","BalanceSection","BalanceRow","BalanceItem","BalanceContainer","BalanceAmountsContainer","StyledNetworkLabel","Balance","currency","balance","gqlBalance","formatCurrencyAmount","label","getChainInfo","asSupportedChain","currencies","useInfoExplorePageEnabled","formattedBalance","type","NumberType","TokenNonTx","formattedUsdValue","useStablecoinValue","PortfolioBalance","formattedGqlBalance","quantity","formattedUsdGqlValue","denominatedValue","value","PortfolioLogo","SubHeader","ConnectedChainBalanceSummary","connectedChainBalance","greaterThan","token","PageChainBalanceSummary","pageChainBalance","gqlToCurrency","HeadlineSmall","OtherChainsBalanceSummary","otherChainBalances","hasPageChainBalance","navigate","useNavigate","isInfoExplorePageEnabled","supportedChainIdFromGQLChain","chain","getTokenDetailsURL","Chain","Ethereum","BalanceSummary","multiChainMap","account","useInfoTDPEnabled","useCurrencyBalance","key","entries","push","hasBalances","StyledDropdownButton","css","StyledMenuFlyout","ChartTypeDropdown","options","currentChartType","onSelectOption","useTheme","toggleMenu","useToggleModal","ApplicationModal","TDP_CHART_TYPE_SELECTOR","DropdownSelector","modal","menuLabel","internalMenuItems","chartType","InternalMenuItem","Check","buttonCss","menuFlyoutCss","ChartTypeSelector","onChartTypeChange","useScreenSize","PillMultiToggle","currentSelected","_path","_extends","assign","bind","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","SvgEye","_ref","svgRef","title","titleId","props","xmlns","width","height","viewBox","fill","d","ForwardRef","InvalidDetailsContainer","InvalidDetailsText","span","TokenExploreButton","ButtonPrimary","InvalidTokenDetails","pageChainId","isInvalidAddress","selectChain","useSelectChain","isNonExistantToken","connectedChainLabel","EyeIcon","Wrapper","surface1","breakpoint","md","lg","BalanceValue","BalanceInfo","FiatValue","Caption","sm","SwapButton","deprecated_accentTextLightPrimary","MobileBalanceSummaryFooter","FiatTokenStats","CHAIN_ID_TO_BACKEND_NAME","isNative","NATIVE_CHAIN_ID","Globe","svg","stroke","path","TwitterXLogo","TokenInfoSection","Column","BREAKPOINTS","TokenNameRow","TokenButtonRow","TokenInfoButton","tokenColor","opacify","TokenDescriptionContainer","DescriptionVisibilityWrapper","p","$visible","TRUNCATE_CHARACTER_COUNT","TokenDescription","characterCount","tokenQuery","useTokenProjectQuery","getNativeTokenDBAddress","errorPolicy","tokenProject","project","explorerUrl","NATIVE","TOKEN","setCopied","useCopyClipboard","copy","isDescriptionTruncated","toggleIsDescriptionTruncated","x","truncatedDescription","truncateDescription","shouldTruncate","showTruncatedDescription","inputTax","sellFee","outputTax","buyFee","useSwapTaxes","formatPercent","sellFeeString","buyFeeString","hasFee","toFixed","sameFee","Copy","EtherscanLogo","homepageUrl","twitterName","NoInfoAvailable","TruncateDescriptionButton","MouseoverTooltip","placement","TooltipSize","Small","text","FOTTooltipContent","TokenSymbol","xs","ChartActions","TokenTitle","TokenName","DividerLine","Hr","useRelevantToken","tokenQueryData","activeChainId","queryToken","nativeOnChain","skipOnChainFetch","onChainToken","useTokenFromActiveNetwork","UNKNOWN_TOKEN_SYMBOL","useOnChainToken","didFetchFromChain","getCurrencyURLAddress","isToken","TokenDetails","urlAddress","inputTokenAddress","tokenPriceQuery","timePeriod","onChangeTimePeriod","Error","isAddress","inputCurrency","useCurrency","outputCurrency","balanceQuery","useCachedPortfolioBalancesQuery","tokenBalances","portfolios","tokensAcrossChains","tokens","reduce","find","tokenBalance","detailedToken","tokenWarning","checkWarning","isBlockedToken","extractedColor","useColor","surface2","darkMode","isPending","startTokenTransition","useTransition","navigateToTokenForChain","update","bridgedAddress","handleCurrencyChange","inputCurrencyURLAddress","outputCurrencyURLAddress","addressesAreEquivalent","newDefaultToken","inputAddress","continueSwap","setContinueSwap","openTokenSafetyModal","setOpenTokenSafetyModal","onResolveSwap","resolve","setChartType","ChartType","PRICE","priceChartType","setPriceChartType","PriceChartType","LINE","tokenSymbolName","twitterShareName","name","Trace","page","InterfacePageName","TOKEN_DETAILS_PAGE","properties","tokenName","shouldLogImpression","TokenDetailsLayout","LeftPanel","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","ChevronRight","CurrentPageBreadcrumb","ArrowLeft","TokenInfoContainer","TokenNameCell","AdvancedPriceChartToggle","VOLUME","TVL","c","ShareButton","ChartSection","StatsSection","AboutSection","wrapped","TokenDetailsSkeleton","RightPanel","style","pointerEvents","Swap","initialInputCurrency","initialOutputCurrency","onCurrencyChange","disableTokenInputs","TokenSafetyModal","onContinue","onBlocked","onCancel","showCancel","getTokenPageTitle","omitSearchDetail","tokenSymbol","baseTitle","searchDetail","StyledPrefetchBalancesWrapper","PrefetchBalancesWrapper","TokenDetailsPage","setTimePeriod","TimePeriod","DAY","detailedTokenAddress","duration","toHistoryDuration","parsedQs","useParsedQueryString","parsedInputTokenAddress","useTokenQuery","useTokenPriceQuery","currentPriceQuery","setCurrentPriceQuery","shouldFetchOnAccountUpdate","shouldFetchOnHover","Helmet","TokenDetailsPageSkeleton"],"sourceRoot":""}