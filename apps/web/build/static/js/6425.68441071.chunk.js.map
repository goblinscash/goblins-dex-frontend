{"version":3,"file":"static/js/6425.68441071.chunk.js","mappings":"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","sources":["webpack://@uniswap/interface/./src/pages/staking/staking.module.scss?3ef3","helpers/constants.js","hooks/useWallet.js","helpers/utils.js","utils/web3Intraction.js","pages/staking/components/Rewards.js","pages/staking/components/Staking.js","pages/staking/components/Withdraw.js","pages/staking/index.jsx","helpers/apiRequests.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"stakingSec\":\"staking_stakingSec__naatj\",\"cardCstm\":\"staking_cardCstm__RvlOo\",\"InputWrp\":\"staking_InputWrp__bsBMf\"};","import { ethers } from \"ethers\";\nimport computeABI from \"utils/ABI/computeABi.json\";\n\n//img\n\nimport Icon1 from \"assets/farmingAssets/icons/0x3743eC0673453E5009310C727Ba4eaF7b3a1cc04.png\";\nimport Icon2 from \"assets/farmingAssets/icons/0x56381cB87C8990971f3e9d948939e1a95eA113a3.png\";\nimport Icon3 from \"assets/farmingAssets/icons/0xbb2A35cc3e3dDb679fe30A82051633bC822e4191.png\";\nimport Icon4 from \"assets/farmingAssets/icons/0xbb10B6D11db70f33417b08e0B87042275C933Bb9.png\";\nimport Icon5 from \"assets/farmingAssets/icons/0xbbb3700F33fCb64437Dc28A7Beb6b21f5cC76FB9.png\";\nimport Icon6 from \"assets/farmingAssets/icons/0xBc2F884680c95A02cea099dA2F524b366d9028Ba.png\";\nimport Icon7 from \"assets/farmingAssets/icons/0xBc9bD8DDe6C5a8e1CBE293356E02f5984693b195.png\";\n\n\n\nexport const cryptoData =[\n\n\n    {\n      label: \"SmartBCH\",\n      symbol: \"SmartBCH\",\n      name: \"SmartBCH\",\n      type: \"SmartBCH\",\n      chainName: \"Smart Bitcoin Cash\",\n      rpcUrls: [\n        \"https://rpc-sbch.goblins.cash/\",\n        \"https://smartbch.greyh.at\",\n        \"https://smartbch.greyh.at\",\n        \"https://smartbch.fountainhead.cash/mainnet\",\n        \"https://global.uat.cash\",\n        \"https://rpc.uatvo.com\",\n        \"https://api.tatum.io/v3/blockchain/node/bch-mainnet \",\n        \"https://rpc-mainnet.smartbch.org\",\n        \"https://smartbch.devops.cash/mainnet\",\n      ],\n      chainId: 10000,\n      rpcUrl: \"https://rpc-sbch.goblins.cash/\",\n      contractAddress: process.env.REACT_APP_BCH_STAKING_CONTRACT,\n      nftManagerContractAddress:\n        process.env.REACT_APP_BCH_NFT_MANAGER_CONTRACT,\n      stakeContractAddress: process.env.REACT_APP_BCH_TOKEN_STAKING_CONTRACT,\n      explorerLink: \"https://smartscout.cash/\",\n      rpcUrls: [\"https://smartbch.greyh.at\"],\n\n      blockExplorerUrls: [\"https://smartbch.org/\"],\n      nativeCurrency: { name: \"Bitcoin Cash\", symbol: \"BCH\", decimals: 18 },\n    },\n  ];\n\n\n\nexport const graphQLUrl = {\n  10000: \"https://graph.dfd.cash/subgraphs/name/v3stakerminwidths\",\n  56: \"https://api.studio.thegraph.com/query/78445/v3stakerminwidths/0.0.5\",\n  97: \"https://api.studio.thegraph.com/query/78445/v3stakerminwidths/0.0.5\",\n};\n\nexport const priceGraphQl =\n  \"https://graph.dfd.cash/subgraphs/name/goblins/subgraph-v3\";\n\nexport const supportedChainIds = [56, 97, 10000];\n\nexport const getUniqueToken = (data) => {\n  const uniqueTokenIds = new Set(data.map((item) => item.tokenId));\n  // Convert the Set back to an array of objects\n  const uniqueData = Array.from(uniqueTokenIds).map((tokenId) => ({ tokenId }));\n  return uniqueData;\n};\n\nexport const getProvider = async () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const provider = await new ethers.getDefaultProvider(\n        \"https://bsc-testnet-rpc.publicnode.com\"\n      );\n\n  \n\n      resolve(provider);\n    } catch (err) {\n      console.log(err, \"<===err in getProvider\");\n      reject(err);\n    }\n  });\n};\n\nexport const getContract = async () => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const provider = await getProvider();\n      const contract = new ethers.Contract(\n        \"0xEA589fCCE1df1ee1ca5E1796A683408a36E6e267\",\n        computeABI,\n        provider\n      );\n      resolve(contract);\n    } catch (err) {\n      console.log(err, \"<===err in getContract\");\n      reject(err);\n    }\n  });\n};\n\nexport const makeComputeData = async (key) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const contract = await getContract();\n\n      let compute = await contract.compute(key);\n      resolve(compute);\n    } catch (err) {\n      console.log(err, \"<===err in makeComputeData\");\n      reject(err);\n    }\n  });\n};\n\nexport const getSymbols = {\n  \"0x3743ec0673453e5009310c727ba4eaf7b3a1cc04\": Icon1,\n  \"0x56381cb87c8990971f3e9d948939e1a95ea113a3\": Icon2,\n  \"0xbb2a35cc3e3ddb679fe30a82051633bc822e4191\": Icon3,\n  \"0xbb10b6d11db70f33417b08e0b87042275c933bb9\": Icon4,\n  \"0xbbb3700f33fcb64437dc28a7beb6b21f5cc76fb9\": Icon5,\n  \"0xbc2f884680c95a02cea099da2f524b366d9028ba\": Icon6,\n  \"0xbc9bd8dde6c5a8e1cbe293356e02f5984693b195\": Icon7,\n};\n\nexport const getSortedData = (arr, sortKey, sortOrder) => {\n\n  console.log(arr, sortKey, sortOrder, \"<====arr, sortKey, sortOrder\")\n  if (!arr || !arr.length) {\n    return [];\n  } else {\n    const sortedArr = [...arr].sort((a, b) => {\n      let aValue = a.key[sortKey];\n      let bValue = b.key[sortKey];\n\n      if (sortKey === \"apr\" || sortKey === \"tvl\" || sortKey === \"nftCount\") {\n        aValue = parseFloat(a[sortKey]);\n        bValue = parseFloat(b[sortKey]);\n      }\n\n      if (sortOrder === \"asc\") {\n        return aValue > bValue ? 1 : -1;\n      } else {\n        return aValue < bValue ? 1 : -1;\n      }\n    });\n\n    return sortedArr;\n  }\n};\n\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { cryptoData } from \"helpers/constants\";\nimport { useDispatch } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\nimport { setCurrentNetwork } from \"state/dashboard/actions\";\n\n/**\n * Description:- Here we creating context provider for wallet where we managing all actions for wallet like:-connect, disconnect,switchNetwork, address, balance etc\n * @param {any} {children}\n * @returns {any}\n */\nexport const useWallet = () => {\n  const wallet = useWeb3React();\n  let dispatch = useDispatch();\n\n  // console.log(useWeb3ModalAccount, \"<====useWeb3ModalAccount\");\n\n  const [isActive, setIsActive] = useState(false);\n\n  const [address, setaddress] = useState(null);\n\n  const { account, provider, chainId } = wallet;\n\n  // console.log(providerHook, \"<====providerHook\")\n  useEffect(() => {\n    setIsActive(wallet?.isActive);\n    setaddress(account || \"\");\n  }, [account, wallet?.isActive]);\n\n  useEffect(() => {\n    if (provider && isActive) {\n      provider?.on(\"disconnect\", (res) => {\n        disconnect();\n        dispatch(setCurrentNetwork(null));\n      });\n    }\n  }, [provider, isActive]);\n\n  useEffect(() => {\n    try {\n      // toast.success(walletType);\n      if (chainId && isActive) {\n        let findChain = cryptoData.find(\n          (network) => network.chainId === chainId\n        );\n        if (findChain) {\n          dispatch(setCurrentNetwork(findChain));\n        } else {\n          dispatch(setCurrentNetwork(null));\n          toast.error(\n            \"This platform support only BNB, SmartBCH Please switch to that chain!\"\n          );\n        }\n      }\n    } catch (error) {}\n  }, [isActive, chainId]);\n\n  // console.log(state,accountHook, \"<====state\")\n\n  const values = useMemo(\n    () => ({\n      isActive,\n      address,\n\n      provider,\n      chainId,\n    }),\n\n    [isActive, address, chainId, provider]\n  );\n\n  return values;\n};\n","import { toast } from \"react-toastify\";\nimport { ethers } from \"ethers\";\nimport BigNumber from \"bignumber.js\";\n\nconst PRECISION = 4;\n\nexport function truncateWalletAddress(address, isNotWalletAddress) {\n  if (!address) return \"\";\n  if (!isNotWalletAddress) {\n    address = address.slice(0, 7) + \"...\" + address.slice(36);\n  } else {\n    address = address.slice(0, 8) + \"...\" + address.slice(55);\n  }\n\n  return address;\n}\n\nexport const copyClipBoard = (value) => {\n  if (!value) return toast.error(\"Something wrong!\");\n\n  let textarea = document.createElement(\"textarea\");\n  textarea.textContent = value;\n  textarea.style.position = \"fixed\"; // Prevent scrolling to bottom of page in Microsoft Edge.\n  document.body.appendChild(textarea);\n  textarea.select();\n  try {\n    document.execCommand(\"copy\"); // Security exception may be thrown by some browsers.\n  } catch (ex) {\n    console.warn(\"Copy to clipboard failed.\", ex);\n    // return prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n  } finally {\n    document.body.removeChild(textarea);\n  }\n\n  toast.success(\"Copied!\");\n};\n\nexport const getCheckSumAddress = (address) => {\n  if (!address) return null;\n  try {\n    return ethers.utils.getAddress(address);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport function validateTelegramLink(link) {\n  // Define a regular expression for a Telegram link\n  const telegramRegex = /^(https?:\\/\\/)?(www\\.)?t\\.me\\/[a-zA-Z0-9_]{5,32}\\/?$/;\n\n  // Test the link against the regular expression\n  const isValid = telegramRegex.test(link);\n\n  // Return the validation result\n  return isValid;\n}\n\nexport function isValidEmail(email) {\n  // Regular expression for basic email validation\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  // Test the email against the regular expression\n  return emailRegex.test(email);\n}\n\nexport function getPercentage(partialValue, totalValue) {\n  return (100 * partialValue) / totalValue;\n}\n\nexport function getGrowthPercentage(initialValue, currentValue) {\n  initialValue = Number(initialValue);\n  currentValue = Number(currentValue);\n  return ((currentValue - initialValue) / initialValue) * 100;\n}\n\nexport const sumArrayValue = (arr, key) => {\n  const result = arr.reduce(function (acc, obj) {\n    return Number(acc) + Number(obj[key]);\n  }, 0);\n  return result || 0;\n};\n\nexport function formatValue(value) {\n  if (!value) return 0;\n  value = Number(value);\n  if (value < 1000) {\n    return Number(value).toFixed(2);\n  }\n  if (value >= 1000 && value < 100000) {\n    return ` ${(value / 1000).toFixed(2)}K`;\n  } else if (value >= 100000 && value < 1000000) {\n    return ` ${(value / 1000).toFixed(2)}K`;\n  } else if (value >= 1000000 && value <= 1000000000) {\n    return ` ${(value / 1000000).toFixed(2)}M`;\n  } else if (value >= 1000000000 && value < 1000000000000) {\n    return ` ${(value / 1000000000).toFixed(2)}B`;\n  } else {\n    return Number(value).toFixed(2);\n  }\n}\n\nexport function hexStringToNumber(hexString) {\n  return parseInt(hexString, 16);\n}\n\nexport const calculateBonus = (amount) => {\n  amount = Number(amount);\n  if (amount >= 100 && amount < 500) {\n    return 1; // 1%bonus\n  } else if (amount >= 500 && amount < 2000) {\n    return 2; //2% bonus\n  } else if (amount >= 2000 && amount < 10000) {\n    return 3; //3% bonus\n  } else if (amount >= 10000 && amount < 20000) {\n    return 5; //5% bonus\n  } else if (amount >= 20000) {\n    return 10; //10% bonus\n  } else {\n    return 0;\n  }\n};\n\nexport const convertWeiToEth = (value) => {\n  if (!value) return 0;\n\n  value = value.toString();\n\n  return Number(ethers.utils.formatEther(value));\n};\n\nexport function toFixed(a, b, precision) {\n  if (toBigNumber(a).isZero() || toBigNumber(b).isZero()) {\n    return \"0\";\n  }\n  return toBigNumber(a)\n    .div(toBigNumber(b))\n    .toFormat(precision ?? PRECISION);\n}\n\nexport function formatUnits(a, decimals, precision) {\n  if (!decimals) return \"\";\n  return toFixed(a, toBigNumber(10).pow(decimals), precision);\n}\n\nexport function toBigNumber(n) {\n  return new BigNumber(n.toString());\n}\n\nexport function toFixedCustm(x) {\n  if (Math.abs(x) < 1.0) {\n    var e = parseInt(x.toString().split(\"e-\")[1]);\n    if (e) {\n      x *= Math.pow(10, e - 1);\n      x = \"0.\" + new Array(e).join(\"0\") + x.toString().substring(2);\n    }\n  } else {\n    var e = parseInt(x.toString().split(\"+\")[1]);\n    if (e > 20) {\n      e -= 20;\n      x /= Math.pow(10, e);\n      x += new Array(e + 1).join(\"0\");\n    }\n  }\n  return x;\n}\nexport function truncateToFixed(value, decimalPlaces) {\n  const factor = Math.pow(10, decimalPlaces);\n  return Math.floor(value * factor) / factor;\n}\n\n\n\nexport const makeByteData = (data) => {\n\n  const incentiveKeyAbi =\n    \"tuple(address rewardToken, address pool, uint256 startTime, uint256 endTime, address refundee)\";\n    let byteData = ethers.utils.defaultAbiCoder.encode([incentiveKeyAbi], [data])\n    return byteData\n};\n\n\nexport function toCommas(value) {\n  let parts = value.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n","import { Contract, ethers } from \"ethers\";\n\n//ABI\nimport TokenABI from \"./ABI/TokenABI.json\";\nimport StakeABI from \"./ABI/StakeABI.json\";\nimport UniswapV3Staker from \"./ABI/UniswapV3Staker.json\";\nimport NFTManager from \"./ABI/NonfungiblePositionManager.json\";\nimport PancakeV3Pool from \"./ABI/PancakeV3Pool.json\";\nimport UniswapV3Factory from \"./ABI/UniswapV3Factory.json\";\n\nimport { makeByteData, toFixedCustm } from \"../helpers/utils\";\n\n\n\nclass Web3Intraction {\n  constructor(currentNetwork, provider) {\n\n\n    if (provider || window.ethereum) {\n      this.PROVIDER = provider;\n\n      this.SIGNER = this.PROVIDER.getSigner();\n    } else if (currentNetwork) {\n      this.PROVIDER = new ethers.providers.JsonRpcProvider(\n        currentNetwork?.rpcUrl\n      );\n\n      this.SIGNER = this.PROVIDER;\n    }\n\n    this.contractDetails = {\n      abi: UniswapV3Staker,\n      ...currentNetwork,\n    };\n    this.walletType = currentNetwork.label;\n  }\n\n  /**\n   * Get contract from abi and address\n   *\n   * @param {string} abi - ABI JSON\n   * @param {string} address - Contract Address\n   * @param {boolean} isSigner - signer ot not\n   *\n   * @returns {object} Contract\n   */\n  getContract = (abi, address, isSigner) => {\n    try {\n\n\n      let contract = new Contract(\n        address,\n        JSON.parse(abi),\n        isSigner ? this.SIGNER : this.PROVIDER\n      );\n\n      return contract;\n    } catch (error) {\n      console.log(\"error\", error);\n      return null;\n    }\n  };\n\n  /**\n   * Check and Increase Allowance.\n   *\n   * @param {Number} tokenAmount number token amount\n   * @param {Number} tokenAddress token address\n\n   *\n   *\n   * @returns {Promise} Promise\n   */\n  checkAllowance = async (tokenAmount, tokenAddress, approvalAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let walletAddres = this.SIGNER.getAddress();\n\n        if (tokenAddress && approvalAddress) {\n          let tokenContract = this.getContract(\n            JSON.stringify(TokenABI),\n            tokenAddress,\n            true\n          );\n\n          let getBalance = await tokenContract.balanceOf(walletAddres);\n          let tokenDecimal = await tokenContract.decimals();\n\n          getBalance = getBalance.toString() / 10 ** tokenDecimal;\n          if (Number(tokenAmount) > Number(getBalance)) {\n            return reject(\"Don't have enough token\");\n          }\n\n          let tokenAllowence = await tokenContract.allowance(\n            walletAddres,\n            approvalAddress\n          );\n\n          let getTotalSupply = await tokenContract.totalSupply();\n          let getTotalSupplyInEth =\n            getTotalSupply.toString() / 10 ** tokenDecimal;\n          if (Number(tokenAmount) > Number(getTotalSupplyInEth)) {\n            return reject(\"Don't have enough supply in pool\");\n          }\n\n          // tokenAmount = parseInt(tokenAmount);\n          tokenAllowence = tokenAllowence.toString();\n          let tokenAmountWithDecimal = 0;\n\n          if (tokenDecimal == 18) {\n            tokenAmountWithDecimal = ethers.utils.parseUnits(\n              tokenAmount.toString(),\n              \"ether\"\n            );\n          } else {\n            tokenAmountWithDecimal = Number(tokenAmount) * 10 ** tokenDecimal;\n          }\n\n          if (Number(tokenAmountWithDecimal) > tokenAllowence) {\n            const txn = await tokenContract.approve(\n              approvalAddress,\n              tokenAmountWithDecimal.toString()\n            );\n\n            await txn.wait();\n          }\n          resolve(tokenAmountWithDecimal);\n        }\n      } catch (error) {\n        console.log(error, \"<====err in allowance\");\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Create Incentive\n   *\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n   * @param {number} rewards reward amount\n   * @param {number} minimumWidth Minimum Width value\n   * @param {address} tokenAddress Reward token address\n   * \n\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  createIncentive = async (keys, rewards, minimumWidth, tokenAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let tx;\n\n        if (!tokenAddress) {\n          return reject(\"Token Address not found!\");\n        }\n\n\n\n        let rewardTokenAmount = await this.checkAllowance(\n          rewards,\n          tokenAddress,\n          this.contractDetails?.contractAddress\n        );\n\n\n        tx = await contract.createIncentive(\n          keys,\n          rewardTokenAmount.toString(),\n          minimumWidth\n        );\n\n        let receipt = await tx.wait();\n\n        resolve(receipt);\n      } catch (error) {\n        console.log(error, \"<===error in createIncentive\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * NFT Stake in Incentive\n   *\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n\n   * \n\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  stake = async (keys, tokenId, walletAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(NFTManager),\n          this.contractDetails?.nftManagerContractAddress,\n          true\n        );\n        let getByteData = makeByteData(keys);\n        let getSafeContract = await this.getContract(\n          JSON.stringify([\n            {\n              inputs: [\n                {\n                  internalType: \"address\",\n                  name: \"from\",\n                  type: \"address\",\n                },\n                {\n                  internalType: \"address\",\n                  name: \"to\",\n                  type: \"address\",\n                },\n                {\n                  internalType: \"uint256\",\n                  name: \"tokenId\",\n                  type: \"uint256\",\n                },\n                {\n                  internalType: \"bytes\",\n                  name: \"_data\",\n                  type: \"bytes\",\n                },\n              ],\n              name: \"safeTransferFrom\",\n              outputs: [],\n              stateMutability: \"nonpayable\",\n              type: \"function\",\n            },\n          ]),\n          this.contractDetails?.nftManagerContractAddress,\n          true\n        );\n        let getOwner = await contract.ownerOf(tokenId);\n        if (getOwner !== walletAddress) {\n          reject(\"You are not a NFT owner!\");\n          return;\n        }\n\n        // let stakeTxn = await getSafeContract.safeTransferFrom(\n        //   walletAddress,\n        //   this.contractDetails.contractAddress,\n        //   tokenId,\n        //   getByteData\n        // );\n\n        // Encode the function calls\n        const approve = await contract.interface.encodeFunctionData(\"approve\", [\n          this.contractDetails.contractAddress,\n          tokenId,\n        ]);\n        const safeTransferFrom =\n          await getSafeContract.interface.encodeFunctionData(\n            \"safeTransferFrom\",\n            [\n              walletAddress,\n              this.contractDetails.contractAddress,\n              tokenId,\n              getByteData,\n            ]\n          );\n\n        const multicallData = contract.interface.encodeFunctionData(\n          \"multicall\",\n          [[approve, safeTransferFrom]]\n        );\n\n        const tx = {\n          to: this.contractDetails?.nftManagerContractAddress,\n          data: multicallData,\n          value: ethers.utils.parseEther(\"0\"), // Amount of Ether to send with the transaction\n        };\n\n        const response = await this.SIGNER.sendTransaction(tx);\n\n        let receipt = await response.wait(); // Wait for the transaction to be mined\n        console.log(receipt, \"<===receipt\");\n\n        resolve(receipt);\n        // let receipt = await stakeTxn.wait();\n        // resolve(receipt);\n      } catch (error) {\n        console.log(error, \"<===error in stake\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Multi Call Function call for unstake and claim\n   * @param {array} keys [[reward token, pool address,start time, endTime, refundee address]]\n   * @param {string} tokenId token id\n   * @param {string} walletAddress Wallet Address\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n\n  multiStakeWithMultiCall = async (keys, tokenId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n        let stakeData = [];\n\n        for (let i = 0; i < keys.length; i++) {\n          let stakeToken = await contract.interface.encodeFunctionData(\n            \"stakeToken\",\n            [keys[i], tokenId]\n          );\n          stakeData.push(stakeToken);\n        }\n\n        // Encode the function calls\n\n        const multicallData = contract.interface.encodeFunctionData(\n          \"multicall\",\n          [stakeData]\n        );\n\n        const tx = {\n          to: this.contractDetails?.contractAddress,\n          data: multicallData,\n          value: ethers.utils.parseEther(\"0\"), // Amount of Ether to send with the transaction\n        };\n\n        const response = await this.SIGNER.sendTransaction(tx);\n\n        let receipt = await response.wait(); // Wait for the transaction to be mined\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Deposit in Incentive\n   *\n   * @param {string} tokenId token id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getDeposit = async (tokenId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let deposit = await contract.deposits(tokenId);\n\n        resolve(deposit);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get stakes in Incentive\n   *\n   * @param {string} tokenId token id\n   * @param {string} incentiveId incentive id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getStakes = async (tokenId, incentiveId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let stakes = await contract.stakes(tokenId, incentiveId);\n\n        resolve({\n          liquidity: stakes.liquidity.toString(),\n          secondsPerLiquidityInsideInitialX128:\n            stakes.secondsPerLiquidityInsideInitialX128.toString(),\n        });\n      } catch (error) {\n        console.log(error, \"<===error in getStakes\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Rewards in Incentive\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n   * @param {string} tokenId token id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getRewardInfo = async (keys, tokenId) => {\n    try {\n      let contract = this.getContract(\n        JSON.stringify(this.contractDetails?.abi),\n        this.contractDetails?.contractAddress,\n        true\n      );\n      let rewards = await contract.getRewardInfo(keys, tokenId);\n      return rewards;\n    } catch (error) {\n      return null;\n    }\n  };\n\n  /**\n   * Get Rewards in Incentive\n   * @param {array} rewardToken rewardToken\n   * @param {string} walletAddress token id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getRewards = async (rewardToken, walletAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let rewards = await contract.rewards(rewardToken, walletAddress);\n\n        resolve(rewards);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Mutli Call Function call for restake\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n   * @param {string} tokenId token id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  mutliCallReStake = async (keys, tokenId, walletAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n        // Encode the function calls\n        const unStakeToken = await contract.interface.encodeFunctionData(\n          \"unstakeToken\",\n          [keys, tokenId]\n        );\n        const stakeToken = await contract.interface.encodeFunctionData(\n          \"stakeToken\",\n          [keys, tokenId]\n        );\n        const claimReward = await contract.interface.encodeFunctionData(\n          \"claimReward\",\n          [keys[0], walletAddress, 0]\n        );\n\n        const multicallData = contract.interface.encodeFunctionData(\n          \"multicall\",\n          [[unStakeToken, stakeToken, claimReward]]\n        );\n\n        const tx = {\n          to: this.contractDetails?.contractAddress,\n          data: multicallData,\n          value: ethers.utils.parseEther(\"0\"), // Amount of Ether to send with the transaction\n        };\n\n        const response = await this.SIGNER.sendTransaction(tx);\n\n        let receipt = await response.wait(); // Wait for the transaction to be mined\n        console.log(receipt, \"<===receipt\");\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Mutli Call Function call for unstake and claim\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n   * @param {string} tokenId token id\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  mutliCallUnstake = async (keys, tokenId, walletAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        // Encode the function calls\n        const unStakeToken = await contract.interface.encodeFunctionData(\n          \"unstakeToken\",\n          [keys, tokenId]\n        );\n\n        const claimReward = await contract.interface.encodeFunctionData(\n          \"claimReward\",\n          [keys[0], walletAddress, 0]\n        );\n\n        const multicallData = contract.interface.encodeFunctionData(\n          \"multicall\",\n          [[unStakeToken, claimReward]]\n        );\n\n        const tx = {\n          to: this.contractDetails?.contractAddress,\n          data: multicallData,\n          value: ethers.utils.parseEther(\"0\"), // Amount of Ether to send with the transaction\n        };\n\n        const response = await this.SIGNER.sendTransaction(tx);\n\n        let receipt = await response.wait(); // Wait for the transaction to be mined\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  ///unstake\n\n  unStake = async (keys, tokenId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let tx = await contract.unstakeToken(keys, tokenId);\n\n        let receipt = await tx.wait();\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  claimRewards = async (rewardsToken, walletAddress) => {\n    console.log(rewardsToken, walletAddress, \"<===data\");\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let tx = await contract.claimReward(rewardsToken, walletAddress, 0);\n\n        let receipt = await tx.wait();\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  ///withdraw\n\n  withdrawToken = async (tokenId, walletAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n\n        let tx = await contract.withdrawToken(tokenId, walletAddress, \"0x\");\n\n        let receipt = await tx.wait();\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Nft Token Id\n   * @param {string} walletAddress own wallet address\n   * @param {string} index index\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getTokenId = async (walletAddress, index) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(NFTManager),\n          this.contractDetails?.nftManagerContractAddress,\n          true\n        );\n\n        const response = await contract.tokenOfOwnerByIndex(\n          walletAddress,\n          index\n        );\n\n        resolve(response.toString());\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Nft Token URI\n   * @param {string} tokenId own wallet address\n   *\n   * @returns {Promise} base64 encoded in Success or Error in Fail\n   */\n  getTokenURI = async (tokenId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(NFTManager),\n          this.contractDetails?.nftManagerContractAddress,\n          true\n        );\n\n        const response = await contract.tokenURI(tokenId);\n\n        // console.log(response, \"<===response\")\n\n        resolve(response);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Multi Call Function call for endIncentive and unstake all staked nft.\n   * @param {array} keys [reward token, pool address,start time, endTime, refundee address]\n   * @param {array} tokenIds [token id]\n\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  endIncentive = async (keys, tokenIds) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n        let encodeData = [];\n\n        for (let i = 0; i < tokenIds.length; i++) {\n          let unstakeToken = await contract.interface.encodeFunctionData(\n            \"unstakeToken\",\n            [keys, tokenIds[i]]\n          );\n          encodeData.push(unstakeToken);\n        }\n\n        let endIncentive = await contract.interface.encodeFunctionData(\n          \"endIncentive\",\n          [keys]\n        );\n\n        encodeData.push(endIncentive);\n\n        // Encode the function calls\n\n        const multicallData = contract.interface.encodeFunctionData(\n          \"multicall\",\n          [encodeData]\n        );\n\n        const tx = {\n          to: this.contractDetails?.contractAddress,\n          data: multicallData,\n          value: ethers.utils.parseEther(\"0\"), // Amount of Ether to send with the transaction\n        };\n\n        const response = await this.SIGNER.sendTransaction(tx);\n\n        let receipt = await response.wait(); // Wait for the transaction to be mined\n\n        resolve(receipt);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  getTokenDecimal = async (tokenAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        if (tokenAddress) {\n          let tokenContract = this.getContract(\n            JSON.stringify(TokenABI),\n            tokenAddress,\n            true\n          );\n\n          let tokenDecimal = await tokenContract.decimals();\n          let tokenSymbol = await tokenContract.symbol();\n\n          resolve({\n            decimal: tokenDecimal,\n            symbol: tokenSymbol,\n          });\n        }\n      } catch (error) {\n        console.log(error, \"<====err in allowance\");\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Token Stake\n   *\n   * @param {string} amount amount value\n   *\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n\n  tokenStake = async (amount) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n\n        let getStakingContract = await contract.stakingToken();\n\n        let stakeAmount = await this.checkAllowance(\n          amount,\n          getStakingContract,\n          this.contractDetails.stakeContractAddress\n        );\n\n        let tx = await contract.stake(stakeAmount);\n        let receipt = await tx.wait();\n        resolve(receipt);\n        // let receipt = await stakeTxn.wait();\n        // resolve(receipt);\n      } catch (error) {\n        console.log(error, \"<===error in stake\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Token Withdraw\n   *\n   * @param {string} amount amount value\n   *\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  tokenWithdraw = async (amount) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n        let getStakingContract = await contract.stakingToken();\n        let tokenData = await this.getTokenDecimal(getStakingContract);\n        let tokenAmountWithDecimal = Number(amount) * 10 ** tokenData.decimal;\n\n        // console.log(tokenAmountWithDecimal, \"<====tokenAmountWithDecimal\")\n        let tx = await contract.withdraw(tokenAmountWithDecimal.toString());\n        let receipt = await tx.wait();\n        resolve(receipt);\n      } catch (error) {\n        console.log(error, \"<===error in stake\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Token Exit\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  tokenExit = async () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n        let tx = await contract.exit();\n        let receipt = await tx.wait();\n        resolve(receipt);\n      } catch (error) {\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Rewards\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getTokenRewards = async () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n\n        console.log(contract, \"<====contract\");\n        let tx = await contract.getReward();\n        let receipt = await tx.wait();\n        resolve(receipt);\n      } catch (error) {\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Check and Increase Allowance.\n   *\n   * @param {Number} tokenAddress ERC20 token address\n   *\n   *\n   * @returns {Promise} Promise\n   */\n  getTokenBalance = async (tokenAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let walletAddres = this.SIGNER.getAddress();\n        let tokenContract = this.getContract(\n          JSON.stringify(TokenABI),\n          tokenAddress,\n          true\n        );\n        let getBalance = await tokenContract.balanceOf(walletAddres);\n        let tokenDecimal = await tokenContract.decimals();\n        let symbol = await tokenContract.symbol();\n        let getTotalSupply = await tokenContract.totalSupply();\n        let getTotalSupplyInEth =\n          getTotalSupply.toString() / 10 ** tokenDecimal;\n\n        resolve({\n          balance: getBalance.toString() / 10 ** tokenDecimal,\n          tokenDecimal: tokenDecimal,\n          symbol: symbol,\n          totalSupply: getTotalSupplyInEth,\n        });\n      } catch (error) {\n        console.log(error, \"<====err in getTokenBalance\");\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Check and Increase Allowance.\n   *\n   * @param {Number} tokenAddress ERC20 token address\n   *\n   *\n   * @returns {Promise} Promise\n   */\n  getTokenSymbolAndDecimal = async (tokenAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let tokenContract = this.getContract(\n          JSON.stringify(TokenABI),\n          tokenAddress,\n          true\n        );\n\n        let tokenDecimal = await tokenContract.decimals();\n        let symbol = await tokenContract.symbol();\n\n        resolve({ tokenDecimal: tokenDecimal, symbol: symbol });\n      } catch (error) {\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get Detail info\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getDetailInfo = async () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n\n\n    \n        let walletAddress = this.SIGNER.getAddress();\n\n        let getStakingContract = await contract.stakingToken();\n        let getRewardsContract = await contract.rewardsToken();\n        let stakeToken = await this.getTokenBalance(getStakingContract);\n        let rewardToken = await this.getTokenSymbolAndDecimal(\n          getRewardsContract\n        );\n\n        let stakedAmount = await contract.balanceOf(walletAddress);\n        stakedAmount = stakedAmount.toString() / 10 ** stakeToken.tokenDecimal;\n\n        let earnedAmount = await contract.earned(walletAddress);\n        earnedAmount = earnedAmount.toString() / 10 ** rewardToken.tokenDecimal;\n\n        let totalSupply = await contract.totalSupply();\n        totalSupply = totalSupply.toString() / 10 ** stakeToken.tokenDecimal;\n\n        resolve({\n          balance: parseFloat(stakedAmount) + parseFloat(stakeToken.balance),\n          stakedAmount:\n            parseFloat(stakedAmount),\n          unStakedAmount:\n            parseFloat(stakeToken.balance) ,\n          totalSupply: parseInt(totalSupply),\n          earnedAmount: earnedAmount,\n          rewardSymbol: rewardToken.symbol,\n          stakeSymbol: stakeToken.symbol,\n          tokenTotalSupply: parseInt(stakeToken.totalSupply),\n          unStackTotalSupply:\n            parseInt(stakeToken.totalSupply) - parseInt(totalSupply),\n        });\n      } catch (error) {\n\n        console.log(error, \"<===error\")\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  nftCount = async (id) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(this.contractDetails?.abi),\n          this.contractDetails?.contractAddress,\n          true\n        );\n        let res = await contract.incentives(id);\n        resolve(res);\n      } catch (error) {\n        // console.log(error, \"<===error in buy\");\n        if (error?.code === -32603) {\n          return reject(\"insufficient funds for intrinsic transaction cost\");\n        }\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   *\n   *\n   * @returns {Promise} Object (Transaction Hash, Contract Address) in Success or Error in Fail\n   */\n  getPoolDetails = async (poolAddress) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        let contract = this.getContract(\n          JSON.stringify(PancakeV3Pool),\n          poolAddress,\n          true\n        );\n        let getToken0Address = await contract.token0();\n        let getToken1Address = await contract.token1();\n        let getToken0Detail = await this.getTokenSymbolAndDecimal(\n          getToken0Address\n        );\n        let getToken1Detail = await this.getTokenSymbolAndDecimal(\n          getToken1Address\n        );\n        resolve({\n          token0Symbol: getToken0Detail.symbol,\n          token1Symbol: getToken1Detail.symbol,\n        });\n      } catch (error) {\n        console.log(error, \"<===error in getPoolSymbol\");\n\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get APR Rewards for staking\n   *\n   * @param {Number} totalSupply total stake amount\n   * @param {Number} WBCHPrice WBCH Price in USD\n   * @param {Number} GOBPrice GOB Price in USD\n   *\n   *\n   * @returns {Promise} Number APR in Success or Error in Fail\n   */\n  getAPR = async (totalSupply, WBCHPrice, GOBPrice) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        WBCHPrice = Number(WBCHPrice);\n        GOBPrice = Number(GOBPrice);\n\n        const contract = this.getContract(\n          JSON.stringify(StakeABI),\n          this.contractDetails.stakeContractAddress,\n          true\n        );\n        let rewardsToken = await contract.rewardsToken();\n        let getTokenData = await this.getTokenSymbolAndDecimal(rewardsToken);\n        let rewardRate = await contract.rewardRate();\n        rewardRate = rewardRate.toString() / 10 ** getTokenData.tokenDecimal;\n        rewardRate = toFixedCustm(rewardRate);\n\n        const secondsInAYear = 365 * 24 * 60 * 60;\n\n        const apr =\n          ((rewardRate * WBCHPrice * secondsInAYear) /\n            (totalSupply * GOBPrice)) *\n          100;\n\n        // console.log(apr, \"<===apr\")\n\n        resolve(apr > 1 ? Number(apr).toFixed(2) : Number(apr).toFixed(4));\n      } catch (error) {\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n\n  /**\n   * Get NFT \n   *\n   * @param {string} tokenId token id\n   *\n   * @returns {Promise} address APR in Success or Error in Fail\n   */\n  getNftPoolAddress = async (tokenId) => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const NftContract = this.getContract(\n          JSON.stringify(NFTManager),\n          this.contractDetails?.nftManagerContractAddress,\n          true\n        );\n        let factoryAddress = await NftContract.factory();\n\n        let positions = await NftContract.positions(tokenId);\n        const facoryContract = this.getContract(\n          JSON.stringify(UniswapV3Factory),\n          factoryAddress,\n          true\n        );\n        const getPool = await facoryContract.getPool(\n          positions.token0,\n          positions.token1,\n          positions.fee\n        );\n        // console.log(apr, \"<===apr\")\n\n        resolve(getPool);\n      } catch (error) {\n        reject(error.reason || error.data?.message || error.message || error);\n      }\n    });\n  };\n}\n\nexport default Web3Intraction;\n","import React, { useState } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\n//css\nimport styles from \"../staking.module.scss\";\n\n// image\nimport logo from \"assets/farmingAssets/Images/logo.png\";\n\n//hooks && helpers\nimport {useWallet} from \"hooks/useWallet\";\nimport Web3Intraction from \"utils/web3Intraction\";\nimport { toCommas } from \"helpers/utils\";\n\nfunction Rewards({ details, getDetails, isBlocked, apr }) {\n  const { currentNetwork } = useSelector((state) => state.dashboard);\n  const wallet = useWallet();\n  const [loading, setLoading] = useState(false);\n\n  const getRewards = async (e) => {\n    try {\n      e.preventDefault();\n      if (isBlocked)\n        return toast.error(\" Our Product is unavailable in your location\");\n      setLoading(true);\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      await web3.getTokenRewards();\n      setLoading(false);\n      getDetails();\n      toast.success(\"Reward Claimed\");\n    } catch (error) {\n      setLoading(false);\n      toast.error(error);\n      console.log(error, \"<====error\");\n    }\n  };\n  return (\n    <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n      <div\n        className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n      >\n        <div className=\"top pb-3 text-center lg:mb-3 border-b-2 border-white w-full\">\n          <h4 className=\"m-0 text-3xl font-extrabold text-white\">REWARDS</h4>\n          <div className=\"pt-3\">\n            <h6 className=\"m-0 font-extrabold py-2 text-lg flex items-center justify-center\">\n              {toCommas(Number(details?.earnedAmount || 0).toFixed(4))}\n              {details?.rewardSymbol ? details.rewardSymbol : \"\"}\n              <img\n                src={logo}\n                height={100}\n                className=\"max-w-full flex-shrink-0 object-contain ms-2\"\n                width={100}\n                style={{ height: 20, width: 20 }}\n                alt=\"\"\n              />\n            </h6>\n          </div>\n        </div>\n\n\n        \n        <div className=\"contentBody lg:px-4 w-full\">\n          <div className=\"claimInput mt-4 my-2 text-center\">\n            <h6 className=\"m-0 font-extrabold py-2 text-lg \">APR: </h6>\n            <h6 className=\"m-0 font-extrabold py-2 text-lg \">{apr}%</h6>\n          </div>\n\n          <div className=\"btnWrpper text-center mt-3\">\n            <div className=\"py-2\">\n              <button\n                type=\"button\"\n                onClick={getRewards}\n                disabled={isBlocked || loading || !details?.earnedAmount}\n                className=\"inline-flex items-center justify-center commonBtn font-bold btn px-4\"\n              >\n                {loading ? (\n                  <div className=\"spinner\">\n                    <span className=\"\"> Please wait...</span>\n                  </div>\n                ) : (\n                  \"CLAIM\"\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Rewards;\n","import React, { useState } from \"react\";\n\n\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\n// image\nimport logo from \"assets/farmingAssets/Images/logoIcn.png\";\n\n//css\nimport styles from \"../staking.module.scss\";\n\n//hooks\nimport Web3Intraction from \"utils/web3Intraction\";\nimport {useWallet} from \"hooks/useWallet\";\nimport { toCommas } from \"helpers/utils\";\n\nfunction Staking({ getDetails, isBlocked, details }) {\n  const { currentNetwork } = useSelector((state) => state.dashboard);\n  const wallet = useWallet();\n\n  const [amount, setAmount] = useState(\"\");\n  const [percentage, setPercentage] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const handleSubmit = async (e) => {\n    try {\n      e.preventDefault();\n      if (isBlocked)\n        return toast.error(\" Our Product is unavailable in your location\");\n      if (amount <= 0) return toast.error(\"Amount Must be greater then zero\");\n\n      setLoading(true);\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      await web3.tokenStake(amount);\n      setLoading(false);\n      setAmount(0);\n      toast.success(\"Amount Staked\");\n      getDetails();\n    } catch (error) {\n      setLoading(false);\n      toast.error(error);\n\n      console.log(error, \"<====error\");\n    }\n  };\n\n  const handleChange = (e) => {\n    let { value } = e.target;\n    value = value.replace(/[^\\d.]/g, '');\n    if (isNaN(Number(value.replace(/,/g, '')))) {\n      return;\n    }\n    const formattedValue = value.replace(/,/g, '');\n    setAmount(formattedValue);\n  };\n\n\n\n\n  const handlePercentage = async (e, value) => {\n    try {\n      setPercentage(value);\n      const amount =\n        (parseFloat(value) / 100) * parseFloat(details?.unStakedAmount);\n      setAmount(amount);\n    } catch (error) {\n      console.log(error, \"<====error\");\n    }\n  };\n\n\n\n\n  return (\n    <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n      <div\n        className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n      >\n        <div className=\"top pb-3 text-center lg:mb-3 border-b-2 border-white w-full\">\n          <h4 className=\"m-0 text-3xl font-extrabold text-white\">UNSTAKED</h4>\n          <div className=\"pt-3\">\n            <h6 className=\"m-0 font-extrabold py-2 text-lg flex items-center justify-center\">\n              {toCommas(Number(details?.unStakedAmount).toFixed(2) || 0)} {details?.stakeSymbol}\n              <img\n                src={logo}\n                height={100}\n                className=\"max-w-full flex-shrink-0 object-contain ms-2\"\n                width={100}\n                style={{ height: 20, width: 20 }}\n                alt=\"\"\n              />\n            </h6>\n          </div>\n        </div>\n        <form onSubmit={handleSubmit}>\n          <div className=\"contentBody lg:px-4 w-full\">\n            <div className=\"claimInput mt-4 my-2 text-center\">\n              {/* <div\n                      className={`${styles?.InputWrp} InputWrp cursor-pointer mx-auto flex py-2 px-3 text-lg items-center justify-center font-bold text-white rounded`}\n                    >\n                      100\n                    </div> */}\n              <div className=\"relative iconWithText\">\n                {/* <button\n                  className=\"flex items-center justify-center btn absolute icn commonBtn h-auto py-2 right-2 rounded rounded text-xs px-2\"\n                  onClick={setMaxAmount}\n                >\n                  Max\n                </button> */}\n                <input\n                  type=\"text\"\n                  value={toCommas(amount)}\n                  onChange={handleChange}\n                  placeholder=\"Enter Amount\"\n                  className={`${styles?.InputWrp} InputWrp text-center bg-transparent text-white cursor-pointer mx-auto flex py-2 px-3 text-lg items-center justify-center font-bold text-white rounded`}\n                  required\n                />\n              </div>\n              <h6 className=\"m-0 font-extrabold py-2 text-lg \">\n                AMOUNT TO STAKE\n              </h6>\n            </div>\n            <div className=\"my-2\">\n              {/* <label\n                htmlFor=\"\"\n                className=\"m-0 font-bold text-white block text-center\"\n              >\n                Withdraw Percentage Amount\n              </label> */}\n              <ul\n                className=\"list-none mt-3 pl-0 mb-0 flex items-center justify-center gap-2 radioList\"\n                style={{ listStyle: \"none\" }}\n              >\n                {[25, 50, 75, 100].map((data, key) => (\n                  <li className=\"relative\" key={key}>\n                    <input\n                      type=\"radio\"\n                      id=\"10%\"\n                      name=\"withdraw\"\n                      className=\"file w-full h-full left-0 top-0 z-9 cursor-pointer absolute opacity-0\"\n                      onClick={(e) => handlePercentage(e, data)}\n                      checked={percentage == data}\n                    />\n                    <label\n                      htmlFor=\"10%\"\n                      className=\" h-auto radioBtn text-xs font-bold  p-2 text-white\"\n                    >\n                      {data === 100 ? \"Max\" : data + \"%\"}\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"btnWrpper text-center mt-3\">\n              <div className=\"py-2\">\n                <button\n                  type=\"submit\"\n                  disabled={isBlocked || loading}\n                  className=\"inline-flex items-center justify-center commonBtn font-bold btn px-4\"\n                >\n                  {loading ? (\n                    <div className=\"spinner\">\n                      <span className=\"\"> Please wait...</span>\n                    </div>\n                  ) : (\n                    \"STAKE\"\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n\n\n}\n\nexport default Staking;\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\n//css\nimport styles from \"../staking.module.scss\";\n\n\n// image\nimport logo from \"assets/farmingAssets/Images/logo.png\";\n\n//hooks && helpers\nimport {useWallet} from \"hooks/useWallet\";\nimport Web3Intraction from \"utils/web3Intraction\";\nimport { toCommas } from \"helpers/utils\";\n\nfunction Withdraw({ getDetails, details, isBlocked }) {\n  const { currentNetwork } = useSelector((state) => state.dashboard);\n  const wallet = useWallet();\n\n  const [amount, setAmount] = useState(\"\");\n  const [percentage, setPercentage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const handleWithdraw = async (e) => {\n    try {\n      e.preventDefault();\n      if (isBlocked)\n        return toast.error(\" Our Product is unavailable in your location\");\n\n      if (!Number(details?.stakedAmount)) {\n        return toast.error(\"No GOB Staked!\");\n      }\n      if (amount <= 0) return toast.error(\"Amount Must be greater then zero\");\n\n      if (amount > Number(details?.stakedAmount)) {\n        return toast.error(\n          \"Withdraw must be less then or equal to staked amount\"\n        );\n      }\n      setLoading(true);\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      await web3.tokenWithdraw(amount);\n      setLoading(false);\n      setAmount(0);\n      toast.success(\"Amount Withdraw\");\n      getDetails();\n    } catch (error) {\n      setLoading(false);\n      toast.error(error);\n      console.log(error, \"<====error\");\n    }\n  };\n\n  const handleExit = async (e) => {\n    try {\n      e.preventDefault();\n      if (isBlocked)\n        return toast.error(\" Our Product is unavailable in your location\");\n\n      if (!details?.stakedAmount) {\n        return toast.error(\"No GOB Staked!\");\n      }\n      setLoading(true);\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      await web3.tokenExit();\n      setLoading(false);\n      setAmount(0);\n      toast.success(\"Amount Reward Claimed & Withdraw!\");\n    } catch (error) {\n      setLoading(false);\n      toast.error(error);\n      console.log(error, \"<====error\");\n    }\n  };\n\n  const handlePercentage = async (e, value) => {\n    try {\n      if (!Number(details?.stakedAmount)) {\n        return toast.error(\"No GOB Staked!\");\n      }\n      setPercentage(value);\n      const amount =\n        (parseFloat(value) / 100) * parseFloat(details?.stakedAmount);\n      setAmount(amount);\n    } catch (error) {\n      console.log(error, \"<====error\");\n    }\n  };\n\n  const handleChange = (e) => {\n    let { value } = e.target;\n    value = value.replace(/[^\\d.]/g, '');\n    if (isNaN(Number(value.replace(/,/g, \"\")))) {\n      return;\n    }\n    const formattedValue = value.replace(/,/g, \"\");\n    setAmount(formattedValue);\n  };\n\n  return (\n    <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n      <div\n        className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n      >\n        <div className=\"top pb-3 text-center lg:mb-3 border-b-2 border-white w-full\">\n          <h4 className=\"m-0 text-3xl font-extrabold text-white\">STAKED</h4>\n          <div className=\"pt-3\">\n            <h6 className=\"m-0 font-extrabold py-2 text-lg flex items-center justify-center\">\n              {toCommas(Number(details?.stakedAmount).toFixed(2) || 0)} {details?.stakeSymbol}\n              <img\n                src={logo}\n                height={100}\n                className=\"max-w-full flex-shrink-0 object-contain ms-2\"\n                width={100}\n                style={{ height: 20, width: 20 }}\n                alt=\"\"\n              />\n            </h6>\n          </div>\n        </div>\n\n        <form onSubmit={handleWithdraw}>\n          <div className=\"contentBody lg:px-4 w-full\">\n            <div className=\"claimInput mt-4 my-2 text-center\">\n              {/* <div\n                      className={`${styles?.InputWrp} InputWrp cursor-pointer mx-auto flex py-2 px-3 text-lg items-center justify-center font-bold text-white rounded`}\n                    >\n                      100\n                    </div> */}\n\n              <div className=\"relative iconWithText\">\n                {/* <button className=\"flex items-center justify-center btn absolute icn commonBtn h-auto py-2 right-2 rounded rounded text-xs px-2\" >\n                      Max\n                    </button> */}\n                <input\n                  type=\"text\"\n                  value={toCommas(amount)}\n                  onChange={handleChange}\n                  placeholder=\"Enter Amount\"\n                  className={`${styles?.InputWrp} InputWrp text-center bg-transparent text-white cursor-pointer mx-auto flex py-2 px-3 text-lg items-center justify-center font-bold text-white rounded`}\n                  required\n                />\n              </div>\n              <h6 className=\"m-0 font-extrabold py-2 text-lg \">\n                AMOUNT TO WITHDRAW\n              </h6>\n            </div>\n            <div className=\"my-2\">\n              {/* <label\n                htmlFor=\"\"\n                className=\"m-0 font-bold text-white block text-center\"\n              >\n                Withdraw Percentage Amount\n              </label> */}\n              <ul\n                className=\"list-none mt-3 pl-0 mb-0 flex items-center justify-center gap-2 radioList\"\n                style={{ listStyle: \"none\" }}\n              >\n                {[25, 50, 75, 100].map((data, key) => (\n                  <li className=\"relative\" key={key}>\n                    <input\n                      type=\"radio\"\n                      id=\"10%\"\n                      name=\"withdraw\"\n                      className=\"file w-full h-full left-0 top-0 z-9 cursor-pointer absolute opacity-0\"\n                      onClick={(e) => handlePercentage(e, data)}\n                      checked={percentage == data}\n                    />\n                    <label\n                      htmlFor=\"10%\"\n                      className=\" h-auto radioBtn text-xs font-bold  p-2 text-white\"\n                    >\n                      {data === 100 ? \"Max\" : data + \"%\"}\n                    </label>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"btnWrpper text-center mt-3\">\n              <div className=\"py-2\">\n                <button\n                  type=\"submit\"\n                  className=\"inline-flex items-center justify-center commonBtn font-bold btn px-4\"\n                  disabled={isBlocked || loading || !details?.stakedAmount}\n                >\n                  {loading ? (\n                    <div className=\"spinner\">\n                      <span className=\"\"> Please wait...</span>\n                    </div>\n                  ) : (\n                    \"WITHDRAW\"\n                  )}\n                </button>\n              </div>\n              {/* <div className=\"py-2\">\n                <button\n                  type=\"button\"\n                  onClick={handleExit}\n                  disabled={isBlocked || loading || !details?.stakedAmount}\n                  className=\"inline-flex items-center justify-center commonBtn font-bold btn px-4\"\n                >\n                  {loading ? (\n                    <div className=\"spinner\">\n                      <span className=\"\"> Please wait...</span>\n                    </div>\n                  ) : (\n                    \"WITHDRAW & CLAIM\"\n                  )}\n                </button>\n              </div> */}\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Withdraw;\n","import { useEffect, useState } from \"react\";\n\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\n// css\nimport \"assets/styles/main.css\";\n\n// image\nimport logo from \"assets/farmingAssets/Images/logo.png\";\n\n///component\nimport CommonLoader from \"components/Loader/SpinningLoader\";\nimport Rewards from \"./components/Rewards\";\nimport TokenStaking from \"./components/Staking\";\nimport Withdraw from \"./components/Withdraw\";\n\n//hooks && helpers\n// import useWallet from \"@/hooks/wallet\";\nimport * as request from \"helpers/apiRequests\";\nimport { priceGraphQl } from \"helpers/constants\";\nimport { toCommas } from \"helpers/utils\";\nimport Web3Intraction from \"utils/web3Intraction\";\n\nimport { useWallet } from \"hooks/useWallet\";\n\n// css\nimport styles from \"./staking.module.scss\";\n\n\nlet isBlocked = false;\n\nconst Staking = () => {\n  const { currentNetwork, isBlocked } = useSelector((state) => state.dashboard);\n  const wallet = useWallet();\n  const [loading, setLoading] = useState(false);\n  const [apr, setApr] = useState(0);\n\n  const [price, setPrice] = useState({\n    GOBInPrice: 0,\n    WBCHInPrice: 0,\n  });\n\n  const [details, setDetails] = useState({\n    stakeSymbol: null,\n  });\n\n  const getDetails = async () => {\n    try {\n      setLoading(true);\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      let detail = await web3.getDetailInfo();\n\n      setDetails({\n        ...detail,\n        unStakedAmountInDollar:\n          detail.unStakedAmount * Number(price.GOBInPrice),\n        stakedAmountInDollar: detail.stakedAmount * Number(price.GOBInPrice),\n        balanceInDollar: detail.balance * Number(price.GOBInPrice),\n      });\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error, \"<===err\");\n      setLoading(false);\n    }\n  };\n\n  const getAPR = async (totalSupply, BCHPrice, GOBPrice) => {\n    try {\n      const web3 = new Web3Intraction(currentNetwork, wallet.provider);\n      let getApr = await web3.getAPR(totalSupply, BCHPrice, GOBPrice);\n      setApr(getApr);\n    } catch (error) {\n      setLoading(false);\n    }\n  };\n\n  const getUsdPrice = async () => {\n    try {\n      const getUSDPrice = request.getUSDPrice(priceGraphQl);\n      const priceData = await getUSDPrice(\n        `query {\n          pool(id:\"0x532e1a0117ac273f448d5af5af8aa6336a4374d5\"){\n            id\n            sqrtPrice\n            id\n            liquidity\n            token0 {\n              id\n              decimals\n              name\n              symbol\n            }\n            token1 {\n              id\n              decimals\n              name\n              symbol\n            }\n            token0Price\n            token1Price\n            volumeUSD\n          }  \n       }`,\n        {}\n      );\n      const priceData1 = await getUSDPrice(\n        `query {\n          pool(id:\"0x934f434a226ed5b6c4f7fc9a2dc5dc0467bddee7\"){\n            id\n            sqrtPrice\n            id\n            liquidity\n            token0 {\n              id\n              decimals\n              name\n              symbol\n            }\n            token1 {\n              id\n              decimals\n              name\n              symbol\n            }\n            token0Price\n            token1Price\n            volumeUSD\n          }  \n       }`,\n        {}\n      );\n\n      setPrice({\n        GOBInPrice: Number(priceData?.pool?.token1Price || 0).toFixed(2),\n        WBCHInPrice: Number(priceData1?.pool?.token1Price || 0).toFixed(2),\n      });\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    if (details.stakeSymbol && price.GOBInPrice && price.WBCHInPrice) {\n      getAPR(details.totalSupply, price.WBCHInPrice, price.GOBInPrice);\n    }\n  }, [details, price]);\n\n  useEffect(() => {\n    if (\n      wallet.isActive &&\n      wallet.address &&\n      currentNetwork &&\n      price.GOBInPrice\n    ) {\n      getDetails();\n    }\n  }, [wallet, currentNetwork, price]);\n\n  useEffect(() => {\n    getUsdPrice();\n  }, []);\n\n  return (\n    <>\n     {\n       loading &&  <div\n       className=\"fixed flex items-center justify-center w-full\"\n       style={{\n         height: \"calc(100vh - 72px)\",\n         background: \"#00000099\",\n         zIndex: 9999,\n       }}\n     >\n       <CommonLoader />\n     </div>\n     }\n      <section className={`${styles?.stakingSec} staking relative py-5 w-full`}>\n        <div className=\"container mx-auto\">\n          <div className=\"grid gap-3  grid-cols-12\">\n            <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n              <div\n                className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n              >\n                <div className=\"top pb-3 text-center lg:mb-3 w-full\">\n                  <h4 className=\"m-0 text-3xl font-extrabold text-white\">\n                    YOUR BALANCE\n                  </h4>\n                </div>\n                <div className=\"contentBody lg:px-4 w-full\">\n                  <ul className=\"text-white pl-0\">\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium\">Total Unstaked: </span>\n                      <span className=\" w-50 font-medium pl-4 break-all\">\n                        $\n                        {toCommas(\n                          Number(details?.unStakedAmountInDollar || 0).toFixed(\n                            2\n                          )\n                        )}\n                      </span>\n                    </li>\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium\">Total Staked: </span>\n                      <span className=\"underline font-medium pl-4 w-50 break-all\">\n                        $\n                        {toCommas(\n                          Number(details?.stakedAmountInDollar || 0).toFixed(2)\n                        )}\n                      </span>\n                    </li>\n\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium\">Total Balance: </span>\n\n                      <span className=\"pl-4 font-medium w-50 break-all\">\n                        $\n                        {toCommas(\n                          Number(details?.balanceInDollar || 0).toFixed(2)\n                        )}\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n              <div\n                className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n              >\n                <div className=\"contentBody text-center lg:px-4\">\n                  <div className=\"py-2\">\n                    <div className=\"imgWrp\">\n                      <img\n                        src={logo}\n                        className=\"max-w-full w-auto h-auto mx-auto\"\n                        height={100}\n                        width={100}\n                        alt=\"\"\n                      />\n                    </div>\n                  </div>\n                  <p className=\"m-0 font-extrabold py-2 text-lg\">\n                    GOB Price: ${price?.GOBInPrice || 0}\n                  </p>\n                  <Link\n                    href=\"https://gobswap.dfd.cash/swap?inputCurrency=0xBc2F884680c95A02cea099dA2F524b366d9028Ba&outputCurrency=0x56381cB87C8990971f3e9d948939e1a95eA113a3&chain=sbch\"\n                    target=\"_blank\"\n                    onClick={(e) => (isBlocked ? e.preventDefault() : false)}\n                  >\n                    <button\n                      className=\"btn font-bold my-2 inline-flex items-center justify-center commonBtn\"\n                      disabled={isBlocked}\n                    >\n                      BUY GOB\n                    </button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n            <div className=\"lg:col-span-4 sm:col-span-6 col-span-12\">\n              <div\n                className={`${styles?.cardCstm} cardCstm p-4 h-full  rounded-xl flex items-center justify-between flex-col`}\n              >\n                <div className=\"top pb-3 text-center lg:mb-3\">\n                  <h4 className=\"m-0 text-3xl font-extrabold text-white\">\n                    GOB SUPPLY\n                  </h4>\n                </div>\n\n                <div className=\"contentBody lg:px-4 w-full\">\n                  <ul className=\"text-white\">\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium\">Total Unstaked: </span>\n                      <span className=\" pl-4 font-medium w-50 break-all\">\n                        {toCommas(Number(details?.unStackTotalSupply || 0))}\n                      </span>\n                    </li>\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium \">Total Staked: </span>\n                      <span className=\"underline font-medium pl-4 w-50 break-all\">\n                        {toCommas(Number(details?.totalSupply || 0))}\n                      </span>\n                    </li>\n                    <li className=\"py-1 font-semibold text-lg flex items-start\">\n                      <span className=\"w-50 font-medium\">Total Supply: </span>\n                      <span className=\" w-50 font-medium pl-4 break-all\">\n                        {toCommas(Number(details?.tokenTotalSupply || 0))}\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n\n            <TokenStaking\n              styles={styles}\n              details={details}\n              getDetails={getDetails}\n              isBlocked={isBlocked}\n            />\n            <Rewards\n              styles={styles}\n              details={details}\n              getDetails={getDetails}\n              isBlocked={isBlocked}\n              apr={apr}\n            />\n            <Withdraw\n              styles={styles}\n              details={details}\n              getDetails={getDetails}\n              isBlocked={isBlocked}\n            />\n          </div>\n        </div>\n      </section>\n    </>\n  );\n};\n\nexport default Staking;\n","export function subgraph(subgraphUrl) {\n  return async function (query, variables) {\n    const res = await fetch(subgraphUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ query, variables }),\n    });\n\n    const { data } = await res.json();\n\n    return data;\n  };\n}\n\nexport function getUSDPrice(subgraphUrl) {\n  return async function (query, variables) {\n\n    const res = await fetch(subgraphUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ query, variables }),\n    });\n\n    if (res.ok) {\n      const { data } = await res.json();\n      return data;\n    } else {\n      // Handle the error response properly\n      const errorData = await response.json(); // This is where you might get the error\n      console.log(errorData, \"<====errorData\");\n      return null;\n      // throw new Error(`GraphQL error: ${errorData.errors ? errorData.errors.map(err => err.message).join(', ') : 'Unknown error'}`);\n    }\n  };\n}\n"],"names":["cryptoData","label","symbol","name","type","chainName","rpcUrls","chainId","rpcUrl","contractAddress","process","nftManagerContractAddress","stakeContractAddress","explorerLink","blockExplorerUrls","nativeCurrency","decimals","useWallet","wallet","useWeb3React","dispatch","useDispatch","isActive","setIsActive","useState","address","setaddress","account","provider","useEffect","on","res","disconnect","setCurrentNetwork","findChain","find","network","toast","error","useMemo","toCommas","value","parts","toString","split","replace","join","constructor","currentNetwork","getContract","abi","isSigner","Contract","JSON","parse","this","SIGNER","PROVIDER","console","log","checkAllowance","async","tokenAmount","tokenAddress","approvalAddress","Promise","resolve","reject","walletAddres","getAddress","tokenContract","stringify","TokenABI","getBalance","balanceOf","tokenDecimal","Number","tokenAllowence","allowance","getTotalSupplyInEth","totalSupply","tokenAmountWithDecimal","ethers","txn","approve","wait","reason","data","message","createIncentive","keys","rewards","minimumWidth","tx","contract","contractDetails","rewardTokenAmount","code","stake","tokenId","walletAddress","NFTManager","getByteData","encode","getSafeContract","inputs","internalType","outputs","stateMutability","ownerOf","interface","encodeFunctionData","safeTransferFrom","multicallData","to","response","sendTransaction","receipt","multiStakeWithMultiCall","stakeData","i","length","stakeToken","push","getDeposit","deposits","getStakes","incentiveId","stakes","liquidity","secondsPerLiquidityInsideInitialX128","getRewardInfo","getRewards","rewardToken","mutliCallReStake","unStakeToken","claimReward","mutliCallUnstake","unStake","unstakeToken","claimRewards","rewardsToken","withdrawToken","getTokenId","index","tokenOfOwnerByIndex","getTokenURI","tokenURI","endIncentive","tokenIds","encodeData","getTokenDecimal","decimal","tokenStake","amount","StakeABI","getStakingContract","stakingToken","stakeAmount","tokenWithdraw","tokenData","withdraw","tokenExit","exit","getTokenRewards","getReward","getTokenBalance","balance","getTokenSymbolAndDecimal","getDetailInfo","getRewardsContract","stakedAmount","earnedAmount","earned","parseFloat","unStakedAmount","parseInt","rewardSymbol","stakeSymbol","tokenTotalSupply","unStackTotalSupply","nftCount","id","incentives","getPoolDetails","poolAddress","PancakeV3Pool","getToken0Address","token0","getToken1Address","token1","getToken0Detail","getToken1Detail","token0Symbol","token1Symbol","getAPR","WBCHPrice","GOBPrice","getTokenData","rewardRate","x","e","Math","abs","pow","Array","substring","toFixedCustm","apr","toFixed","getNftPoolAddress","NftContract","factoryAddress","factory","positions","facoryContract","UniswapV3Factory","getPool","fee","window","ethereum","getSigner","UniswapV3Staker","walletType","details","getDetails","isBlocked","useSelector","state","dashboard","loading","setLoading","div","className","styles","cardCstm","h4","h6","img","src","logo","height","width","style","alt","button","onClick","preventDefault","web3","Web3Intraction","success","disabled","span","setAmount","percentage","setPercentage","form","onSubmit","input","onChange","target","isNaN","formattedValue","placeholder","InputWrp","required","ul","listStyle","map","key","li","handlePercentage","checked","htmlFor","setApr","price","setPrice","GOBInPrice","WBCHInPrice","setDetails","detail","unStakedAmountInDollar","stakedAmountInDollar","balanceInDollar","getUsdPrice","getUSDPrice","subgraphUrl","query","variables","fetch","method","headers","body","ok","json","errorData","priceData","priceData1","pool","token1Price","BCHPrice","getApr","background","zIndex","CommonLoader","section","stakingSec","p","Link","href","TokenStaking","Rewards","Withdraw"],"sourceRoot":""}